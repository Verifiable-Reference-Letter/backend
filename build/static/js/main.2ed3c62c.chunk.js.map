{"version":3,"sources":["index.tsx","services/CryptService.ts","nav/Nav.tsx","routes.tsx","home/Home.tsx","services/CacheService.ts","components/FileUpload/FileUpload.tsx","components/Profile/index.ts","components/Profile/Profile.tsx","components/FileView/FileView.tsx","components/Confirm/Confirm.tsx","components/Send/Send.tsx","components/FileHistory/index.ts","components/FileHistory/FileHistory.tsx","WriterLetterDisplay/WriterLetterDisplay.tsx","writer/Writer.tsx","components/Select/index.ts","components/Select/Select.tsx","components/Confirm/index.ts","RequestorLetterDisplay/RequestorLetterDisplay.tsx","requestor/Requestor.tsx","RecipientLetterDisplay/RecipientLetterDisplay.tsx","RecipientUserDisplay/RecipientUserDisplay.tsx","recipient/Recipient.tsx","login/Login.tsx","dashboard/Dashboard.tsx","App.tsx"],"names":["ReactDOM","render","document","getElementById","CryptService","publicKey","ethereum","this","window","enable","then","catch","e","file","publicAddress","createFileData","fileData","fileDataString","console","log","letterType","request","method","params","encryptedMessage","EthUtil","Buffer","from","JSON","stringify","SigUtil","data","length","Promise","resolve","reject","pubKey","letterDetails","hash","letter","web3","eth","personal","sign","err","signedLetter","message","signature","letterTitle","letterUrl","decryptedMessage","parse","reader","FileReader","undefined","readAsDataURL","onload","result","name","type","Nav","props","onConnect","bind","brandLink","loggedIn","Navbar","bg","variant","Brand","onClick","href","Toggle","Collapse","className","connectedTo","Button","Text","user","Dropdown","id","Menu","alignRight","to","style","textDecoration","Item","React","Component","headers","Headers","set","Home","state","CacheService","minutes","memCache","memoryCache","Cache","duration","key","value","put","get","FileUpload","cryptService","File","displayMessage","displayVariant","submitClicked","buffering","failedEncryption","onFormSubmit","onChange","setState","target","files","size","restrictPdf","encrypt","encryptedFile","setTimeout","onEncryptedUpload","newDisplayMessage","reUpload","Form","onSubmit","Group","label","data-browse","custom","OverlayTrigger","overlay","Tooltip","icon","faExclamationTriangle","color","faInfoCircle","onClose","Profile","Card","Image","src","Spinner","animation","FileView","profileIsOpen","selectedPublicAddress","fetchUrl","retrieveProfileFromServer","init","body","auth","jwtToken","fetch","process","response","json","selectedUserProfile","loadingView","width","height","placement","Modal","show","onHide","closeProfileModal","backdrop","scrollable","Header","closeButton","Title","Body","Confirm","confirmed","customMessage","event","Col","Row","controlId","Label","Control","placeholder","handleMessageChange","disabled","onConfirm","Send","keys","unsentRecipientKeys","i","push","loadingContents","failedLoad","signingLetter","failedSigning","sending","sendSuccess","encrypted","letterId","getLetterContents","userKey","encryptedLetter","encryptSend","signLetter","encryptedLetterForm","letterContents","letterSignature","letterRecipient","uploadEncryptedLetterForm","status","decrypt","recipientList","encryptSignAndUpload","faCheckSquare","FileHistory","userProfiles","collapseIsOpen","history","Map","userProfile","historyList","c","openProfileModal","in","sentAt","WriterLetterDisplay","uploadModal","createRef","viewModal","cacheService","loadingHistory","loadingSend","historyIsOpen","messageIsOpen","uploadIsOpen","sendIsOpen","viewIsOpen","confirmIsOpen","uploadedFile","uploadContentsToServer","closeUploadModal","onReload","current","changeDisplayMessage","numUnsentRecipients","uploadedAt","retrieveUnsentRecipientKeysFromServer","closeSendModal","userKeys","retrieveLetterContentsFromServer","openConfirmModal","retrieveHistoryFromServer","numRecipients","letterRequestor","stopPropagation","openSendModal","openUploadModal","closeViewModal","openViewModal","closeHistoryModal","openHistoryModal","ref","openMessageModal","requestedAt","toString","closeConfirmModal","onUploadSubmit","onSendSubmit","Writer","letters","loadingLetters","loadLetterList","lettersList","map","l","k","writerLetters","writerFooter","faSync","Select","selectedRecipients","previouslySelectedRecipients","users","header","selectRecipients","InputGroup","multiple","labelKey","filterBy","options","paginate","selected","renderMenuItemChildren","option","slice","recipientsList","RequestorLetterDisplay","loadingSelect","selectIsOpen","sentRecipients","sendUpdatedLetterRecipientsToServer","unsentUrl","sentUrl","retrieveUnsentRecipientsFromServer","retrieveSentRecipientsFromServer","letterWriter","closeSelectModal","openSelectModal","filter","b","onSelectSubmit","Requestor","writerTypeahead","dualMode","selectedWriter","loadUsersList","loadLettersList","userInit","letterInit","sendNewLetterRequestToServer","selectWriter","requestorSelect","requestorLetter","requestorFooter","RecipientLetterDisplay","letterRecipientContents","RecipientUserDisplay","requestor","onView","Recipient","requestors","loadingRequestors","loadRequestorList","selectedUser","letterFetchUrl","requestorList","r","toggleLetterModal","recipientRequestors","recipientLetters","recipientFooter","Login","signingUp","failedKey","invalidEmail","invalidName","signUpSuccess","alreadySignedUp","noAccount","inputEmail","inputName","loginMode","handleInputNameChange","handleInputEmailChange","onLoginClick","signMessage","authenticate","re","test","toLowerCase","signup","email","getPublicKey","nonce","utils","utf8ToHex","j","callback","loginDisplay","toggleMode","signupDisplay","FormControl","onSignupClick","AuthRoutes","NonAuthRoutes","Dashboard","accounts","web3Provider","AuthRoute","path","exact","isAuthed","authed","pathname","login","App","windowEthereum","numErcBeingTraded","contract","checkedLocal","onLogin","methods","rate","call","BN","currentProvider","Web3","u","localStorage","getItem","t","checkJWT","verified","setItem","home","dashboard","writer","recipient","component","withRouter"],"mappings":"o77FAAA,0EAeAA,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAD,OAEFC,SAASC,eAAe,U,y7BCdpBC,E,WAIJ,aAAe,yBAHPC,UAAoB,GAGd,KAFNC,cAEM,EACZC,KAAKF,UAAY,GACjBE,KAAKD,SAAYE,OAAeF,SAC5BC,KAAKD,UACPC,KAAKD,SACFG,SACAC,MAAK,eACLC,OAAM,SAACC,O,6FAIAC,EAAYC,G,yGAECP,KAAKQ,eAAeF,G,cAArCG,E,OAEFC,EAAgC,KACpCC,QAAQC,IAAIL,GACZI,QAAQC,IAAIH,EAASI,Y,kBACdb,KAAKD,SACTe,QAAQ,CACPC,OAAQ,6BACRC,OAAQ,CAACT,KAEVJ,MAAK,SAACL,GACLa,QAAQC,IAAI,YAAad,GACzB,EAAKA,UAAYA,EAEjB,IAAMmB,EAAmBC,cACvBC,EAAOC,KACLC,KAAKC,UACHC,UACE,EAAKzB,UACL,CAAE0B,KAAMH,KAAKC,UAAUb,IACvB,6BAGJ,SAKJ,OAFAE,QAAQC,IAAIK,EAAiBQ,QAC7Bf,EAAiBO,EACVS,QAAQC,QAAQjB,MAExBN,OAAM,SAACC,GAEN,OADAM,QAAQC,IAAIP,GACLqB,QAAQC,QAAQjB,O,yCAG3BC,QAAQC,IAAI,0C,kBACLc,QAAQE,OAAO,2C,8LAIRnB,EAAoBoB,G,gFACpClB,QAAQC,IAAIiB,G,SAI0B,KACpClB,QAAQC,IAAIH,EAASI,YACfI,EAAmBC,cACvBC,EAAOC,KACLC,KAAKC,UACHC,UACEM,EACA,CAAEL,KAAMH,KAAKC,UAAUb,IACvB,6BAGJ,SAGJE,QAAQC,IAAIK,EAAiBQ,QAC7Bf,EAAiBO,E,kBACVS,QAAQC,QAAQjB,I,yCAEvBC,QAAQC,IAAI,yCAAZ,M,kBACOc,QAAQE,OAAO,2C,2LAIXE,G,uFAEPC,EAAOb,cACTA,YAAkBC,EAAOC,KAAKU,EAAe,UAE/CnB,QAAQC,IAAI,YAAcmB,G,kBACnBA,G,uCAEPpB,QAAQC,IAAI,wC,kBACL,wC,0LAIMoB,EAAgBzB,G,0FACxB,IAAImB,SAAQ,SAACC,EAASC,GAC3BK,IAAKC,IAAIC,SACNC,KAAKJ,EAAQzB,EAAe,IAAI,SAAC8B,EAAKC,GACrC,OAAID,GACF1B,QAAQC,IAAI,sBACLgB,EAAOS,KAEhB1B,QAAQC,IAAI,kBACLe,EAAQW,OAEhBnC,KAAKQ,QAAQC,KACbR,OAAM,SAACiC,GACN1B,QAAQC,a,wKAKLN,EAAYC,G,kGAEIP,KAAKQ,eAAeF,G,cAArCG,E,OAC0B,KAC5B8B,EAAUlB,KAAKC,UAAUb,G,kBAEtB,IAAIiB,SAAQ,SAACC,EAASC,GAC3BK,IAAKC,IAAIC,SACNC,KAAKG,EAAShC,EAAe,IAAI,SAAC8B,EAAKG,GACtC,OAAIH,GACF1B,QAAQC,IAAI,sBACLgB,EAAOS,KAEhB1B,QAAQC,IAAI,kBAQLe,EAAQa,OAEhBrC,KAAKQ,QAAQC,KACbR,OAAM,SAACiC,GACN1B,QAAQC,a,uCAIdD,QAAQC,IAAI,iD,kBACLc,QAAQE,OAAO,kD,yLAIZtB,EAAcC,G,8EAC1BI,QAAQC,IAAIL,GACZI,QAAQC,IAAIN,GACRG,EAAqB,CACvBgC,YAAa,GACb5B,WAAY,UACZ6B,UAAW,I,kBAEN1C,KAAKD,SACTe,QAAQ,CACPC,OAAQ,cACRC,OAAQ,CAACV,EAAMC,KAEhBJ,MAAK,SAACwC,GAIL,OAHAhC,QAAQC,IAAI+B,EAAiBlB,QAC7BhB,EAAWY,KAAKuB,MAAMD,GACtBhC,QAAQC,IAAI,UACLc,QAAQC,QAAQlB,MAExBL,OAAM,SAACC,GAEN,OADAM,QAAQC,IAAIP,GACLqB,QAAQE,OAAO,0B,uLAIPtB,G,8EACfG,EAAqB,CACvBiC,UAAW,GACXD,YAAa,GACb5B,WAAY,W,kBAEP,IAAIa,SAAQ,SAACC,EAASC,GAC3B,IAAIiB,EAAS,IAAIC,gBACJC,IAATzC,IACFuC,EAAOG,cAAc1C,GACrBuC,EAAOI,OAAS,SAAC5C,GACc,kBAAlBwC,EAAOK,QAChBvC,QAAQC,IAAI,sBAEZH,EAASgC,YAAcnC,EAAK6C,KAC5B1C,EAASI,WAAaP,EAAK8C,KAC3B3C,EAASiC,UAAYG,EAAOK,OAC5BvB,EAAQlB,KAIRE,QAAQC,IAAI,iCACZgB,EAAO,kD,8KAOErB,G,0FAEFP,KAAKD,SAASe,QAAQ,CACjCC,OAAQ,6BACRC,OAAQ,CAACT,K,+EAGXI,QAAQC,IAAI,6BAAZ,M,kBACO,M,uHAIEf,Q,gQCzGAwD,G,mBAjGb,WAAYC,GAAa,IAAD,8BACtB,4CAAMA,KACDC,UAAY,EAAKA,UAAUC,KAAf,gBAFK,E,yEAOtBxD,KAAKsD,MAAMC,c,+BAGH,IAAD,OACDE,EAAYzD,KAAKsD,MAAMI,SAAW,aAAe,IACvD,OACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACxB,kBAACF,EAAA,EAAOG,MAAR,CACEC,QAAS,WACP,OAAO,GAETC,KAAMP,GAJR,6BAQA,kBAACE,EAAA,EAAOM,OAAR,MACA,kBAACN,EAAA,EAAOO,SAAR,CAAiBC,UAAU,wBACvBnE,KAAKsD,MAAMc,aACX,kBAACC,EAAA,EAAD,CACEF,UAAU,UACVJ,QAAS,WACP,EAAKR,cAHT,WASDvD,KAAKsD,MAAMc,aACV,kBAACT,EAAA,EAAOW,KAAR,CAAaH,UAAU,WAAvB,0BACyB,8BAAOnE,KAAKsD,MAAMc,YAAcpE,KAAKsD,MAAMiB,KAAKhE,cAAgB,QAI7F,kBAACiE,EAAA,EAAD,KACE,kBAACA,EAAA,EAASP,OAAV,CAAiBJ,QAAQ,YAAYY,GAAG,kBAAxC,QAGCzE,KAAKsD,MAAMI,UACV,kBAACc,EAAA,EAASE,KAAV,CAAeC,YAAY,GACzB,kBAAC,IAAD,CAAMC,GCjEA,IDiEiBC,MAAO,CAAEC,eAAgB,SAC9C,4BACE,kBAACN,EAAA,EAASO,KAAV,CAAef,KAAK,cAApB,UAQJ,kBAAC,IAAD,CAAMY,GCzEK,aDyEiBC,MAAO,CAAEC,eAAgB,SACnD,4BACE,kBAACN,EAAA,EAASO,KAAV,CAAef,KAAK,cAApB,eAGJ,kBAAC,IAAD,CAAMY,GC5EK,aD4EiBC,MAAO,CAAEC,eAAgB,SACnD,4BACE,kBAACN,EAAA,EAASO,KAAV,CAAef,KAAK,cAApB,eAGJ,kBAAC,IAAD,CAAMY,GChFE,UDgFiBC,MAAO,CAAEC,eAAgB,SAChD,4BACE,kBAACN,EAAA,EAASO,KAAV,CAAef,KAAK,cAApB,YAGJ,kBAAC,IAAD,CAAMY,GCvFK,aDuFiBC,MAAO,CAAEC,eAAgB,SACnD,4BACE,kBAACN,EAAA,EAASO,KAAV,CAAef,KAAK,cAApB,iBAKNhE,KAAKsD,MAAMI,UACX,kBAACc,EAAA,EAASE,KAAV,CAAeC,YAAY,GACzB,kBAAC,IAAD,CAAMC,GCnGA,IDmGiBC,MAAO,CAAEC,eAAgB,SAC9C,4BACE,kBAACN,EAAA,EAASO,KAAV,CAAef,KAAK,cAApB,UAGJ,kBAAC,IAAD,CAAMY,GCvGC,SDuGiBC,MAAO,CAAEC,eAAgB,SAC/C,4BACE,kBAACN,EAAA,EAASO,KAAV,CAAef,KAAK,cAApB,kB,GAxFAgB,IAAMC,YEZlBC,G,OAAU,IAAIC,SACpBD,EAAQE,IAAI,8BAA+B,KAC3CF,EAAQE,IAAI,eAAgB,oB,IAqBbC,E,YAbb,WAAY/B,GAAmB,IAAD,8BAC5B,4CAAMA,KACDgC,MAAQ,GAFe,E,sEAM5B,OACE,yBAAKnB,UAAU,QACb,kBAAC,IAAD,CAAUS,GDvBG,gB,GCcFI,IAAMC,W,2HCCRM,E,WAXf,WAAYC,GAAkB,yBAFtBC,SAA6B,IAAIC,IAAYC,MAExB,KADrBC,cACqB,EAC3B5F,KAAK4F,SAAW,IAAOJ,EAAU,G,gDAE/BK,EAAQC,GACVnF,QAAQC,IAAI,MAAOiF,EAAKC,GACxB9F,KAAKyF,SAASM,IAAIF,EAAKC,EAAO9F,KAAK4F,Y,0BAEjCC,GAEF,OADAlF,QAAQC,IAAI,MAAOiF,GACZ7F,KAAKyF,SAASO,IAAIH,O,cC0RdI,G,mBAnQb,WAAY3C,GAAyB,IAAD,8BAClC,4CAAMA,KAHA4C,kBAE4B,EAElC,EAAKZ,MAAQ,CACXhF,KAAM,IAAI6F,KAAK,GAAI,IACnBC,eAAgB,GAChBC,eAAgB,EAChBC,eAAe,EACfC,WAAW,EACXC,kBAAkB,GAEpB,EAAKC,aAAe,EAAKA,aAAajD,KAAlB,gBACpB,EAAKkD,SAAW,EAAKA,SAASlD,KAAd,gBAChB,EAAK0C,aAAe,IAAIrG,IAZU,E,sEAe3BQ,GACPM,QAAQC,IAAI,gBACZZ,KAAK2G,SAAS,CAAErG,KAAMD,EAAEuG,OAAOC,MAAM,O,iKAI/BvG,EAAON,KAAKsF,MAAMhF,KACxBK,QAAQC,IAAIN,GACPA,GAAsB,IAAdA,EAAKwG,K,gBAChBnG,QAAQC,IAAI,oBACZZ,KAAK2G,SAAS,CACZP,eAAgB,oBAChBC,eAAgB,EAChBC,eAAe,I,2BAERtG,KAAKsD,MAAMyD,aAA6B,oBAAdzG,EAAK8C,K,iBACxCzC,QAAQC,IAAI,aACZZ,KAAK2G,SAAS,CACZP,eAAgB,uBAChBC,eAAgB,EAChBC,eAAe,EACfhG,KAAM,IAAI6F,KAAK,GAAI,M,4BAGjBnG,KAAKsD,MAAM0D,Q,wBACbhH,KAAK2G,SAAS,CACZP,eAAgB,yBAChBC,eAAgB,EAChBC,eAAe,EACfE,kBAAkB,I,UAKMxG,KAAKkG,aAAac,QAC1C1G,EACAN,KAAKsD,MAAMiB,KAAKhE,e,SAFd0G,E,SAcFtG,QAAQC,IAAI,gCACZZ,KAAK2G,SAAS,CACZJ,WAAW,EACXH,eAAgB,GAChBE,eAAe,IAEjBY,YAAW,WACT,EAAK5D,MAAM6D,kBAAkBF,KAC5B,OAhBHtG,QAAQC,IAAI,qBACZZ,KAAK2G,SAAS,CACZH,kBAAkB,EAClBF,eAAe,EACfF,eAAgB,oBAChBC,eAAgB,K,kJA0DLe,GACnBpH,KAAK2G,SAAS,CAAEP,eAAgBgB,M,+BAGxB,IAAD,OACCC,EAAarH,KAAKsD,MAAlB+D,SADD,EASHrH,KAAKsF,MANPc,EAHK,EAGLA,eACAC,EAJK,EAILA,eACAC,EALK,EAKLA,cAEAE,GAPK,EAMLD,UANK,EAOLC,kBACAlG,EARK,EAQLA,KAEF,OACE,kBAACgH,EAAA,EAAD,CAAMC,SAAUvH,KAAKyG,aAAajD,KAAKxD,OACrC,kBAACsH,EAAA,EAAKE,MAAN,KACE,yBAAKrD,UAAU,oBAAf,UAEA,kBAACmD,EAAA,EAAKnB,KAAN,CACE1B,GAAG,aACHN,UAAU,mBACVsD,MACEnH,GAAsB,KAAdA,EAAK6C,KACT7C,EAAK6C,KACLkE,EACA,qBACA,sBAENK,cAAY,SACZhB,SAAU1G,KAAK0G,SACfiB,QAAM,IAGR,yBAAKxD,UAAU,yCACZqC,GACC,yBAAKrC,UAAU,2BACb,kBAACyD,EAAA,EAAD,CACEC,QACE,kBAACC,EAAA,EAAD,CAASrD,GAAG,cACV,oCACE,6CACe,uCADf,8BAEO,yCAFP,6FAIU,oDAJV,oBAUN,kBAAC,IAAD,CACEsD,KAAMC,IACNC,MAAM,SACNnB,KAAK,KACL3C,UAAU,WAMjBmC,GACC,yBAAKnC,UAAU,2BACb,kBAACyD,EAAA,EAAD,CACEC,QACE,kBAACC,EAAA,EAAD,CAASrD,GAAG,cACV,oCAEGnE,GAAsB,KAAdA,EAAK6C,MACZ,uCACS,uCADT,gBACqC,yCAAkB,IADvD,uGAGkD,IAChD,oDAJF,iBASD7C,GAAsB,KAAdA,EAAK6C,MACZ,gDACkB,qCADlB,2EAEsC,IACpC,yCAHF,SAGyB,oDAA6B,IAHtD,mBAWR,kBAAC,IAAD,CACE4E,KAAMG,IACNpB,KAAK,KACL3C,UAAU,WAME,IAAnBkC,GACC,yBAAKlC,UAAU,8BAA8BiC,GAE3B,IAAnBC,GACC,yBAAKlC,UAAU,gCACZiC,GAcL,kBAAC/B,EAAA,EAAD,CACEF,UAAU,sCACVN,QAAQ,gBACRE,QAAS/D,KAAKyG,cAHhB,UAOA,kBAACpC,EAAA,EAAD,CACEF,UAAU,iCACVN,QAAQ,gBACRE,QAAS,SAAC1D,GACR,EAAKiD,MAAM6E,YAJf,gB,GAtPanD,IAAMC,Y,SCjChBmD,G,mBCeb,WAAY9E,GAAsB,IAAD,8BAC/B,4CAAMA,KACDgC,MAAQ,GAFkB,E,qIAKvB,IAAD,OACCf,EAASvE,KAAKsD,MAAdiB,KACR,OACE,6BACGA,GACC,yBAAKJ,UAAU,eACb,kBAACkE,EAAA,EAAD,CAAMlE,UAAU,aACd,yBAAKA,UAAU,OACb,yBAAKA,UAAU,IAAf,SAAyBI,EAAKpB,QAIlC,yBAAKgB,UAAU,6CACb,kBAACmE,EAAA,EAAD,CACEnE,UAAU,gBACVoE,IAAI,6HAKVhE,GACA,yBAAKJ,UAAU,iCACb,kBAACqE,EAAA,EAAD,CACErE,UAAU,wBACVsE,UAAU,SACV5E,QAAQ,eAKd,kBAACQ,EAAA,EAAD,CACEF,UAAU,mBACVJ,QAAS,SAAC1D,GACR,EAAKiD,MAAM6E,YAHf,c,GAxCcnD,IAAMC,YC6LbyD,G,mBAxKb,WAAYpF,GAAuB,IAAD,8BAChC,4CAAMA,KACDgC,MAAQ,CACXqD,eAAe,EACfC,sBAAuB,IAJO,E,8EAQjBA,GACfjI,QAAQC,IAAI,sBACZ,IAAMiI,EAAQ,wBAAoBD,EAApB,YACd5I,KAAK8I,0BAA0BD,K,gDAGPA,GAAmB,IAAD,OACpCE,EAAoB,CACxBhI,OAAQ,OACRmE,QAAS,CACP,8BAA+B,IAC/B,eAAgB,oBAElB8D,KAAM3H,KAAKC,UAAU,CACnB2H,KAAM,CACJC,SAAUlJ,KAAKsD,MAAMiB,KAAK2E,SAC1B3I,cAAeP,KAAKsD,MAAMiB,KAAKhE,eAEjCiB,KAAM,MAKV2H,MAAM,GAAD,OAAIC,qDAAJ,OAAwCP,GAAYE,GACtD5I,MAAK,SAACkJ,GACLA,EACGC,OACAnJ,MAAK,SAAC6I,GACL,IAAMxH,EAAsBwH,EAAKxH,KACjCb,QAAQC,IAAIyI,GACR7H,GAAwB,IAAhBA,EAAKC,QACf,EAAKkF,SAAS,CACZ4C,oBAAqB/H,EAAK,GAC1BmH,eAAe,OAIpBvI,OAAM,SAACC,GACNM,QAAQC,IAAIP,SAGjBD,OAAM,SAACC,GACNM,QAAQC,IAAIP,Q,0CAKhBM,QAAQC,IAAI,sBACZZ,KAAK2G,SAAS,CAAEgC,eAAe,M,+BAEvB,IAAD,SAC2B3I,KAAKsD,MAA/B7C,EADD,EACCA,SAAU+I,EADX,EACWA,YACVb,EAAkB3I,KAAKsF,MAAvBqD,cACR,OACE,6BACE,yBAAKxE,UAAU,QACZ1D,GACC,2BACE2C,KAAM3C,EAASI,WACf0H,IAAK9H,EAASiC,UACd+G,MAAM,OACNC,OAAO,WAGTjJ,GACA,oCACG+I,GACC,oCAQE,yBAAKrF,UAAU,iCACb,kBAACyD,EAAA,EAAD,CACE+B,UAAU,SACV9B,QACE,kBAACC,EAAA,EAAD,CAASrD,GAAG,cACV,uCACS,uCADT,2BACiD,IAC/C,wCAFF,uBAEwC,IACtC,0CAHF,4CAIQ,sDAJR,mBASJ,kBAAC,IAAD,CACEsD,KAAMG,IACNpB,KAAK,KACL3C,UAAU,UAGd,wEAIJqF,GACA,yBAAKrF,UAAU,iCACb,kBAACyD,EAAA,EAAD,CACE+B,UAAU,SACV9B,QACE,kBAACC,EAAA,EAAD,CAASrD,GAAG,cACV,6CACe,uCADf,qHAG8C,IAC5C,sDAJF,mBASJ,kBAAC,IAAD,CAAiBsD,KAAMC,IAAuBlB,KAAK,QAErD,yBAAK3C,UAAU,QAAf,wBAOV,kBAACE,EAAA,EAAD,CACEF,UAAU,mBACVJ,QAAS,SAAC1D,GACR,EAAKiD,MAAM6E,YAHf,SASA,kBAACyB,EAAA,EAAD,CACEnF,GAAG,gBACHoF,KAAMlB,EACNmB,OAAQ9J,KAAK+J,kBAAkBvG,KAAKxD,MACpCgK,SAAS,SACTvB,WAAW,EACXtE,UAAU,QACV8F,YAAY,EACZnD,KAAK,MAEL,kBAAC8C,EAAA,EAAMM,OAAP,CAAcC,aAAW,GACvB,kBAACP,EAAA,EAAMQ,MAAP,sBAGF,kBAACR,EAAA,EAAMS,KAAP,KACGrK,KAAKsF,MAAMiE,qBACV,kBAAC,EAAD,CACEhF,KAAMvE,KAAKsF,MAAMiE,oBACjBpB,QAASnI,KAAK+J,kBAAkBvG,KAAKxD,e,GA/J9BgF,IAAMC,YC+CdqF,G,mBA7Db,WAAYhH,GAAsB,IAAD,8BAC/B,4CAAMA,KACDgC,MAAQ,CACXiF,WAAW,EACXC,cAAe,IAJc,E,0HAQPC,G,uEAClBD,EAAwBC,EAAM7D,OAAOd,MAC3CnF,QAAQC,IAAI4J,GACZxK,KAAK2G,SAAS,CAAE6D,cAAeA,I,sIAGvB,IAAD,OACC7C,EAAW3H,KAAKsD,MAAhBqE,OACA4C,EAAcvK,KAAKsF,MAAnBiF,UACR,OACE,kBAACG,EAAA,EAAD,MACI/C,GAAW,kBAACgD,EAAA,EAAD,6BACZhD,GAAW,kBAACgD,EAAA,EAAD,KACV,kBAACrD,EAAA,EAAKE,MAAN,CAAYoD,UAAU,iBAAiBzG,UAAU,SAC/C,kBAACmD,EAAA,EAAKuD,MAAN,gCACA,kBAACvD,EAAA,EAAKwD,QAAN,CACE1H,KAAK,OACL2H,YAAY,mBACZrE,SAAU1G,KAAKgL,oBAAoBxH,KAAKxD,QAE1C,kBAACsH,EAAA,EAAKhD,KAAN,CAAWH,UAAU,cAArB,6CAKJ,kBAACwG,EAAA,EAAD,CAAKxG,UAAU,8BACb,yBAAKA,UAAU,aACZoG,GAAa,kBAAC/B,EAAA,EAAD,CAASC,UAAU,SAAS5E,QAAQ,eAEpD,kBAACQ,EAAA,EAAD,CACE4G,SAAUV,EACVpG,UAAU,0BACVJ,QAAS,SAAC1D,GACR,EAAKsG,SAAS,CAAE4D,WAAW,IAC3B,EAAKjH,MAAM4H,UAAU,EAAK5F,MAAMkF,iBALpC,WAUA,kBAACnG,EAAA,EAAD,CACEF,UAAU,qBACVJ,QAAS,SAAC1D,GACR,EAAKiD,MAAM6E,YAHf,c,GAhDYnD,IAAMC,Y,QCmhBbkG,G,mBAxfb,WAAY7H,GAAmB,IAAD,uBAC5B,4CAAMA,KAFA4C,kBACsB,EAG5B,IAAI7F,EAAI,GACF+K,EAAO,EAAK9H,MAAM+H,oBACxB,GAAID,EACF,IAAK,IAAIE,EAAI,EAAGA,EAAIF,EAAK3J,OAAQ6J,IAC/BjL,EAAEkL,MAAK,GAPiB,OAU5B5K,QAAQC,IAAIP,GACZM,QAAQC,IAAIwK,GAEZ,EAAK9F,MAAQ,CACXkG,iBAAiB,EACjBC,YAAY,EACZC,eAAe,EACfC,eAAe,EACfC,SAAS,EACTC,aAAa,EACbC,UAAWzL,GAEb,EAAK6F,aAAe,IAAIrG,IAtBI,E,wMA0BxBgJ,E,0BAA8B7I,KAAKsD,MAAMtB,OAAO+J,S,6BACpC/L,KAAKgM,kBACnBhM,KAAKsD,MAAMtB,OAAO+J,SAClBlD,G,wMAIuBhD,EAAaoG,G,kFACtCjM,KAAK2G,SAAS,CAAE8E,YAAY,EAAOE,eAAe,EAAOE,aAAa,I,SAEpElL,QAAQC,IAAI,eAAiBqL,EAAQnM,WACrCa,QAAQC,IAAI,cAAgBZ,KAAKsF,MAAM4G,iBAElClM,KAAKsF,MAAM4G,gB,iEAGYlM,KAAKkG,aAAaiG,YAC5CnM,KAAKsF,MAAM4G,gBACXD,EAAQnM,W,cAFNoM,E,OAIJvL,QAAQC,IAAI,qBAAuBsL,GAEnClM,KAAK2G,SAAS,CAAE+E,eAAe,I,UAIN1L,KAAKkG,aAAakG,WACzC,aAAeF,EACflM,KAAKsD,MAAMiB,KAAKhE,e,eAFd+B,E,OAIJtC,KAAK2G,SAAS,CAAE+E,eAAe,IAC/B/K,QAAQC,IAAI,kBAAoB0B,GAE1B+J,EAIF,CACFC,eAAgBJ,EAChBK,gBAAiBjK,EACjBkK,gBAAiBP,EAAQ1L,eAG3BP,KAAK2G,SAAS,CAAEiF,SAAS,IAEnB/C,E,0BAA8B7I,KAAKsD,MAAMtB,OAAO+J,S,uCAChC/L,KAAKyM,0BACzB5D,EACAwD,G,iBAKIP,EADO,YACS9L,KAAKsF,MAAMwG,YACrBjG,IAAO,EACjB7F,KAAK2G,SAAS,CACZmF,UAAWA,EACXF,SAAS,EACTC,aAAa,KAGf7L,KAAK2G,SAAS,CACZiF,SAAS,I,kDAIT5L,KAAKsF,MAAMoG,eAEb/K,QAAQC,IAAI,kBACZZ,KAAK2G,SAAS,CACZ+E,eAAe,EACfE,SAAS,EACTD,eAAe,KAER3L,KAAKsF,MAAMsG,SAEpBjL,QAAQC,IAAI,iBACZZ,KAAK2G,SAAS,CACZ+E,eAAe,EACfE,SAAS,MAIXjL,QAAQC,IAAI,8BACZZ,KAAK2G,SAAS,CACZ+E,eAAe,EACfE,SAAS,K,4MAOf/C,EACAwD,G,gFAKMtD,EAAoB,CACxBhI,OAAQ,OACRmE,QAAS,CACP,8BAA+B,IAC/B,eAAgB,oBAElB8D,KAAM3H,KAAKC,UAAU,CACnB2H,KAAM,CACJC,SAAUlJ,KAAKsD,MAAMiB,KAAK2E,SAC1B3I,cAAeP,KAAKsD,MAAMiB,KAAKhE,eAEjCiB,KAAM6K,K,kBAKalD,MAAM,GAAD,OACrBC,qDADqB,OACeP,GACvCE,G,UAEsB,OAJpBM,E,QAISqD,O,wBACX/L,QAAQC,IAAIyI,EAASqD,Q,mBACd,G,kCAGA,G,iEAGT/L,QAAQC,IAAR,M,mBACO,G,oMAIa6D,EAAYoE,G,8EAClClI,QAAQC,IAAI,cAAgB6D,GACtBsE,EAAoB,CACxBhI,OAAQ,OACRmE,QAAS,CACP,8BAA+B,IAC/B,eAAgB,oBAElB8D,KAAM3H,KAAKC,UAAU,CACnB2H,KAAM,CACJC,SAAUlJ,KAAKsD,MAAMiB,KAAK2E,SAC1B3I,cAAeP,KAAKsD,MAAMiB,KAAKhE,eAEjCiB,KAAM,MAGOiD,EAEjB0E,MAAM,GAAD,OAAIC,qDAAJ,OAAwCP,GAAYE,GACtD5I,MAAK,SAACkJ,GACL,OAAOA,EAASC,UAEjBnJ,MAAK,SAAC6I,GACL,IAAMkD,EAA0BlD,EAAKxH,KACjC0K,EAEF,EAAKhG,aACFyG,QAAQT,EAAiB,EAAK5I,MAAMiB,KAAKhE,eACzCJ,MAAK,SAACM,GACDA,GACF,EAAKkG,SAAS,CACZuF,gBAAiBzL,EACjB+K,iBAAiB,OAItBpL,OAAM,SAACC,GACNM,QAAQC,IAAI,4BACZ,EAAK+F,SAAS,CACZ6E,iBAAiB,EACjBC,YAAY,OAIlB9K,QAAQC,IAAI,sCAGfR,OAAM,SAACC,GACNM,QAAQC,IAAIP,M,wIAIR,IAAD,SACuCL,KAAKsD,MAA7B+H,GADf,EACC9G,KADD,EACOvC,OADP,EACeqJ,qBADf,EAUHrL,KAAKsF,MAPPkG,EAHK,EAGLA,gBACAC,EAJK,EAILA,WACAC,EALK,EAKLA,cACAC,EANK,EAMLA,cACAC,EAPK,EAOLA,QACAC,EARK,EAQLA,YACAC,EATK,EASLA,UAGEc,EAAgB,GACpB,GAAIvB,EACF,IADwB,IAAD,WACdC,GACPsB,EAAcrB,KACZ,kBAACZ,EAAA,EAAD,KACE,kBAACD,EAAA,EAAD,KACE,kBAACrC,EAAA,EAAD,CAAMlE,UAAU,6BACd,yBAAKA,UAAU,kCACb,kBAACkE,EAAA,EAAK6B,OAAN,CACE/F,UAAU,uBACVJ,QAAS,WACF+H,EAAUR,IACb,EAAKuB,qBAAqBvB,EAAGD,EAAoBC,MAIpDD,EAAoBC,GAAGnI,MAGzB2I,EAAUR,IACT,kBAAC1D,EAAA,EAAD,CACE+B,UAAU,SACV9B,QACE,kBAACC,EAAA,EAAD,CAASrD,GAAG,cACV,wDAIJ,kBAAC,IAAD,CACEsD,KAAM+E,IACNhG,KAAK,KACL3C,UAAU,wBAId2H,EAAUR,IACV,yBAAKnH,UAAU,qCAKtBmH,EAAI,EAAID,EAAoB5J,QAC3B,kBAACiJ,EAAA,EAAD,KACE,kBAACrC,EAAA,EAAD,CAAMlE,UAAU,6BACd,yBAAKA,UAAU,kCACb,kBAACkE,EAAA,EAAK6B,OAAN,CACE/F,UAAU,uBACVJ,QAAS,WACF+H,EAAUR,EAAI,IACjB,EAAKuB,qBACHvB,EAAI,EACJD,EAAoBC,EAAI,MAK7BD,EAAoBC,EAAI,GAAGnI,MAE7B2I,EAAUR,EAAI,IACb,kBAAC1D,EAAA,EAAD,CACE+B,UAAU,SACV9B,QACE,kBAACC,EAAA,EAAD,CAASrD,GAAG,cACV,wDAIJ,kBAAC,IAAD,CACEsD,KAAM+E,IACNhG,KAAK,KACL3C,UAAU,wBAId2H,EAAUR,EAAI,IACd,yBAAKnH,UAAU,qCAOxBmH,EAAI,GAAKD,EAAoB5J,QAC5B,kBAACiJ,EAAA,EAAD,KACE,kBAACrC,EAAA,EAAD,CAAMlE,UAAU,6BACd,yBAAKA,UAAU,0BAnFlBmH,EAAI,EAAGA,EAAID,EAAoB5J,OAAQ6J,GAAK,EAAI,EAAhDA,GA4FX,OACE,qCACIE,GAAmBC,GACnB,yBAAKtH,UAAU,sCACb,kBAACyD,EAAA,EAAD,CACE+B,UAAU,SACV9B,QACE,kBAACC,EAAA,EAAD,CAASrD,GAAG,cACV,6CACe,uCADf,wGAGe,qCAHf,8GAUJ,kBAAC,IAAD,CAAiBsD,KAAMC,IAAuBlB,KAAK,QAErD,yBAAK3C,UAAU,QAAf,oCAGFqH,IAAoBC,GACpB,kBAACf,EAAA,EAAD,KACGW,GACC,oCAEE,kBAACV,EAAA,EAAD,KACE,kBAACD,EAAA,EAAD,KAAMkC,OAITvB,GAAsD,IAA/BA,EAAoB5J,SAC5C,kBAACkJ,EAAA,EAAD,CAAKxG,UAAU,iCACb,kBAACqE,EAAA,EAAD,CACErE,UAAU,wBACVsE,UAAU,SACV5E,QAAQ,eAId,kBAAC8G,EAAA,EAAD,CAAKxG,UAAU,kCACb,yBAAKA,UAAU,2EACZuH,IAAkBE,GACjB,yBAAKzH,UAAU,kCACb,kBAACyD,EAAA,EAAD,CACE+B,UAAU,SACV9B,QACE,kBAACC,EAAA,EAAD,CAASrD,GAAG,cACV,8CACgB,mCADhB,kBAC2C,IACzC,oCAFF,sCAEkD,IAChD,wCAHF,qFAIiD,IAC/C,qDALF,mBAUJ,kBAAC,IAAD,CACEsD,KAAMG,IACNpB,KAAK,KACL3C,UAAU,UAGd,kEAGHwH,IAAkBC,IAAYF,GAC7B,yBAAKvH,UAAU,kCACb,kBAACyD,EAAA,EAAD,CACE+B,UAAU,SACV9B,QACE,kBAACC,EAAA,EAAD,CAASrD,GAAG,cACV,6CACe,oCADf,0CAEe,wCAFf,sFAImB,qDAJnB,mBAUJ,kBAAC,IAAD,CAAiBsD,KAAMG,IAAcpB,KAAK,QAE5C,yBAAK3C,UAAU,QAAf,+BAIHyH,IAAYF,GACX,yBAAKvH,UAAU,kCACb,kBAACyD,EAAA,EAAD,CACE+B,UAAU,SACV9B,QACE,kBAACC,EAAA,EAAD,CAASrD,GAAG,cACV,wFAEO,wCAFP,sFAIQ,qDAJR,mBASJ,kBAAC,IAAD,CACEsD,KAAMG,IACNpB,KAAK,KACL3C,UAAU,UAGd,6DAGH0H,IAAgBD,IAAYF,GAC3B,yBAAKvH,UAAU,kCACb,kBAACyD,EAAA,EAAD,CACE+B,UAAU,SACV9B,QACE,kBAACC,EAAA,EAAD,CAASrD,GAAG,cACV,mHAEiC,oCAFjC,qDAQJ,kBAAC,IAAD,CACEsD,KAAMG,IACNpB,KAAK,KACL3C,UAAU,UAGd,6DAIN,yBAAKA,UAAU,2BACZyH,GAAW,kBAACpD,EAAA,EAAD,CAASC,UAAU,SAAS5E,QAAQ,eAElD,kBAACQ,EAAA,EAAD,CACEF,UAAU,qBACVJ,QAAS,SAAC1D,GACR,EAAKiD,MAAM6E,YAHf,WAYLqD,GACC,oCAQE,yBAAKrH,UAAU,sCACb,kBAACyD,EAAA,EAAD,CACE+B,UAAU,SACV9B,QACE,kBAACC,EAAA,EAAD,CAASrD,GAAG,cACV,qEACuC,qCADvC,OACyD,IACvD,yCAFF,+FAIE,sDAJF,qEAUJ,kBAAC,IAAD,CAAiBsD,KAAMG,IAAcpB,KAAK,QAE5C,yBAAK3C,UAAU,QAAf,wC,GAlfKa,IAAMC,YCxCV8H,G,mBCoCb,WAAYzJ,GAA0B,IAAD,uBACnC,4CAAMA,KAHA0J,kBAE6B,EAInC,IADA,IAAIC,EAAiB,GACZ3B,EAAI,EAAGA,EAAI,EAAKhI,MAAM4J,QAAQzL,OAAQ6J,IAC7C2B,EAAe1B,MAAK,GALa,OAQnC,EAAKjG,MAAQ,CACX2H,eAAgBA,EAChBtE,eAAe,GAGjB,EAAKqE,aAAe,IAAIG,IAbW,E,2LAiBnCxM,QAAQC,IAAI,yBACZZ,KAAK2G,SAAS,CAAEgC,eAAe,I,sLAGVpI,G,yEACrBI,QAAQC,IAAI,yBACNwM,EAAcpN,KAAKgN,aAAahH,IAAIzF,GAC1CI,QAAQC,IAAIwM,QACQrK,IAAhBqK,GACIvE,EADuB,wBACKtI,EADL,YAE7BP,KAAK8I,0BAA0BD,IAE/B7I,KAAK2G,SAAS,CAAE4C,oBAAqB6D,EAAazE,eAAe,I,gMAIrCE,G,oFACxBE,EAAoB,CACxBhI,OAAQ,OACRmE,QAAS,CACP,8BAA+B,IAC/B,eAAgB,oBAElB8D,KAAM3H,KAAKC,UAAU,CACnB2H,KAAM,CACJC,SAAUlJ,KAAKsD,MAAMiB,KAAK2E,SAC1B3I,cAAeP,KAAKsD,MAAMiB,KAAKhE,eAEjCiB,KAAM,M,kBAMa2H,MAAM,GAAD,OACrBC,qDADqB,OACeP,GACvCE,G,cAFEM,E,gBAIaA,EAASC,O,OAAtBN,E,OAEExH,EAAsBwH,EAAKxH,KACjCb,QAAQC,IAAIyI,GACZ1I,QAAQC,IAAIY,GACRA,GAAwB,IAAhBA,EAAKC,SACfzB,KAAKgN,aAAa5H,IAAI5D,EAAK,GAAGjB,cAAeiB,EAAK,IAClDxB,KAAK2G,SAAS,CACZgC,eAAe,EACfY,oBAAqB/H,EAAK,M,kDAI9Bb,QAAQC,IAAR,M,gJASF,IALQ,IAAD,SACCsM,EAAYlN,KAAKsD,MAAjB4J,QADD,EAEmClN,KAAKsF,MAAvCqD,EAFD,EAECA,cAAesE,EAFhB,EAEgBA,eAEnBI,EAAc,GAJX,WAKE/B,GACP+B,EAAY9B,KACV,kBAACZ,EAAA,EAAD,KACE,kBAACD,EAAA,EAAD,KACE,kBAACrC,EAAA,EAAD,CAAMlE,UAAU,6BACd,yBAAKA,UAAU,kCACb,kBAACyD,EAAA,EAAD,CACE+B,UAAU,MACV9B,QACE,kBAACC,EAAA,EAAD,CAASrD,GAAG,mBACRwI,EAAe3B,GAA6B,gBAAxB,wBAI1B,kBAACjD,EAAA,EAAK6B,OAAN,CACE/F,UAAU,0BACVJ,QAAS,WACP,IAAIuJ,EAAC,YAAOL,GACZK,EAAEhC,IAAMgC,EAAEhC,GACV,EAAK3E,SAAS,CAAEsG,eAAgBK,MAGjCJ,EAAQ5B,GAAGkB,gBAAgBrJ,OAGhC,kBAACyE,EAAA,EAAD,CACE+B,UAAU,MACV9B,QACE,kBAACC,EAAA,EAAD,CAASrD,GAAG,gBACV,qCACQyI,EAAQ5B,GAAGkB,gBAAgBrJ,KADnC,gBAMJ,kBAACkF,EAAA,EAAK6B,OAAN,CACE/F,UAAU,wCACVJ,QAAS,WACP,EAAKwJ,iBACHL,EAAQ5B,GAAGkB,gBAAgBjM,qBAOvC,kBAAC2D,EAAA,EAAD,CAAUsJ,GAAIP,EAAe3B,IAC3B,yBAAKnH,UAAU,2BAAf,YACY+I,EAAQ5B,GAAGmC,UAI1BnC,EAAI,EAAI4B,EAAQzL,QACf,kBAACiJ,EAAA,EAAD,KACE,kBAACrC,EAAA,EAAD,CAAMlE,UAAU,6BACd,yBAAKA,UAAU,kCACb,kBAACyD,EAAA,EAAD,CACE+B,UAAU,MACV9B,QACE,kBAACC,EAAA,EAAD,CAASrD,GAAG,gBACRwI,EAAe3B,EAAI,GAA6B,gBAAxB,wBAI9B,kBAACjD,EAAA,EAAK6B,OAAN,CACE/F,UAAU,0BACVJ,QAAS,WACP,IAAIuJ,EAAC,YAAOL,GACZK,EAAEhC,EAAI,IAAMgC,EAAEhC,EAAI,GAClB,EAAK3E,SAAS,CAAEsG,eAAgBK,MAGjCJ,EAAQ5B,EAAI,GAAGkB,gBAAgBrJ,OAGpC,kBAACyE,EAAA,EAAD,CACE+B,UAAU,MACV9B,QACE,kBAACC,EAAA,EAAD,CAASrD,GAAG,gBACV,qCACQyI,EAAQ5B,EAAI,GAAGkB,gBAAgBrJ,KADvC,gBAMJ,kBAACkF,EAAA,EAAK6B,OAAN,CACE/F,UAAU,wCACVJ,QAAS,WACP,EAAKwJ,iBACHL,EAAQ5B,EAAI,GAAGkB,gBAAgBjM,qBAO3C,kBAAC2D,EAAA,EAAD,CAAUsJ,GAAIP,EAAe3B,EAAI,IAC/B,yBAAKnH,UAAU,2BAAf,YACY+I,EAAQ5B,EAAI,GAAGmC,UAMhCnC,EAAI,GAAK4B,EAAQzL,QAChB,kBAACiJ,EAAA,EAAD,KACE,kBAACrC,EAAA,EAAD,CAAMlE,UAAU,8BAChB,kBAACkE,EAAA,EAAK6B,OAAN,CAAa/F,UAAU,2DA3GxBmH,EAAI,EAAGA,EAAI4B,EAAQzL,OAAQ6J,GAAK,EAAI,EAApCA,GAkHT,OACE,yBAAKnH,UAAU,eACO,IAAnB+I,EAAQzL,QACP,kBAACiJ,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,wBAAIxG,UAAU,qBAAd,gBAIc,IAAnB+I,EAAQzL,QACP,oCACE,kBAACiJ,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,wCAEF,kBAACA,EAAA,EAAD,KACE,kBAACD,EAAA,EAAD,CAAKvG,UAAU,mBAAmBkJ,IAEpC,kBAAC1C,EAAA,EAAD,CAAKxG,UAAU,eACb,yBAAKA,UAAU,sBACb,kBAACyD,EAAA,EAAD,CACE+B,UAAU,QACV9B,QACE,kBAACC,EAAA,EAAD,CAASrD,GAAG,cACV,4CACc,sCADd,cACuC,mCADvC,sGAQJ,kBAAC,IAAD,CAAiBsD,KAAMG,IAAcpB,KAAK,SAG9C,yBAAK3C,UAAU,cACf,kBAACyD,EAAA,EAAD,CACEC,QACE,kBAACC,EAAA,EAAD,CAASrD,GAAG,WAAZ,yBAKF,kBAACJ,EAAA,EAAD,CACEF,UAAU,iCACVN,QAAQ,gBACRE,QAAS,SAAC1D,GACR,EAAKiD,MAAM6E,YAJf,YAaN,kBAACyB,EAAA,EAAD,CACEnF,GAAG,gBACHoF,KAAMlB,EACNmB,OAAQ9J,KAAK+J,kBAAkBvG,KAAKxD,MAEpCyI,WAAW,EACXtE,UAAU,QACV8F,YAAY,GAGZ,kBAACL,EAAA,EAAMM,OAAP,CAAcC,aAAW,GACvB,kBAACP,EAAA,EAAMQ,MAAP,eACGpK,KAAKsF,MAAMiE,2BADd,aACG,EAAgCpG,OAIrC,kBAACyG,EAAA,EAAMS,KAAP,KACGrK,KAAKsF,MAAMiE,qBACV,kBAAC,EAAD,CACEhF,KAAMvE,KAAKsF,MAAMiE,oBACjBpB,QAASnI,KAAK+J,kBAAkBvG,KAAKxD,gB,GA9Q/BgF,IAAMC,YC0xBjByI,E,YAtvBb,WAAYpK,GAAkC,IAAD,8BAC3C,4CAAMA,KAPAqK,YAAc3I,IAAM4I,YAMiB,EALrCC,UAAY7I,IAAM4I,YAKmB,EAJrCZ,kBAIqC,IAHrC9G,kBAGqC,IAFrC4H,kBAEqC,EAE3C,EAAKxI,MAAQ,CACX4H,QAAS,GACT7B,oBAAqB,GACrB0C,gBAAgB,EAChBvE,aAAa,EACbwE,aAAa,EACbrF,eAAe,EACfsF,eAAe,EACfC,eAAe,EACfC,cAAc,EACdC,YAAY,EACZC,YAAY,EACZC,eAAe,EACfrB,gBAAgB,GAGlB,EAAKD,aAAe,IAAIG,IACxB,EAAKjH,aAAe,IAAIrG,IACxB,EAAKiO,aAAe,IAAIvI,EAAa,GApBM,E,yLAwB3C5E,QAAQC,IAAI,wBACZZ,KAAK2G,SAAS,CACZwH,cAAc,EACdlB,gBAAgB,I,oLAICzC,G,0EACb3B,E,0BAA8B7I,KAAKsD,MAAMtB,OAAO+J,S,yBACtBhJ,IAA5B/C,KAAKsF,MAAMiJ,a,gCACPvO,KAAKwO,uBACTxO,KAAKsF,MAAMiJ,aACX1F,EACA2B,G,0PAMJ7J,QAAQC,IAAI,wBACZZ,KAAK2G,SAAS,CACZ2H,eAAe,EACfH,cAAc,EACdlB,eAAgBjN,KAAKsF,MAAM2I,gB,4LAK7BhH,EACA4B,EACA2B,G,4EAEA7J,QAAQC,IAAI,uBAQZuI,MAAM,GAAD,OAAIC,qDAAJ,OAAwCP,GAAY,CACvDG,KAAM3H,KAAKC,UAAU,CACnB2H,KAAM,CACJ1I,cAAeP,KAAKsD,MAAMiB,KAAKhE,cAC/B2I,SAAUlJ,KAAKsD,MAAMiB,KAAK2E,UAE5B1H,KAAM,CACJgJ,cAAeA,EACfvD,cAAeA,KAGnB/B,QAAS,CACP,8BAA+B,IAC/B,eAAgB,oBAElBnE,OAAQ,SAEPZ,MAAK,SAACkJ,GACL1I,QAAQC,IAAIyI,EAASqD,QACG,MAApBrD,EAASqD,QACX,EAAK+B,mBACL,EAAKnL,MAAMoL,YAEX,EAAKf,YAAYgB,QAASC,qBACxB,sCAILxO,OAAM,SAACC,GACNM,QAAQC,IAAIP,M,iQAKhBL,KAAK2G,SAAS,CAAEyH,YAAY,IAE1BpO,KAAKsD,MAAMuL,oBAAsB,GACA,OAAjC7O,KAAKsD,MAAMtB,OAAO8M,aAEZjG,EADN,0BACoC7I,KAAKsD,MAAMtB,OAAO+J,SADtD,wBAEA/L,KAAK+O,sCAAsClG,I,uPAK7C7I,KAAK2G,SAAS,CAAEyH,YAAY,I,qPAK5BpO,KAAKgP,iBACLhP,KAAKsD,MAAMoL,W,2MAG+B7F,G,oFACpCE,EAAoB,CACxBhI,OAAQ,OACRmE,QAAS,CACP,8BAA+B,IAC/B,eAAgB,oBAElB8D,KAAM3H,KAAKC,UAAU,CACnB2H,KAAM,CACJC,SAAUlJ,KAAKsD,MAAMiB,KAAK2E,SAC1B3I,cAAeP,KAAKsD,MAAMiB,KAAKhE,eAEjCiB,KAAM,M,kBAKa2H,MAAM,GAAD,OACrBC,qDADqB,OACeP,GACvCE,G,UAEsB,OAJpBM,E,QAISqD,O,gBACX/L,QAAQC,IAAIyI,EAASqD,Q,wCAOJrD,EAASC,O,QAAtBN,E,OAEExH,EAA+CwH,EAAKxH,KAC1Db,QAAQC,IAAIyI,GACZ1I,QAAQC,IAAIY,GACZxB,KAAK2G,SAAS,CACZ0E,oBAAqB7J,EAAKyN,SAC1BjB,aAAa,I,0DAIjBrN,QAAQC,IAAR,M,gRAUFD,QAAQC,IAAI,sBACZZ,KAAK2G,SAAS,CAAE0H,YAAY,IACtBtC,EAAW/L,KAAKsD,MAAMtB,OAAO+J,SAC7BlD,E,0BAA8BkD,E,oBACpCpL,QAAQC,IAAImL,GAEY,QADpBG,EAAkBlM,KAAK8N,aAAa9H,IAAI+F,I,iBAE1C/L,KAAK2G,SAAS,CAAE6C,aAAa,IAC7BxJ,KAAKkP,iCAAiCrG,G,mDAGf7I,KAAKkG,aAAayG,QACrCT,EACAlM,KAAKsD,MAAMiB,KAAKhE,e,QAFdE,E,OAKJE,QAAQC,IAAIH,EAASI,YACrBb,KAAK2G,SAAS,CACZlG,SAAUA,I,mDAGZE,QAAQC,IAAI,yB,wJAMhBD,QAAQC,IAAI,sBACZZ,KAAK2G,SAAS,CAAE0H,YAAY,EAAO5N,cAAUsC,M,uDAGd8F,GAAmB,IAAD,OACjDlI,QAAQC,IAAI,0BACZ,IAAMmI,EAAoB,CACxBhI,OAAQ,OACRmE,QAAS,CACP,8BAA+B,IAC/B,eAAgB,oBAElB8D,KAAM3H,KAAKC,UAAU,CACnB2H,KAAM,CACJC,SAAUlJ,KAAKsD,MAAMiB,KAAK2E,SAC1B3I,cAAeP,KAAKsD,MAAMiB,KAAKhE,eAEjCiB,KAAM,MAGOxB,KAAKsD,MAAMtB,OAAO+J,SAEnC5C,MAAM,GAAD,OAAIC,qDAAJ,OAAwCP,GAAYE,GACtD5I,MAAK,SAACkJ,GAGL,OAFA1I,QAAQC,IAAI,oBACZD,QAAQC,IAAIyI,GACLA,EAASC,UAEjBnJ,MAAK,SAAC6I,GAEL,IAAMkD,EAA0BlD,EAAKxH,KACjC0K,EACF,EAAKhG,aACFyG,QAAQT,EAAiB,EAAK5I,MAAMiB,KAAKhE,eACzCJ,MAAK,SAACM,GACDA,GACF,EAAKkG,SAAS,CACZ0H,YAAY,EACZ5N,SAAUA,OAIfL,OAAM,SAACC,GACN,EAAKsG,SAAS,CAEZ6C,aAAa,OAKnB,EAAK7C,SAAS,CACZ0H,YAAY,OAIjBjO,OAAM,SAACC,GACNM,QAAQC,IAAIP,Q,gFAIK4G,G,iEACrBjH,KAAK2G,SAAS,CAAE4H,aAActH,EAAeiH,eAAe,IAC5DlO,KAAKmP,mB,2PAILnP,KAAK2G,SAAS,CAAEuH,eAAe,I,0PAI/BvN,QAAQC,IAAI,yBACZZ,KAAK2G,SAAS,CAAEgC,eAAe,EAAOY,yBAAqBxG,I,sLAGtCxC,G,yEACrBI,QAAQC,IAAI,yBACNwM,EAAcpN,KAAKgN,aAAahH,IAAIzF,GAC1CI,QAAQC,IAAIwM,QACQrK,IAAhBqK,GACFpN,KAAK2G,SAAS,CAAEgC,eAAe,IACzBE,EAFuB,wBAEKtI,EAFL,YAG7BP,KAAK8I,0BAA0BD,IAE/B7I,KAAK2G,SAAS,CAAE4C,oBAAqB6D,EAAazE,eAAe,I,gMAIrCE,G,oFACxBE,EAAoB,CACxBhI,OAAQ,OACRmE,QAAS,CACP,8BAA+B,IAC/B,eAAgB,oBAElB8D,KAAM3H,KAAKC,UAAU,CACnB2H,KAAM,CACJC,SAAUlJ,KAAKsD,MAAMiB,KAAK2E,SAC1B3I,cAAeP,KAAKsD,MAAMiB,KAAKhE,eAEjCiB,KAAM,M,kBAKa2H,MAAM,GAAD,OACrBC,qDADqB,OACeP,GACvCE,G,UAGsB,OALpBM,E,QAKSqD,O,gBACX/L,QAAQC,IAAIyI,EAASqD,Q,wCAKJrD,EAASC,O,QAAtBN,E,OACExH,EAAsBwH,EAAKxH,KACjCb,QAAQC,IAAIyI,GACZ1I,QAAQC,IAAIY,GACRA,GAAwB,IAAhBA,EAAKC,SACfzB,KAAKgN,aAAa5H,IAAI5D,EAAK,GAAGjB,cAAeiB,EAAK,IAClDxB,KAAK2G,SAAS,CACZ4C,oBAAqB/H,EAAK,M,0DAShCb,QAAQC,IAAR,M,qQAQFD,QAAQC,IAAI,yBACZZ,KAAK2G,SAAS,CACZsH,eAAe,EACfF,gBAAgB,EAChBd,eAAgBjN,KAAKsF,MAAM+I,a,iQAK7B1N,QAAQC,IAAI,yBAEsB,IAA9BZ,KAAKsF,MAAM4H,QAAQzL,QACrBzB,KAAK2G,SAAS,CACZoH,gBAAgB,EAChBE,eAAe,EACfhB,gBAAgB,IAEZlB,EAAW/L,KAAKsD,MAAMtB,OAAO+J,SAC7BlD,EAP6B,0BAOCkD,EAPD,YAQnC/L,KAAKoP,0BAA0BvG,IAE/B7I,KAAK2G,SAAS,CACZsH,eAAe,EACfhB,gBAAgB,I,+LAKUpE,G,oFACxBE,EAAoB,CACxBhI,OAAQ,OACRmE,QAAS,CACP,8BAA+B,IAC/B,eAAgB,oBAElB8D,KAAM3H,KAAKC,UAAU,CACnB2H,KAAM,CACJC,SAAUlJ,KAAKsD,MAAMiB,KAAK2E,SAC1B3I,cAAeP,KAAKsD,MAAMiB,KAAKhE,eAEjCiB,KAAM,M,kBAKe2H,MAAM,GAAD,OACvBC,qDADuB,OACaP,GACvCE,G,UAEsB,OAJlBM,E,QAIOqD,O,iBACX/L,QAAQC,IAAIyI,EAASqD,QACrB1M,KAAK2G,SAAS,CAEZoH,gBAAgB,I,yCAIC1E,EAASC,O,QAAtBN,E,OAEAxH,EAAwBwH,EAAKxH,KACnCb,QAAQC,IAAIyI,GACZ1I,QAAQC,IAAIY,GACRA,EACFxB,KAAK2G,SAAS,CACZuG,QAAS1L,EACTuM,gBAAgB,KAGlBpN,QAAQC,IAAI,kCACZZ,KAAK2G,SAAS,CAEZoH,gBAAgB,K,0DAMtBpN,QAAQC,IAAR,MACAZ,KAAK2G,SAAS,CAEZoH,gBAAgB,I,oQAOpBpN,QAAQC,IAAI,sBACZZ,KAAK2G,SAAS,CAAE2H,eAAe,I,0PAI/B3N,QAAQC,IAAI,uBACZZ,KAAK2G,SAAS,CAAE2H,eAAe,I,qIAGvB,IAAD,uBACsDtO,KAAKsD,MAA1DiB,EADD,EACCA,KAAMvC,EADP,EACOA,OAAQqN,EADf,EACeA,cAAeR,EAD9B,EAC8BA,oBAD9B,EAiBH7O,KAAKsF,MAdP4H,EAHK,EAGLA,QACAa,EAJK,EAILA,eACAvE,EALK,EAKLA,YAEAb,GAPK,EAMLqF,YANK,EAOLrF,eACAsF,EARK,EAQLA,cAEAE,GAVK,EASLD,cATK,EAULC,cACAC,EAXK,EAWLA,WACAC,EAZK,EAYLA,WACAC,EAbK,EAaLA,cACArB,EAdK,EAcLA,eAEAxM,GAhBK,EAeL4K,oBAfK,EAgBL5K,UAGF,OACE,6BACE,kBAAC4H,EAAA,EAAD,CAAMlE,UAAU,wBACd,kBAACkE,EAAA,EAAK6B,OAAN,CACE/F,UAAU,0DACVJ,QAAS,kBAAM,EAAK4C,SAAS,CAAEsG,gBAAiBA,MAEhD,yBAAK9I,UAAU,aACb,0BAAMA,UAAU,QAAhB,QACA,kBAACyD,EAAA,EAAD,CACE+B,UAAU,MACV9B,QACE,kBAACC,EAAA,EAAD,CAASrD,GAAG,gBACV,+CAAWzC,EAAOsN,uBAAlB,aAAW,EAAwBnM,KAAnC,gBAIJ,kBAACkB,EAAA,EAAD,CACER,QAAQ,gBACRE,QAAS,SAAC1D,GACRA,EAAEkP,kBACF,EAAKhC,iBAAiBvL,EAAOsN,gBAAgB/O,iBAJjD,UAOGyB,EAAOsN,uBAPV,aAOG,EAAwBnM,QAK9B0L,EAAsB,GAA2B,OAAtB7M,EAAO8M,YACjC,kBAAClH,EAAA,EAAD,CACE+B,UAAU,MACV9B,QACE,kBAACC,EAAA,EAAD,CAASrD,GAAG,gBAAZ,8BAGF,kBAACJ,EAAA,EAAD,CAEER,QAAQ,gBACRM,UAAU,iCACVJ,QAAS,SAAC1D,GACRA,EAAEkP,kBACEnB,EACF,EAAKY,iBAEL,EAAKQ,kBATX,SAiBJ,kBAAC5H,EAAA,EAAD,CACE+B,UAAU,MACV9B,QACE,kBAACC,EAAA,EAAD,CAASrD,GAAG,gBACT0J,EAAe,eAAiB,8BAInC,kBAAC9J,EAAA,EAAD,CAEE4G,SAAUoE,EAAgB,EAC1BxL,QAAQ,gBACRM,UAAU,iCACVJ,QAAS,SAAC1D,GACRA,EAAEkP,kBACEpB,EACF,EAAKM,mBAEL,EAAKgB,oBAVX,WAiBJ,kBAAC7H,EAAA,EAAD,CACE+B,UAAU,MACV9B,QACE,kBAACC,EAAA,EAAD,CAASrD,GAAG,gBAAZ,6BACmBzC,EAAOsN,uBAD1B,aACmB,EAAwBnM,OAI3C,kBAACkB,EAAA,EAAD,CAEE4G,SAAgC,OAAtBjJ,EAAO8M,WACjBjL,QAAQ,gBACRM,UAAU,iCACVJ,QAAS,SAAC1D,GACRA,EAAEkP,kBACElB,EACF,EAAKqB,iBAEL,EAAKC,kBAVX,SAiBJ,kBAAC/H,EAAA,EAAD,CACE+B,UAAU,MACV9B,QACE,kBAACC,EAAA,EAAD,CAASrD,GAAG,gBACV,6BACIwJ,EAEE,uBADA,mCAMR,kBAAC5J,EAAA,EAAD,CAEE4G,SAA4B,IAAlBoE,EACVxL,QAAQ,gBACRM,UAAU,iCACVJ,QAAS,SAAC1D,GACRA,EAAEkP,kBACEtB,EACF,EAAK2B,oBAEL,EAAKC,qBAVX,cAyCR,kBAAC3L,EAAA,EAAD,CAAUsJ,GAAIP,GACZ,yBAAK9I,UAAU,wBACZiK,GAAc,sDACdD,GACC,6BACE,kBAAC,EAAD,CACE2B,IAAK9P,KAAK2N,YACVpJ,KAAMA,EACN8C,SAAgC,OAAtBrF,EAAO8M,WACjB/H,aAAa,EACbC,SAAS,EACTG,kBAAmBnH,KAAK+P,iBAAiBvM,KAAKxD,MAC9CmI,QAASnI,KAAKyO,iBAAiBjL,KAAKxD,SAIzC+N,GACC,yBAAK5J,UAAU,iCACb,kBAACqE,EAAA,EAAD,CACErE,UAAU,OACVsE,UAAU,SACV5E,QAAQ,gBAIZkK,GAAkBE,GAClB,yBAAK9J,UAAU,IACb,kBAAC,EAAD,CACEI,KAAMA,EACN2I,QAASA,EACT/E,QAASnI,KAAK4P,kBAAkBpM,KAAKxD,UAIzCmO,IAAiBF,GACjB,yBAAK9J,UAAU,qCACb,yBAAKA,UAAU,aAAf,wBACcnC,EAAOgO,mBADrB,aACc,EAAoBC,YAEjCjO,EAAO8M,YACN,yBAAK3K,UAAU,8BAAf,uBACanC,EAAO8M,kBADpB,aACa,EAAmBmB,aAGhCjO,EAAO8M,YACP,yBAAK3K,UAAU,8BAAf,uCASV,kBAACyF,EAAA,EAAD,CACEnF,GAAG,gBACHoF,KAAMlB,EACNmB,OAAQ9J,KAAK+J,kBAAkBvG,KAAKxD,MAEpCyI,WAAW,EACXtE,UAAU,QACV8F,YAAY,GAGZ,kBAACL,EAAA,EAAMM,OAAP,CAAcC,aAAW,GACvB,kBAACP,EAAA,EAAMQ,MAAP,eAAcpK,KAAKsF,MAAMiE,2BAAzB,aAAc,EAAgCpG,OAGhD,kBAACyG,EAAA,EAAMS,KAAP,KACE,kBAAC,EAAD,CACE9F,KAAMvE,KAAKsF,MAAMiE,oBACjBpB,QAASnI,KAAK+J,kBAAkBvG,KAAKxD,UAK3C,kBAAC4J,EAAA,EAAD,CACEnF,GAAG,gBACHoF,KAAMyE,EACNxE,OAAQ9J,KAAKkQ,kBAAkB1M,KAAKxD,MAEpCyI,WAAW,EACXtE,UAAU,QACV8F,YAAY,GAGZ,kBAACL,EAAA,EAAMM,OAAP,CAAcC,aAAW,GACvB,kBAACP,EAAA,EAAMQ,MAAP,wBAGF,kBAACR,EAAA,EAAMS,KAAP,KACE,kBAAC,EAAD,CACE9F,KAAMA,EACNoD,QAAQ,EACRuD,UAAWlL,KAAKmQ,eAAe3M,KAAKxD,MACpCmI,QAASnI,KAAKkQ,kBAAkB1M,KAAKxD,UAK3C,kBAAC4J,EAAA,EAAD,CACEnF,GAAG,aACHoF,KAAMuE,EACNtE,OAAQ9J,KAAKgP,eAAexL,KAAKxD,MAEjCyI,WAAW,EACXtE,UAAU,QACV8F,YAAY,GAGZ,kBAACL,EAAA,EAAMM,OAAP,CAAcC,aAAW,GACvB,kBAACP,EAAA,EAAMQ,MAAP,4BAGF,kBAACR,EAAA,EAAMS,KAAP,KACE,kBAAC,EAAD,CACE9F,KAAMA,EACNvC,OAAQhC,KAAKsD,MAAMtB,OACnBqJ,oBAAqBrL,KAAKsF,MAAM+F,oBAChClD,QAASnI,KAAKoQ,aAAa5M,KAAKxD,UAKtC,kBAAC4J,EAAA,EAAD,CACEnF,GAAG,aACHoF,KAAMwE,EACNvE,OAAQ9J,KAAK0P,eAAelM,KAAKxD,MACjCgK,SAAS,SACTvB,WAAW,EACXtE,UAAU,mBACV8F,YAAY,EACZnD,KAAK,MAEL,kBAAC8C,EAAA,EAAMM,OAAP,CAAcC,aAAW,GACvB,kBAACP,EAAA,EAAMQ,MAAP,uBAAmBpI,EAAOsN,uBAA1B,aAAmB,EAAwBnM,OAG7C,kBAACyG,EAAA,EAAMS,KAAP,KACE,kBAAC,EAAD,CACE5J,SAAUA,EACV+I,YAAaA,EACbsG,IAAK9P,KAAK6N,UACVtJ,KAAMA,EACN4D,QAASnI,KAAK0P,eAAelM,KAAKxD,e,GAvvBdgF,IAAMC,WCiGzBoL,G,mBAnIb,WAAY/M,GAAqB,IAAD,8BAC9B,4CAAMA,KACDgC,MAAQ,CACXgL,QAAS,GACTjB,cAAe,GACfR,oBAAqB,GACrB0B,gBAAgB,GANY,E,kFAY9BvQ,KAAKwQ,mB,wLAKCzH,EAAoB,CACxBhI,OAAQ,OACRmE,QAAS,CACP,8BAA+B,IAC/B,eAAgB,oBAElB8D,KAAM3H,KAAKC,UAAU,CACnB2H,KAAM,CACJC,SAAUlJ,KAAKsD,MAAMiB,KAAK2E,SAC1B3I,cAAeP,KAAKsD,MAAMiB,KAAKhE,eAEjCiB,KAAM,MAIV2H,MAAM,GAAD,OAAIC,qDAAJ,O,2BAA0DL,GAC5D5I,MAAK,SAACkJ,GACLA,EACGC,OACAnJ,MAAK,SAAC6I,GACL,IAAMxH,EAIFwH,EAAKxH,KAETb,QAAQC,IAAIyI,GACR7H,GAAQA,EAAK8O,SAAW9O,EAAK6N,cAC/B,EAAK1I,SAAS,CACZ2J,QAAS9O,EAAK8O,QACdjB,cAAe7N,EAAK6N,cACpBR,oBAAqBrN,EAAKqN,oBAC1B0B,gBAAgB,IAGlB,EAAK5J,SAAS,CAAE4J,gBAAgB,OAGnCnQ,OAAM,SAACC,GACNM,QAAQC,IAAIP,SAGjBD,OAAM,SAACC,GACNM,QAAQC,IAAIP,M,qIAIR,IAAD,OACCkE,EAASvE,KAAKsD,MAAdiB,KADD,EAOHvE,KAAKsF,MAJPgL,EAHK,EAGLA,QACAjB,EAJK,EAILA,cACAR,EALK,EAKLA,oBACA0B,EANK,EAMLA,eAGIE,EAAcH,EAAQI,KAAI,SAACC,EAAGC,GAAJ,OAC9B,kBAAC,EAAD,CACErM,KAAMA,EACNvC,OAAQ2O,EACRtB,cAAeA,EAAcuB,GAC7B/B,oBAAqBA,EAAoB+B,GACzClC,SAAU,EAAK8B,eAAehN,KAAK,QAIjCqN,EACJ,yBAAK1M,UAAU,kBACb,yBAAKA,UAAU,iBACb,yCAEF,yBAAKA,UAAU,sBAAsBsM,IAInCK,EACJ,yBAAK3M,UAAU,qDACb,sDACA,kBAACE,EAAA,EAAD,CACER,QAAQ,gBACRE,QAAS,WACP,EAAK4C,SAAS,CAAE2J,QAAS,GAAIC,gBAAgB,IAC7C,EAAKC,mBAGP,kBAAC,IAAD,CAAiBzI,KAAMgJ,QAK7B,OACE,qCACIR,GAAqC,IAAnBD,EAAQ7O,QAC1B,kBAACiJ,EAAA,EAAD,CAAKvG,UAAU,UACb,kBAACwG,EAAA,EAAD,KAAMkG,GACN,kBAAClG,EAAA,EAAD,KAAMmG,KAIRP,GAAqC,IAAnBD,EAAQ7O,QAC1B,yBAAK0C,UAAU,iCACb,uDAIHoM,GACC,yBAAKpM,UAAU,iDACb,kBAACqE,EAAA,EAAD,CAASrE,UAAU,GAAGsE,UAAU,SAAS5E,QAAQ,oB,GA7HxCmB,IAAMC,Y,kBCxBZ+L,G,mBCwCb,WAAY1N,GAAqB,IAAD,8BAC9B,4CAAMA,KAFA0J,kBACwB,EAE9B,EAAK1H,MAAQ,CACX2L,mBAAoB,EAAK3N,MAAM4N,6BAC/BvI,eAAe,GAGjB,EAAKqE,aAAe,IAAIG,IAPM,E,2LAW9BxM,QAAQC,IAAI,yBACZZ,KAAK2G,SAAS,CAAEgC,eAAe,I,sLAGVpI,G,yEACrBI,QAAQC,IAAI,yBACNwM,EAAcpN,KAAKgN,aAAahH,IAAIzF,GAC1CI,QAAQC,IAAIwM,QACQrK,IAAhBqK,GACIvE,EADuB,wBACKtI,EADL,YAE7BP,KAAK8I,0BAA0BD,IAE/B7I,KAAK2G,SAAS,CAAE4C,oBAAqB6D,EAAazE,eAAe,I,gMAIrCE,G,oFACxBE,EAAoB,CACxBhI,OAAQ,OACRmE,QAAS,CACP,8BAA+B,IAC/B,eAAgB,oBAElB8D,KAAM3H,KAAKC,UAAU,CACnB2H,KAAM,CACJC,SAAUlJ,KAAKsD,MAAMiB,KAAK2E,SAC1B3I,cAAeP,KAAKsD,MAAMiB,KAAKhE,eAEjCiB,KAAM,M,kBAMa2H,MAAM,GAAD,OACrBC,qDADqB,OACeP,GACvCE,G,cAFEM,E,gBAIaA,EAASC,O,OAAtBN,E,OAEExH,EAAsBwH,EAAKxH,KACjCb,QAAQC,IAAIyI,GACZ1I,QAAQC,IAAIY,GACRA,GAAwB,IAAhBA,EAAKC,SACfzB,KAAKgN,aAAa5H,IAAI5D,EAAK,GAAGjB,cAAeiB,EAAK,IAClDxB,KAAK2G,SAAS,CACZgC,eAAe,EACfY,oBAAqB/H,EAAK,M,kDAI9Bb,QAAQC,IAAR,M,wJAKFD,QAAQC,IAAI,iBACZZ,KAAKsD,MAAMiE,SAASvH,KAAKsF,MAAM2L,sB,+BAGvB,IAAD,WACiDjR,KAAKsD,MAArD6N,EADD,EACCA,MAAOC,EADR,EACQA,OAAQF,EADhB,EACgBA,6BADhB,EAEuClR,KAAKsF,MAA3CqD,EAFD,EAECA,cAAesI,EAFhB,EAEgBA,mBAEjBI,EACJ,kBAAC,WAAD,KACE,kBAACC,EAAA,EAAD,CAAYnN,UAAU,sBACpB,yBAAKA,UAAU,0CACb,kBAAC,IAAD,CACEM,GAAG,8BAEH8M,UAAQ,EACRC,SAAS,OACTC,SAAU,CAAC,OAAQ,iBACnBC,QAASP,EAETQ,UAAU,EACVC,SAAUX,EACVvK,SAAU,SAACkL,GACTjR,QAAQC,IAAIgR,GACZ,EAAKjL,SAAS,CACZsK,mBAAoBW,KAGxBC,uBACE,SAACC,GAAD,gBACKA,EAAO3O,KADZ,aACqB2O,EAAOvR,cAAcwR,MAAM,EAAG,GADnD,kBASRC,EAAiB,GACrB,GAAIf,EACF,IADuB,IAAD,WACb3F,GACP0G,EAAezG,KACb,kBAACZ,EAAA,EAAD,KACE,kBAACD,EAAA,EAAD,KACE,yBAAKvG,UAAU,kDACb,kBAACyD,EAAA,EAAD,CACE+B,UAAU,MACV9B,QACE,kBAACC,EAAA,EAAD,CAASrD,GAAG,gBACV,qCAAWwM,EAAmB3F,GAAGnI,KAAjC,gBAIJ,yBACEgB,UAAU,sBACVJ,QAAS,kBACP,EAAKwJ,iBAAiB0D,EAAmB3F,GAAG/K,iBAG7C0Q,EAAmB3F,GAAGnI,SAK9BmI,EAAI,EAAI2F,EAAmBxP,QAC1B,kBAACiJ,EAAA,EAAD,KACE,yBAAKvG,UAAU,kDACb,kBAACyD,EAAA,EAAD,CACE+B,UAAU,MACV9B,QACE,kBAACC,EAAA,EAAD,CAASrD,GAAG,gBACV,qCACQwM,EAAmB3F,EAAI,GAAGnI,KADlC,gBAMJ,yBACEgB,UAAU,sBACVJ,QAAS,kBACP,EAAKwJ,iBACH0D,EAAmB3F,EAAI,GAAG/K,iBAI7B0Q,EAAmB3F,EAAI,GAAGnI,SAOpCmI,EAAI,GAAK2F,EAAmBxP,QAC3B,kBAACiJ,EAAA,EAAD,KACE,kBAACrC,EAAA,EAAK6B,OAAN,CAAa/F,UAAU,0DAI1BmH,EAAI,EAAI2F,EAAmBxP,QAC1B,kBAACiJ,EAAA,EAAD,KACE,yBAAKvG,UAAU,kDACb,kBAACyD,EAAA,EAAD,CACE+B,UAAU,MACV9B,QACE,kBAACC,EAAA,EAAD,CAASrD,GAAG,gBACV,qCACQwM,EAAmB3F,EAAI,GAAGnI,KADlC,gBAMJ,yBACEgB,UAAU,sBACVJ,QAAS,kBACP,EAAKwJ,iBACH0D,EAAmB3F,EAAI,GAAG/K,iBAI7B0Q,EAAmB3F,EAAI,GAAGnI,SAOpCmI,EAAI,GAAK2F,EAAmBxP,QAC3B,kBAACiJ,EAAA,EAAD,KACE,kBAACrC,EAAA,EAAK6B,OAAN,CAAa/F,UAAU,6DAxFxBmH,EAAI,EAAGA,EAAI2F,EAAmBxP,OAAQ6J,GAAK,EAAI,EAA/CA,GA+FX,OACE,6BACE,kBAACX,EAAA,EAAD,KACE,4BAAKyG,IAEP,yBAAKjN,UAAU,QAAQkN,GACQ,IAA9BJ,EAAmBxP,QAClB,kBAACiJ,EAAA,EAAD,CAAKvG,UAAU,0BAA0B6N,GAG3C,yBAAK7N,UAAU,yCACb,yBAAKA,UAAU,QACb,kBAACyD,EAAA,EAAD,CACE+B,UAAU,QACV9B,QACE,kBAACC,EAAA,EAAD,CAASrD,GAAG,cACV,oCACc,sBAAX2M,GACC,qHAEmC,mCAFnC,wFAIqB,sCAJrB,6BAQU,oBAAXA,GACC,oLAG8C,IAC5C,sCAJF,gCAWR,kBAAC,IAAD,CAAiBrJ,KAAMG,IAAcpB,KAAK,SAI9C,yBAAK3C,UAAU,cAEgB,IAA9B8M,EAAmBxP,QAClB,kBAACmG,EAAA,EAAD,CACEC,QACE,kBAACC,EAAA,EAAD,CAASrD,GAAG,WAAZ,UACUwM,EAAmBxP,OAD7B,gBAKF,kBAAC4C,EAAA,EAAD,CACER,QAAQ,gBACRM,UAAU,4BACVJ,QAAS,WACP,EAAKT,MAAMiE,SAAS0J,KAJxB,WAW2B,IAA9BA,EAAmBxP,QAClB,kBAACmG,EAAA,EAAD,CACEC,QACE,kBAACC,EAAA,EAAD,CAASrD,GAAG,WAAZ,iCAGF,0BAAMN,UAAU,kBACd,kBAACE,EAAA,EAAD,CACER,QAAQ,gBACRM,UAAU,4BAGVJ,QAAS,WACP,EAAKT,MAAMiE,SAAS0J,KANxB,YAcN,kBAACrJ,EAAA,EAAD,CACEC,QACE,kBAACC,EAAA,EAAD,CAASrD,GAAG,WACE,oBAAX2M,EACG,oBACA,kCAIR,kBAAC/M,EAAA,EAAD,CACER,QAAQ,gBACRM,UAAU,qBACVJ,QAAS,WACP,EAAK4C,SAAS,CACZsK,mBAAoBC,MAIZ,oBAAXE,EAA+B,QAAU,UAG9C,kBAACxJ,EAAA,EAAD,CACEC,QACE,kBAACC,EAAA,EAAD,CAASrD,GAAG,WAAZ,uBAKJ,kBAACJ,EAAA,EAAD,CACER,QAAQ,gBACRM,UAAU,iCACVJ,QAAS,WACP,EAAKT,MAAM6E,YAJf,WAYF,kBAACyB,EAAA,EAAD,CACEnF,GAAG,gBACHoF,KAAMlB,EACNmB,OAAQ9J,KAAK+J,kBAAkBvG,KAAKxD,MAEpCyI,WAAW,EACXtE,UAAU,QACV8F,YAAY,GAGZ,kBAACL,EAAA,EAAMM,OAAP,CAAcC,aAAW,GACvB,kBAACP,EAAA,EAAMQ,MAAP,eAAcpK,KAAKsF,MAAMiE,2BAAzB,aAAc,EAAgCpG,OAGhD,kBAACyG,EAAA,EAAMS,KAAP,KACGrK,KAAKsF,MAAMiE,qBACV,kBAAC,EAAD,CACEhF,KAAMvE,KAAKsF,MAAMiE,oBACjBpB,QAASnI,KAAK+J,kBAAkBvG,KAAKxD,e,GA1VhCgF,IAAMC,YCtCZqF,G,OAAAA,GC4qBA2H,E,YAnnBb,WAAY3O,GAAqC,IAAD,8BAC9C,4CAAMA,KAHA0J,kBAEwC,EAE9C,EAAK1H,MAAQ,CACX4H,QAAS,GACTa,gBAAgB,EAChBmE,eAAe,EACfC,cAAc,EACdxJ,eAAe,EACfsF,eAAe,EACfE,cAAc,EACdG,eAAe,EACfrB,gBAAgB,EAChBiE,6BAA8B,GAC9BkB,eAAgB,GAChBnB,mBAAoB,IAGtB,EAAKjE,aAAe,IAAIG,IAjBsB,E,qHAoB3B3C,G,uEACnB7J,QAAQC,IAAI,oBAENiI,E,0BAA8B7I,KAAKsD,MAAMtB,OAAO+J,S,qBACtD/L,KAAKqS,oCAAoCxJ,G,0MAGDA,G,oFAClCE,EAAoB,CACxBhI,OAAQ,OACRmE,QAAS,CACP,8BAA+B,IAC/B,eAAgB,oBAElB8D,KAAM3H,KAAKC,UAAU,CACnB2H,KAAM,CACJC,SAAUlJ,KAAKsD,MAAMiB,KAAK2E,SAC1B3I,cAAeP,KAAKsD,MAAMiB,KAAKhE,eAEjCiB,KAAMxB,KAAKsF,MAAM2L,sB,kBAKE9H,MAAM,GAAD,OACrBC,qDADqB,OACeP,GACvCE,G,UAEsB,OAJpBM,E,QAISqD,O,gBACX/L,QAAQC,IAAIyI,EAASqD,Q,wCAEJrD,EAASC,O,QAAtBN,E,OAEExH,EAAewH,EAAKxH,KAC1Bb,QAAQC,IAAIyI,GACZ1I,QAAQC,IAAIY,GACRA,GACFxB,KAAK2G,SAAS,CACZwL,cAAc,EACd7D,eAAe,EACfrB,eAAgBjN,KAAKsF,MAAM2I,cAC3BiD,6BAA8B1P,I,0DAMpCb,QAAQC,IAAR,M,oQAKFD,QAAQC,IAAI,wBACZZ,KAAK2G,SAAS,CACZwL,cAAc,EACdD,eAAe,EACfjF,eAAgBjN,KAAKsF,MAAM2I,gB,mQAK7BtN,QAAQC,IAAI,iBAEN0R,E,0BAA+BtS,KAAKsD,MAAMtB,OAAO+J,S,qBACjDwG,E,0BAA6BvS,KAAKsD,MAAMtB,OAAO+J,S,mBAEE,IAAnD/L,KAAKsF,MAAM4L,6BAA6BzP,O,wBAC1CzB,KAAK2G,SAAS,CACZuL,eAAe,EACfjF,gBAAgB,EAChBkF,cAAc,I,SAEVnS,KAAKwS,mCAAmCF,G,uBACxCtS,KAAKyS,iCAAiCF,G,+BAE5CvS,KAAK2G,SAAS,CACZwL,cAAc,EACdlF,gBAAgB,I,yMAKmBpE,G,oFACjCE,EAAoB,CACxBhI,OAAQ,OACRmE,QAAS,CACP,8BAA+B,IAC/B,eAAgB,oBAElB8D,KAAM3H,KAAKC,UAAU,CACnB2H,KAAM,CACJC,SAAUlJ,KAAKsD,MAAMiB,KAAK2E,SAC1B3I,cAAeP,KAAKsD,MAAMiB,KAAKhE,eAEjCiB,KAAM,M,kBAKa2H,MAAM,GAAD,OACrBC,qDADqB,OACeP,GACvCE,G,UAEsB,OAJpBM,E,QAISqD,O,iBACX/L,QAAQC,IAAIyI,EAASqD,QACrB1M,KAAK2G,SAAS,CACZuL,eAAe,I,yCAKA7I,EAASC,O,QAAtBN,E,OAEExH,EAAewH,EAAKxH,KAC1Bb,QAAQC,IAAIyI,GACZ1I,QAAQC,IAAIY,GACZxB,KAAK2G,SAAS,CACZuK,6BAA8B1P,I,0DAKlCb,QAAQC,IAAR,MACAZ,KAAK2G,SAAS,CACZuL,eAAe,I,iNAOkBrJ,G,oFAC/BE,EAAoB,CACxBhI,OAAQ,OACRmE,QAAS,CACP,8BAA+B,IAC/B,eAAgB,oBAElB8D,KAAM3H,KAAKC,UAAU,CACnB2H,KAAM,CACJC,SAAUlJ,KAAKsD,MAAMiB,KAAK2E,SAC1B3I,cAAeP,KAAKsD,MAAMiB,KAAKhE,eAEjCiB,KAAM,M,kBAKa2H,MAAM,GAAD,OACrBC,qDADqB,OACeP,GACvCE,G,UAEsB,OAJpBM,E,QAISqD,O,iBACX/L,QAAQC,IAAIyI,EAASqD,QACrB1M,KAAK2G,SAAS,CACZuL,eAAe,I,yCAKA7I,EAASC,O,QAAtBN,E,OAEExH,EAAewH,EAAKxH,KAC1Bb,QAAQC,IAAIyI,GACZ1I,QAAQC,IAAIY,GACRA,EACFxB,KAAK2G,SAAS,CACZyL,eAAgB5Q,EAChB0Q,eAAe,IAGjBlS,KAAK2G,SAAS,CACZuL,eAAe,I,0DAMrBvR,QAAQC,IAAR,MACAZ,KAAK2G,SAAS,CACZuL,eAAe,I,iMAOEjB,G,iEACrBjR,KAAK2G,SAAS,CAAEsK,mBAAoBA,IACpCjR,KAAKmP,mB,yeAMLxO,QAAQC,IAAI,yBACZZ,KAAK2G,SAAS,CAAEgC,eAAe,EAAOY,yBAAqBxG,I,sLAGtCxC,G,yEACrBI,QAAQC,IAAI,yBACNwM,EAAcpN,KAAKgN,aAAahH,IAAIzF,GAC1CI,QAAQC,IAAIwM,QACQrK,IAAhBqK,GACFpN,KAAK2G,SAAS,CAAEgC,eAAe,IACzBE,EAFuB,wBAEKtI,EAFL,YAG7BP,KAAK8I,0BAA0BD,IAE/B7I,KAAK2G,SAAS,CAAE4C,oBAAqB6D,EAAazE,eAAe,I,gMAIrCE,G,oFACxBE,EAAoB,CACxBhI,OAAQ,OACRmE,QAAS,CACP,8BAA+B,IAC/B,eAAgB,oBAElB8D,KAAM3H,KAAKC,UAAU,CACnB2H,KAAM,CACJC,SAAUlJ,KAAKsD,MAAMiB,KAAK2E,SAC1B3I,cAAeP,KAAKsD,MAAMiB,KAAKhE,eAEjCiB,KAAM,M,kBAKa2H,MAAM,GAAD,OACrBC,qDADqB,OACeP,GACvCE,G,UAGsB,OALpBM,E,QAKSqD,O,gBACX/L,QAAQC,IAAIyI,EAASqD,Q,wCAKJrD,EAASC,O,QAAtBN,E,OACExH,EAAsBwH,EAAKxH,KACjCb,QAAQC,IAAIyI,GACZ1I,QAAQC,IAAIY,GACRA,GAAwB,IAAhBA,EAAKC,SACfzB,KAAKgN,aAAa5H,IAAI5D,EAAK,GAAGjB,cAAeiB,EAAK,IAClDxB,KAAK2G,SAAS,CACZ4C,oBAAqB/H,EAAK,M,0DAShCb,QAAQC,IAAR,M,qQAQFD,QAAQC,IAAI,yBACZZ,KAAK2G,SAAS,CACZsH,eAAe,EACfF,gBAAgB,EAChBd,eAAgBjN,KAAKsF,MAAM6M,e,iQAK7BxR,QAAQC,IAAI,yBAEsB,IAA9BZ,KAAKsF,MAAM4H,QAAQzL,QACrBzB,KAAK2G,SAAS,CACZoH,gBAAgB,EAChBE,eAAe,EACfhB,gBAAgB,IAEZlB,EAAW/L,KAAKsD,MAAMtB,OAAO+J,SAC7BlD,EAP6B,0BAOCkD,EAPD,YAQnC/L,KAAKoP,0BAA0BvG,IAE/B7I,KAAK2G,SAAS,CACZsH,eAAe,EACfhB,gBAAgB,I,+LAKUpE,G,oFACxBE,EAAoB,CACxBhI,OAAQ,OACRmE,QAAS,CACP,8BAA+B,IAC/B,eAAgB,oBAElB8D,KAAM3H,KAAKC,UAAU,CACnB2H,KAAM,CACJC,SAAUlJ,KAAKsD,MAAMiB,KAAK2E,SAC1B3I,cAAeP,KAAKsD,MAAMiB,KAAKhE,eAEjCiB,KAAM,M,kBAKe2H,MAAM,GAAD,OACvBC,qDADuB,OACaP,GACvCE,G,UAEsB,OAJlBM,E,QAIOqD,O,iBACX/L,QAAQC,IAAIyI,EAASqD,QACrB1M,KAAK2G,SAAS,CAEZoH,gBAAgB,I,yCAIC1E,EAASC,O,QAAtBN,E,OAEAxH,EAAwBwH,EAAKxH,KACnCb,QAAQC,IAAIyI,GACZ1I,QAAQC,IAAIY,GACRA,EACFxB,KAAK2G,SAAS,CACZuG,QAAS1L,EACTuM,gBAAgB,KAGlBpN,QAAQC,IAAI,kCACZZ,KAAK2G,SAAS,CAEZoH,gBAAgB,K,0DAMtBpN,QAAQC,IAAR,MACAZ,KAAK2G,SAAS,CAEZoH,gBAAgB,I,oQAOpBpN,QAAQC,IAAI,sBACZZ,KAAK2G,SAAS,CAAE2H,eAAe,I,0PAI/B3N,QAAQC,IAAI,uBACZZ,KAAK2G,SAAS,CAAE2H,eAAe,I,qIAGvB,IAAD,mBACwCtO,KAAKsD,MAA5CiB,EADD,EACCA,KAAMvC,EADP,EACOA,OAAQqN,EADf,EACeA,cAAe8B,EAD9B,EAC8BA,MAD9B,EAgBHnR,KAAKsF,MAbP4H,EAHK,EAGLA,QACAgF,EAJK,EAILA,cACAnE,EALK,EAKLA,eACAoE,EANK,EAMLA,aACAxJ,EAPK,EAOLA,cACAsF,EARK,EAQLA,cAEAK,GAVK,EASLH,aATK,EAULG,eACArB,EAXK,EAWLA,eAEAmF,GAbK,EAYLlB,6BAZK,EAaLkB,gBAbK,EAcLnB,mBAdK,EAeLrI,sBAGF,OACE,6BACE,kBAACP,EAAA,EAAD,CAAMlE,UAAU,wBACd,kBAACkE,EAAA,EAAK6B,OAAN,CACE/F,UAAU,0DACVJ,QAAS,kBAAM,EAAK4C,SAAS,CAAEsG,gBAAiBA,MAEhD,yBAAK9I,UAAU,aACb,0BAAMA,UAAU,QAAhB,SACA,kBAACyD,EAAA,EAAD,CACE+B,UAAU,MACV9B,QACE,kBAACC,EAAA,EAAD,CAASrD,GAAG,gBACV,+CAAWzC,EAAO0Q,oBAAlB,aAAW,EAAqBvP,KAAhC,gBAIJ,kBAACkB,EAAA,EAAD,CACER,QAAQ,gBACRE,QAAS,SAAC1D,GACRA,EAAEkP,kBACF,EAAKhC,iBAAiBvL,EAAO0Q,aAAanS,iBAJ9C,UAOGyB,EAAO0Q,oBAPV,aAOG,EAAqBvP,QAI5B,kBAACyE,EAAA,EAAD,CACE+B,UAAU,MACV9B,QACE,kBAACC,EAAA,EAAD,CAASrD,GAAG,eACV,6BACI0N,EAAwD,aAAzC,0CAKvB,kBAAC9N,EAAA,EAAD,CAEER,QAAQ,gBACRM,UAAU,iCACVJ,QAAS,SAAC1D,GACRA,EAAEkP,kBACE4C,EACF,EAAKQ,mBAEL,EAAKC,oBATX,SAgBF,kBAAChL,EAAA,EAAD,CACE+B,UAAU,MACV9B,QACE,kBAACC,EAAA,EAAD,CAASrD,GAAG,eACV,6BACMwJ,EAEA,uBADA,mCAMV,8BACA,kBAAC5J,EAAA,EAAD,CACE4G,SAA4B,IAAlBoE,EACVxL,QAAQ,gBACRM,UAAU,iCACVJ,QAAS,SAAC1D,GACRA,EAAEkP,kBACEtB,EACF,EAAK2B,oBAEL,EAAKC,qBATX,eAwCN,kBAAC3L,EAAA,EAAD,CAAUsJ,GAAIP,GACZ,yBAAK9I,UAAU,wBACZ+N,GACC,yBAAK/N,UAAU,iCACb,kBAACqE,EAAA,EAAD,CACErE,UAAU,OACVsE,UAAU,SACV5E,QAAQ,gBAIZqO,GAAiBC,GACjB,6BACE,kBAAC,EAAD,CACE5N,KAAMA,EACN2M,6BACElR,KAAKsF,MAAM4L,6BAEbE,OAAO,kBACPjJ,QAASnI,KAAK2S,iBAAiBnP,KAAKxD,MACpCuH,SAAUvH,KAAK+P,iBAAiBvM,KAAKxD,MACrCmR,MAAOA,EAAM0B,QAAO,SAACtO,GACnB,IAAIuO,EACFvO,EAAKhE,gBAAkByB,EAAO0Q,aAAanS,cAC7C,GAAIuS,EACF,IAAK,IAAIxH,EAAI,EAAGA,EAAI8G,EAAe3Q,OAAQ6J,IAAK,CAAC,IAAD,EAC9CwH,EACEvO,EAAKhE,iBAAL,UACA6R,EAAe9G,UADf,aACA,EAAmB/K,eAGzB,OAAOuS,QAKd/E,GACC,yBAAK5J,UAAU,iCACb,kBAACqE,EAAA,EAAD,CACErE,UAAU,OACVsE,UAAU,SACV5E,QAAQ,gBAIZkK,GAAkBE,GAClB,yBAAK9J,UAAU,IACb,kBAAC,EAAD,CACEI,KAAMA,EACN2I,QAASA,EACT/E,QAASnI,KAAK4P,kBAAkBpM,KAAKxD,UAIzCmS,IAAiBlE,GACjB,yBAAK9J,UAAU,qCACb,yBAAKA,UAAU,aAAf,wBACcnC,EAAOgO,mBADrB,aACc,EAAoBC,YAEjCjO,EAAO8M,YACN,yBAAK3K,UAAU,8BAAf,uBACanC,EAAO8M,kBADpB,aACa,EAAmBmB,aAGhCjO,EAAO8M,YACP,yBAAK3K,UAAU,8BAAf,wCAOV,kBAACyF,EAAA,EAAD,CACEnF,GAAG,gBACHoF,KAAMlB,EACNmB,OAAQ9J,KAAK+J,kBAAkBvG,KAAKxD,MAEpCyI,WAAW,EACXtE,UAAU,QACV8F,YAAY,GAGZ,kBAACL,EAAA,EAAMM,OAAP,CAAcC,aAAW,GACvB,kBAACP,EAAA,EAAMQ,MAAP,eAAcpK,KAAKsF,MAAMiE,2BAAzB,aAAc,EAAgCpG,OAGhD,kBAACyG,EAAA,EAAMS,KAAP,KACE,kBAAC,EAAD,CACE9F,KAAMvE,KAAKsF,MAAMiE,oBACjBpB,QAASnI,KAAK+J,kBAAkBvG,KAAKxD,UAK3C,kBAAC4J,EAAA,EAAD,CACEnF,GAAG,gBACHoF,KAAMyE,EACNxE,OAAQ9J,KAAKkQ,kBAAkB1M,KAAKxD,MAEpCyI,WAAW,EACXtE,UAAU,QACV8F,YAAY,GAGZ,kBAACL,EAAA,EAAMM,OAAP,CAAcC,aAAW,GACvB,kBAACP,EAAA,EAAMQ,MAAP,wBAGF,kBAACR,EAAA,EAAMS,KAAP,KACE,kBAAC,EAAD,CACE9F,KAAMvE,KAAKsD,MAAMiB,KACjBoD,QAAQ,EACRuD,UAAWlL,KAAK+S,eAAevP,KAAKxD,MACpCmI,QAASnI,KAAKkQ,kBAAkB1M,KAAKxD,e,GAhnBdgF,IAAMC,WC0b5B+N,I,mBA9bb,WAAY1P,GAAwB,IAAD,8BACjC,4CAAMA,KAHA2P,gBAAkBjO,IAAM4I,YAI9B,EAAKtI,MAAQ,CACX6L,MAAO,GACPb,QAAS,GACTjB,cAAe,GACfkB,gBAAgB,EAChB2C,UAAU,EACVhB,eAAe,EACfC,cAAc,EACdjE,eAAe,EACfI,eAAe,EACf6E,eAAgB,GAChBlC,mBAAoB,IAbW,E,kFAoBjCjR,KAAKoT,gBACLpT,KAAKqT,oB,6KAKCC,EAAwB,CAC5BvS,OAAQ,OACRmE,QAAS,CACP,8BAA+B,IAC/B,eAAgB,oBAElB8D,KAAM3H,KAAKC,UAAU,CACnB2H,KAAM,CACJC,SAAUlJ,KAAKsD,MAAMiB,KAAK2E,SAC1B3I,cAAeP,KAAKsD,MAAMiB,KAAKhE,eAEjCiB,KAAM,MAKV2H,MAAM,GAAD,OAAIC,qDAAJ,O,iBAAwDkK,GAC1DnT,MAAK,SAACkJ,GACLA,EACGC,OACAnJ,MAAK,SAAC6I,GACL,IAAMxH,EAAewH,EAAKxH,KAC1Bb,QAAQC,IAAIyI,GACZ1I,QAAQC,IAAIoI,EAAKxH,MACbA,EACF,EAAKmF,SAAS,CACZwK,MAAO3P,IAGTb,QAAQC,IAAI,+CAGfR,OAAM,SAACC,GACNM,QAAQC,IAAIP,SAGjBD,OAAM,SAACC,GACNM,QAAQC,IAAIP,M,iSAMVkT,EAA0B,CAC9BxS,OAAQ,OACRmE,QAAS,CACP,8BAA+B,IAC/B,eAAgB,oBAElB8D,KAAM3H,KAAKC,UAAU,CACnB2H,KAAM,CACJC,SAAUlJ,KAAKsD,MAAMiB,KAAK2E,SAC1B3I,cAAeP,KAAKsD,MAAMiB,KAAKhE,eAEjCiB,KAAM,MAKV2H,MAAM,GAAD,OAAIC,qDAAJ,O,6BAA0DmK,GAC5DpT,MAAK,SAACkJ,GACLA,EACGC,OACAnJ,MAAK,SAAC6I,GACL,IAAMxH,EACJwH,EAAKxH,KACPb,QAAQC,IAAIyI,GACZ1I,QAAQC,IAAIoI,EAAKxH,MACbA,GAAQA,EAAK8O,SAAW9O,EAAK6N,cAC/B,EAAK1I,SAAS,CACZ2J,QAAS9O,EAAK8O,QACdjB,cAAe7N,EAAK6N,cACpBkB,gBAAgB,IAGlB,EAAK5J,SAAS,CAAE4J,gBAAgB,OAGnCnQ,OAAM,SAACC,GACNM,QAAQC,IAAIP,SAGjBD,OAAM,SAACC,GACNM,QAAQC,IAAIP,M,yPAKhBM,QAAQC,IAAI,wBACZZ,KAAK2G,SAAS,CAAEwL,cAAc,EAAOgB,eAAgB,GAAID,UAAU,I,wPAInEvS,QAAQC,IAAI,wBAC6B,IAArCZ,KAAKsF,MAAM6N,eAAe1R,QAC5BzB,KAAK2G,SAAS,CACZwL,cAAc,EACde,UAAU,EACVjC,mBAAoB,K,oLAKLzG,G,iEACnB7J,QAAQC,IAAI,oB,yBAIZZ,KAAKwT,6B,yBAAuChJ,G,mMAGX3B,EAAkB2B,G,oFAC7CzB,EAAoB,CACxBhI,OAAQ,OACRmE,QAAS,CACP,8BAA+B,IAC/B,eAAgB,oBAElB8D,KAAM3H,KAAKC,UAAU,CACnB2H,KAAM,CACJC,SAAUlJ,KAAKsD,MAAMiB,KAAK2E,SAC1B3I,cAAeP,KAAKsD,MAAMiB,KAAKhE,eAEjCiB,KAAM,CACJyP,mBAAoBjR,KAAKsF,MAAM2L,mBAC/ByB,aAAc1S,KAAKsF,MAAM6N,eAAe,GAAG5S,cAC3CiK,cAAeA,M,kBAMErB,MAAM,GAAD,OACrBC,qDADqB,OACeP,GACvCE,G,UAEsB,OAJpBM,E,QAISqD,O,gBACX/L,QAAQC,IAAIyI,EAASqD,Q,wCAEJrD,EAASC,O,QAAtBN,E,OACExH,EACJwH,EAAKxH,KACPb,QAAQC,IAAIyI,GACZ1I,QAAQC,IAAIY,GACRA,GAOFxB,KAAK2G,SAAS,CACZ2H,eAAe,EACfgC,QAAS9O,EAAK8O,QACdjB,cAAe7N,EAAK6N,cACpB8C,cAAc,EACde,UAAU,EACVC,eAAgB,K,0DAKtBxS,QAAQC,IAAR,M,mMAImBqQ,G,iEACrBjR,KAAK2G,SAAS,CAAEsK,mBAAoBA,IACpCjR,KAAKmP,mB,weAMLxO,QAAQC,IAAI,sBACZZ,KAAK2G,SAAS,CAAE2H,eAAe,I,0PAI/B3N,QAAQC,IAAI,uBACZZ,KAAK2G,SAAS,CAAE2H,eAAe,I,qIAGvB,IAAD,OACD/J,EAAOvE,KAAKsD,MAAMiB,KADjB,EAYHvE,KAAKsF,MATP6L,EAHK,EAGLA,MACAb,EAJK,EAILA,QACAjB,EALK,EAKLA,cACAkB,EANK,EAMLA,eACA2C,EAPK,EAOLA,SACAf,EARK,EAQLA,aAEA7D,GAVK,EASLJ,cATK,EAULI,eACA6E,EAXK,EAWLA,eAIIzB,EAAU1R,KAAKsF,MAAM6L,MAErBsC,EACJ,kBAAC,WAAD,KACE,kBAACnC,EAAA,EAAD,CAAYnN,UAAU,iEACpB,yBACEA,UAAU,6BACVJ,QAAS,WACP,EAAK4C,SAAS,CAAEwM,eAAgB,OAGlC,kBAAC,IAAD,CACE1O,GAAG,0BAEH+M,SAAS,OACTC,SAAU,CAAC,OAAQ,iBACnBC,QAASA,EACT3G,YAAY,kBACZ4G,UAAU,EACVC,SAAU5R,KAAKsF,MAAM6N,eACrBzM,SAAU,SAACkL,GACTjR,QAAQC,IAAI,WAAYgR,GACxB,EAAKjL,SAAS,CACZwM,eAAgBvB,EAChBO,cAAc,EACde,UAAU,KAGdrB,uBACE,SAACC,GAAD,gBACKA,EAAO3O,KADZ,aACqB2O,EAAOvR,cAAcwR,MAAM,EAAG,GADnD,aAGFjC,IAAK9P,KAAKiT,qBAmEdxC,EAAcH,EAAQI,KAAI,SAACC,EAAGC,GAAJ,OAC9B,kBAAC,EAAD,CACErM,KAAMA,EACNvC,OAAQ2O,EACRtB,cAAeA,EAAcuB,GAC7BO,MAAOA,OAILuC,EACJ,yBAAKvP,UAAU,oBACb,yBAAKA,UAAU,oBACb,wBAAIA,UAAU,QAAd,gBAEF,kBAACkE,EAAA,EAAK6B,OAAN,CAAa/F,UAAU,2BACrB,6BAAMsP,IAEPtB,GAA0C,IAA1BgB,EAAe1R,QAC9B,yBAAK0C,UAAU,wBACb,kBAAC,EAAD,CACEI,KAAMvE,KAAKsD,MAAMiB,KACjB2M,6BAA8B,GAC9BE,OAAO,oBACPjJ,QAASnI,KAAK2S,iBAAiBnP,KAAKxD,MACpCuH,SAAUvH,KAAK+P,iBAAiBvM,KAAKxD,MACrCmR,MAAOnR,KAAKsF,MAAM6L,MAAM0B,QACtB,SAACtO,GAAD,OACEA,EAAKhE,gBAAkB4S,EAAe,GAAG5S,qBAQjDoT,EACJ,yBAAKxP,UAAU,qBACb,gCAAyB,IAAnBmM,EAAQ7O,OAAe,WAAa,GAA1C,KACA,yBAAK0C,UAAU,yBAAyBsM,IAItCmD,EACJ,yBAAKzP,UAAU,wDACb,sDACA,kBAACE,EAAA,EAAD,CACER,QAAQ,gBACRE,QAAS,WACP,EAAK4C,SAAS,CAAE2J,QAAS,GAAIC,gBAAgB,IAC7C,EAAK8C,oBAGP,kBAAC,IAAD,CAAiBtL,KAAMgJ,QAK7B,OACE,qCACIR,GAAqC,IAAnBD,EAAQ7O,QAC1B,kBAACiJ,EAAA,EAAD,CAAKvG,UAAU,aACb,kBAACwG,EAAA,EAAD,KAAM+I,GACN,kBAAC/I,EAAA,EAAD,KAAMiJ,KAIRrD,IAAmB2C,GAA+B,IAAnB5C,EAAQ7O,QACvC,kBAACiJ,EAAA,EAAD,CAAKvG,UAAU,aACb,kBAACwG,EAAA,EAAD,KAAM+I,GACN,kBAAC/I,EAAA,EAAD,KAAMgJ,GACN,kBAAChJ,EAAA,EAAD,KAAMiJ,KAIRrD,GAAkB2C,GAA+B,IAAnB5C,EAAQ7O,QACtC,kBAACiJ,EAAA,EAAD,CAAKvG,UAAU,kBACb,kBAACwG,EAAA,EAAD,KACE,kBAACD,EAAA,EAAD,CAAKvG,UAAU,aACb,kBAACwG,EAAA,EAAD,KAAM+I,IAGR,kBAAChJ,EAAA,EAAD,CAAKvG,UAAU,aACb,kBAACwG,EAAA,EAAD,KAAMgJ,KAIV,kBAAChJ,EAAA,EAAD,KAAMiJ,IAITrD,GACC,yBAAKpM,UAAU,iDACb,kBAACqE,EAAA,EAAD,CAASrE,UAAU,GAAGsE,UAAU,SAAS5E,QAAQ,eAIrD,kBAAC+F,EAAA,EAAD,CACEnF,GAAG,gBACHoF,KAAMyE,EACNxE,OAAQ9J,KAAKkQ,kBAAkB1M,KAAKxD,MAEpCyI,WAAW,EACXtE,UAAU,QACV8F,YAAY,GAGZ,kBAACL,EAAA,EAAMM,OAAP,CAAcC,aAAW,GACvB,kBAACP,EAAA,EAAMQ,MAAP,wBAGF,kBAACR,EAAA,EAAMS,KAAP,KACE,kBAAC,EAAD,CACE9F,KAAMvE,KAAKsD,MAAMiB,KACjBoD,QAAQ,EACRuD,UAAWlL,KAAK+S,eAAevP,KAAKxD,MACpCmI,QAASnI,KAAKkQ,kBAAkB1M,KAAKxD,e,GAzb3BgF,IAAMC,YC8hBf4O,I,mBA9gBb,WAAYvQ,GAAqC,IAAD,8BAC9C,4CAAMA,KAPAqK,YAAc3I,IAAM4I,YAMoB,EALxCC,UAAY7I,IAAM4I,YAKsB,EAJxCZ,kBAIwC,IAHxC9G,kBAGwC,IAFxC4H,kBAEwC,EAE9C,EAAKxI,MAAQ,CACX4H,QAAS,GACTa,gBAAgB,EAChBvE,aAAa,EACbb,eAAe,EACfsF,eAAe,EACfE,cAAc,EACdE,YAAY,EACZC,eAAe,EACfrB,gBAAgB,GAGlB,EAAKD,aAAe,IAAIG,IACxB,EAAKjH,aAAe,IAAIrG,IACxB,EAAKiO,aAAe,IAAIvI,EAAa,GAhBS,E,sMAoB9C5E,QAAQC,IAAI,sBACZZ,KAAK2G,SAAS,CAAE0H,YAAY,IACtBtC,EAAW/L,KAAKsD,MAAMtB,OAAO+J,SAC7BlD,E,0BAA8BkD,E,sBACpCpL,QAAQC,IAAI,WAAYmL,GAEA,QADpBG,EAAkBlM,KAAK8N,aAAa9H,IAAI+F,I,iBAE1C/L,KAAK2G,SAAS,CAAC6C,aAAa,IAC5BxJ,KAAKkP,iCAAiCrG,G,mDAGf7I,KAAKkG,aAAayG,QACrCT,EACAlM,KAAKsD,MAAMiB,KAAKhE,e,QAFdE,E,OAKJE,QAAQC,IAAIH,EAASI,YACrBb,KAAK2G,SAAS,CACZlG,SAAUA,I,mDAGZE,QAAQC,IAAI,yB,wJAMhBD,QAAQC,IAAI,sBACZZ,KAAK2G,SAAS,CAAE0H,YAAY,EAAO5N,cAAUsC,M,uDAGd8F,GAAmB,IAAD,OACjDlI,QAAQC,IAAI,0BACZ,IAAMmI,EAAoB,CACxBhI,OAAQ,OACRmE,QAAS,CACP,8BAA+B,IAC/B,eAAgB,oBAElB8D,KAAM3H,KAAKC,UAAU,CACnB2H,KAAM,CACJC,SAAUlJ,KAAKsD,MAAMiB,KAAK2E,SAC1B3I,cAAeP,KAAKsD,MAAMiB,KAAKhE,eAEjCiB,KAAM,MAGOxB,KAAKsD,MAAMtB,OAAO+J,SAEnC5C,MAAM,GAAD,OAAIC,qDAAJ,OAAwCP,GAAYE,GACtD5I,MAAK,SAACkJ,GAGL,OAFA1I,QAAQC,IAAI,oBACZD,QAAQC,IAAIyI,GACLA,EAASC,UAEjBnJ,MAAK,SAAC6I,GAAwB,IAAD,EACtB3I,EAKF2I,EAAKxH,KAETb,QAAQC,IAAIP,GAEZ,EAAK6F,aACFyG,QADH,UAEItM,EAAEyT,+BAFN,aAEI,EAA2BxH,eAC3B,EAAKhJ,MAAMiB,KAAKhE,eAEjBJ,MAAK,SAACM,GACDA,GACF,EAAKkG,SAAS,CACZlG,SAAUA,EACV+I,aAAa,OAIlBpJ,OAAM,SAACC,GAEN,EAAKsG,SAAS,CACZ6C,aAAa,UAIpBpJ,OAAM,SAACC,GACNM,QAAQC,IAAIP,GACZ,EAAKsG,SAAS,CAAC6C,aAAa,S,gFAIXlJ,G,iEACrBN,KAAK2G,SAAS,CAAE4H,aAAcjO,IAC9BN,KAAKmP,mB,yeAMLxO,QAAQC,IAAI,yBACZZ,KAAK2G,SAAS,CAAEgC,eAAe,EAAOY,yBAAqBxG,I,sLAGtCxC,G,yEACrBI,QAAQC,IAAI,yBACNwM,EAAcpN,KAAKgN,aAAahH,IAAIzF,GAC1CI,QAAQC,IAAIwM,QACQrK,IAAhBqK,GACFpN,KAAK2G,SAAS,CAAEgC,eAAe,IACzBE,EAFuB,wBAEKtI,EAFL,YAG7BP,KAAK8I,0BAA0BD,IAE/B7I,KAAK2G,SAAS,CAAE4C,oBAAqB6D,EAAazE,eAAe,I,gMAIrCE,G,oFACxBE,EAAoB,CACxBhI,OAAQ,OACRmE,QAAS,CACP,8BAA+B,IAC/B,eAAgB,oBAElB8D,KAAM3H,KAAKC,UAAU,CACnB2H,KAAM,CACJC,SAAUlJ,KAAKsD,MAAMiB,KAAK2E,SAC1B3I,cAAeP,KAAKsD,MAAMiB,KAAKhE,eAEjCiB,KAAM,M,kBAKa2H,MAAM,GAAD,OACrBC,qDADqB,OACeP,GACvCE,G,UAGsB,OALpBM,E,QAKSqD,O,gBACX/L,QAAQC,IAAIyI,EAASqD,Q,wCAKJrD,EAASC,O,QAAtBN,E,OACExH,EAAsBwH,EAAKxH,KACjCb,QAAQC,IAAIyI,GACZ1I,QAAQC,IAAIY,GACRA,GAAwB,IAAhBA,EAAKC,SACfzB,KAAKgN,aAAa5H,IAAI5D,EAAK,GAAGjB,cAAeiB,EAAK,IAClDxB,KAAK2G,SAAS,CACZ4C,oBAAqB/H,EAAK,M,0DAShCb,QAAQC,IAAR,M,qQAQFD,QAAQC,IAAI,yBACZZ,KAAK2G,SAAS,CACZsH,eAAe,EACfF,gBAAgB,EAChBd,eAAgBjN,KAAKsF,MAAM+I,a,iQAK7B1N,QAAQC,IAAI,yBAEsB,IAA9BZ,KAAKsF,MAAM4H,QAAQzL,QACrBzB,KAAK2G,SAAS,CACZoH,gBAAgB,EAChBE,eAAe,EACfhB,gBAAgB,IAEZlB,EAAW/L,KAAKsD,MAAMtB,OAAO+J,SAC7BlD,EAP6B,0BAOCkD,EAPD,YAQnC/L,KAAKoP,0BAA0BvG,IAE/B7I,KAAK2G,SAAS,CACZsH,eAAe,EACfhB,gBAAgB,I,+LAKUpE,G,oFACxBE,EAAoB,CACxBhI,OAAQ,OACRmE,QAAS,CACP,8BAA+B,IAC/B,eAAgB,oBAElB8D,KAAM3H,KAAKC,UAAU,CACnB2H,KAAM,CACJC,SAAUlJ,KAAKsD,MAAMiB,KAAK2E,SAC1B3I,cAAeP,KAAKsD,MAAMiB,KAAKhE,eAEjCiB,KAAM,M,kBAKe2H,MAAM,GAAD,OACvBC,qDADuB,OACaP,GACvCE,G,UAEsB,OAJlBM,E,QAIOqD,O,iBACX/L,QAAQC,IAAIyI,EAASqD,QACrB1M,KAAK2G,SAAS,CAEZoH,gBAAgB,I,yCAIC1E,EAASC,O,QAAtBN,E,OAEAxH,EAAwBwH,EAAKxH,KACnCb,QAAQC,IAAIyI,GACZ1I,QAAQC,IAAIY,GACRA,EACFxB,KAAK2G,SAAS,CACZuG,QAAS1L,EACTuM,gBAAgB,KAGlBpN,QAAQC,IAAI,kCACZZ,KAAK2G,SAAS,CAEZoH,gBAAgB,K,0DAMtBpN,QAAQC,IAAR,MACAZ,KAAK2G,SAAS,CAEZoH,gBAAgB,I,oQAOpBpN,QAAQC,IAAI,sBACZZ,KAAK2G,SAAS,CAAE2H,eAAe,I,0PAI/B3N,QAAQC,IAAI,uBACZZ,KAAK2G,SAAS,CAAE2H,eAAe,I,qIAGvB,IAAD,mBACiCtO,KAAKsD,MAA/BtB,GADP,EACCuC,KADD,EACOvC,QADP,KACeqN,cAYlBrP,KAAKsF,OARPkE,GALK,EAGL0D,QAHK,EAILa,eAJK,EAKLvE,aACAb,EANK,EAMLA,cACAsF,EAPK,EAOLA,cACAE,EARK,EAQLA,aACAE,EATK,EASLA,WAEApB,GAXK,EAULqB,cAVK,EAWLrB,gBACAxM,EAZK,EAYLA,SAGF,OACE,6BACE,kBAAC4H,EAAA,EAAD,CAAMlE,UAAU,wBACd,kBAACkE,EAAA,EAAK6B,OAAN,CACE/F,UAAU,0DACVJ,QAAS,kBAAM,EAAK4C,SAAS,CAAEsG,gBAAiBA,MAEhD,yBAAK9I,UAAU,aACb,0BAAMA,UAAU,QAAhB,SACA,kBAACyD,EAAA,EAAD,CACE+B,UAAU,MACV9B,QACE,kBAACC,EAAA,EAAD,CAASrD,GAAG,gBACV,+CAAWzC,EAAO0Q,oBAAlB,aAAW,EAAqBvP,KAAhC,gBAIJ,kBAACkB,EAAA,EAAD,CACER,QAAQ,gBACRE,QAAS,SAAC1D,GACRA,EAAEkP,kBACF,EAAKhC,iBAAiBvL,EAAO0Q,aAAanS,iBAJ9C,UAOGyB,EAAO0Q,oBAPV,aAOG,EAAqBvP,QAwC5B,kBAACyE,EAAA,EAAD,CACE+B,UAAU,MACV9B,QACE,kBAACC,EAAA,EAAD,CAASrD,GAAG,gBAAZ,6BACmBzC,EAAOsN,uBAD1B,aACmB,EAAwBnM,OAI7C,kBAACkB,EAAA,EAAD,CAEER,QAAQ,gBACRM,UAAU,iCACVJ,QAAS,SAAC1D,GACRA,EAAEkP,kBACElB,EACF,EAAKqB,iBAEL,EAAKC,kBATX,WA+BN,kBAACzL,EAAA,EAAD,CAAUsJ,GAAIP,GACZ,yBAAK9I,UAAU,yBA8BXgK,IAAiBF,GACjB,yBAAK9J,UAAU,qCACb,yBAAKA,UAAU,aAAf,yBAiBR,kBAACyF,EAAA,EAAD,CACEnF,GAAG,gBACHoF,KAAMlB,EACNmB,OAAQ9J,KAAK+J,kBAAkBvG,KAAKxD,MAEpCyI,WAAW,EACXtE,UAAU,QACV8F,YAAY,GAGZ,kBAACL,EAAA,EAAMM,OAAP,CAAcC,aAAW,GACvB,kBAACP,EAAA,EAAMQ,MAAP,eAAcpK,KAAKsF,MAAMiE,2BAAzB,aAAc,EAAgCpG,OAGhD,kBAACyG,EAAA,EAAMS,KAAP,KACE,kBAAC,EAAD,CACE9F,KAAMvE,KAAKsF,MAAMiE,oBACjBpB,QAASnI,KAAK+J,kBAAkBvG,KAAKxD,UA4B3C,kBAAC4J,EAAA,EAAD,CACEnF,GAAG,aACHoF,KAAMwE,EACNvE,OAAQ9J,KAAK0P,eAAelM,KAAKxD,MACjCgK,SAAS,SACTvB,WAAW,EACXtE,UAAU,QACV8F,YAAY,EACZnD,KAAK,MAEL,kBAAC8C,EAAA,EAAMM,OAAP,CAAcC,aAAW,GACvB,kBAACP,EAAA,EAAMQ,MAAP,uBAAmBpI,EAAOsN,uBAA1B,aAAmB,EAAwBnM,OAG7C,kBAACyG,EAAA,EAAMS,KAAP,KACE,kBAAC,EAAD,CACE5J,SAAUA,EACV+I,YAAaA,EACbsG,IAAK9P,KAAK6N,UACVtJ,KAAMvE,KAAKsD,MAAMiB,KACjB4D,QAASnI,KAAK0P,eAAelM,KAAKxD,e,GA/gBXgF,IAAMC,YC2L5B8O,I,mBApMb,WAAYzQ,GAAmC,IAAD,8BAC5C,4CAAMA,KAHA0J,kBAEsC,EAE5C,EAAK1H,MAAQ,CACXqD,eAAe,EACfsE,gBAAgB,GAGlB,EAAKD,aAAe,IAAIG,IAPoB,E,spBAe5CxM,QAAQC,IAAI,yBACZZ,KAAK2G,SAAS,CAAEgC,eAAe,EAAOY,yBAAqBxG,I,sLAGtCxC,G,yEACrBI,QAAQC,IAAI,yBACNwM,EAAcpN,KAAKgN,aAAahH,IAAIzF,GAC1CI,QAAQC,IAAIwM,QACQrK,IAAhBqK,GACFpN,KAAK2G,SAAS,CAAEgC,eAAe,IACzBE,EAFuB,wBAEKtI,EAFL,YAG7BP,KAAK8I,0BAA0BD,IAE/B7I,KAAK2G,SAAS,CAAE4C,oBAAqB6D,EAAazE,eAAe,I,gMAIrCE,G,oFACxBE,EAAoB,CACxBhI,OAAQ,OACRmE,QAAS,CACP,8BAA+B,IAC/B,eAAgB,oBAElB8D,KAAM3H,KAAKC,UAAU,CACnB2H,KAAM,CACJC,SAAUlJ,KAAKsD,MAAMiB,KAAK2E,SAC1B3I,cAAeP,KAAKsD,MAAMiB,KAAKhE,eAEjCiB,KAAM,M,kBAKa2H,MAAM,GAAD,OACrBC,qDADqB,OACeP,GACvCE,G,UAGsB,OALpBM,E,QAKSqD,O,gBACX/L,QAAQC,IAAIyI,EAASqD,Q,wCAKJrD,EAASC,O,QAAtBN,E,OACExH,EAAsBwH,EAAKxH,KACjCb,QAAQC,IAAIyI,GACZ1I,QAAQC,IAAIY,GACRA,GAAwB,IAAhBA,EAAKC,SACfzB,KAAKgN,aAAa5H,IAAI5D,EAAK,GAAGjB,cAAeiB,EAAK,IAClDxB,KAAK2G,SAAS,CACZ4C,oBAAqB/H,EAAK,M,0DAShCb,QAAQC,IAAR,M,gJAOM,IAAD,WAC+BZ,KAAKsD,MAA7B0Q,GADP,EACCzP,KADD,EACOyP,WAAWpC,EADlB,EACkBA,SADlB,EAEmC5R,KAAKsF,MAAvCqD,EAFD,EAECA,cAAesE,EAFhB,EAEgBA,eAEvB,OACE,6BACE,kBAAC5E,EAAA,EAAD,CAAMlE,UAAU,wBACd,kBAACkE,EAAA,EAAK6B,OAAN,CACE/F,UAAU,0DACVJ,QAAS,kBAAM,EAAK4C,SAAS,CAAEsG,gBAAiBA,MAEhD,yBAAK9I,UAAU,aACb,0BAAMA,UAAU,QAAhB,SACA,kBAACyD,EAAA,EAAD,CACE+B,UAAU,MACV9B,QACE,kBAACC,EAAA,EAAD,CAASrD,GAAG,gBACV,4CAAWuP,QAAX,IAAWA,OAAX,EAAWA,EAAW7Q,KAAtB,gBAIJ,kBAACkB,EAAA,EAAD,CACER,QAAQ,gBACRE,QAAS,SAAC1D,GACRA,EAAEkP,kBACF,EAAKhC,iBAAL,OAAsByG,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAWzT,iBAJrC,OAOGyT,QAPH,IAOGA,OAPH,EAOGA,EAAW7Q,QAIlB,kBAACyE,EAAA,EAAD,CACE+B,UAAU,MACV9B,QACE,kBAACC,EAAA,EAAD,CAASrD,GAAG,gBACV,qCACImN,GAAY,yDAAwBoC,QAAxB,IAAwBA,OAAxB,EAAwBA,EAAW7Q,MAChDyO,GAAY,0DAAyBoC,QAAzB,IAAyBA,OAAzB,EAAyBA,EAAW7Q,SAKvD,kBAACkB,EAAA,EAAD,CAEER,QAAQ,gBACRM,UAAU,iCACVJ,QAAS,SAAC1D,GACRA,EAAEkP,kBACF,EAAKjM,MAAM2Q,OAAOD,KANtB,cAoCN,kBAAC9P,EAAA,EAAD,CAAUsJ,GAAIP,GACZ,yBAAK9I,UAAU,wBACb,yBAAKA,UAAU,qCACb,yBAAKA,UAAU,aAAf,uBAKN,kBAACyF,EAAA,EAAD,CACEnF,GAAG,gBACHoF,KAAMlB,EACNmB,OAAQ9J,KAAK+J,kBAAkBvG,KAAKxD,MAEpCyI,WAAW,EACXtE,UAAU,QACV8F,YAAY,GAGZ,kBAACL,EAAA,EAAMM,OAAP,CAAcC,aAAW,GACvB,kBAACP,EAAA,EAAMQ,MAAP,eAAcpK,KAAKsF,MAAMiE,2BAAzB,aAAc,EAAgCpG,OAGhD,kBAACyG,EAAA,EAAMS,KAAP,KACE,kBAAC,EAAD,CACE9F,KAAMvE,KAAKsF,MAAMiE,oBACjBpB,QAASnI,KAAK+J,kBAAkBvG,KAAKxD,e,GAlMhBgF,IAAMC,YC8P1BiP,I,mBA/Pb,WAAY5Q,GAAwB,IAAD,8BACjC,4CAAMA,KAFAwK,kBAC2B,EAEjC,EAAKxI,MAAQ,CACX6O,WAAY,GACZ7D,QAAS,GACTjB,cAAe,GACf+E,mBAAmB,EACnB7D,gBAAgB,EAChB2C,UAAU,GAEZ,EAAKpF,aAAe,IAAIvI,EAAa,GAVJ,E,kFAcjCvF,KAAKqU,sB,sMAKCtL,EAAoB,CACxBhI,OAAQ,OACRmE,QAAS,CACP,8BAA+B,IAC/B,eAAgB,oBAElB8D,KAAM3H,KAAKC,UAAU,CACnB2H,KAAM,CACJC,SAAUlJ,KAAKsD,MAAMiB,KAAK2E,SAC1B3I,cAAeP,KAAKsD,MAAMiB,KAAKhE,eAEjCiB,KAAM,MAKV2H,MAAM,GAAD,OAAIC,qDAAJ,O,sCAA6DL,GAC/D5I,MAAK,SAACkJ,GACLA,EACGC,OACAnJ,MAAK,SAAC6I,GACL,IAAMxH,EAAewH,EAAKxH,KAC1Bb,QAAQC,IAAIY,GACZb,QAAQC,IAAIyI,GACQ,IAAhB7H,EAAKC,OACP,EAAKkF,SAAS,CACZwN,WAAY3S,EACZ4S,mBAAmB,IAGrB,EAAKzN,SAAS,CAAEyN,mBAAmB,OAGtChU,OAAM,SAACC,GACNM,QAAQC,IAAIP,SAGjBD,OAAM,SAACC,GACNM,QAAQC,IAAIP,M,uLAIMkE,G,wEAChB+P,EAAetU,KAAKsF,MAAMgP,eACZA,EAAa/T,gBAAkBgE,EAAKhE,cACtDP,KAAK2G,SAAS,CAAE2N,kBAAcvR,EAAWmQ,UAAU,KAEnDlT,KAAK2G,SAAS,CACZ2N,aAAc/P,EACd2O,UAAU,EACV3C,gBAAgB,IAElBvQ,KAAKqT,gBAAgB9O,EAAKhE,gB,sLAIRA,G,yFACdgU,E,mCAA6ChU,G,SACzBP,KAAK8N,aAAa9H,IAAIzF,G,QAA1CkQ,E,QAgDJzQ,KAAK2G,SAAS,CACZ2J,QAASG,EACTF,gBAAgB,EAChB2C,UAAU,KAhDNnK,EAAoB,CACxBhI,OAAQ,OACRmE,QAAS,CACP,8BAA+B,IAC/B,eAAgB,oBAElB8D,KAAM3H,KAAKC,UAAU,CACnB2H,KAAM,CACJC,SAAUlJ,KAAKsD,MAAMiB,KAAK2E,SAC1B3I,cAAeP,KAAKsD,MAAMiB,KAAKhE,eAEjCiB,KAAM,MAKV2H,MAAM,GAAD,OAAIC,qDAAJ,OAAwCmL,GAAkBxL,GAC5D5I,MAAK,SAACkJ,GACLA,EACGC,OACAnJ,MAAK,SAAC6I,GACL,IAAMxH,EAAwBwH,EAAKxH,KAEnCb,QAAQC,IAAIyI,GACR7H,GAAQA,EAAKC,OAAS,GACxB,EAAKqM,aAAa/H,IAAIxF,EAAeiB,GACrC,EAAKmF,SAAS,CACZ2J,QAAS9O,EACT+O,gBAAgB,EAChB2C,UAAU,KAGZ,EAAKvM,SAAS,CACZ4J,gBAAgB,OAIrBnQ,OAAM,SAACC,GACNM,QAAQC,IAAIP,SAGjBD,OAAM,SAACC,GACNM,QAAQC,IAAIP,O,sIAWV,IAAD,OACCkE,EAASvE,KAAKsD,MAAdiB,KADD,EAUHvE,KAAKsF,MAPP6O,EAHK,EAGLA,WACA7D,EAJK,EAILA,QACAjB,EALK,EAKLA,cACA+E,EANK,EAMLA,kBACA7D,EAPK,EAOLA,eACA2C,EARK,EAQLA,SACAoB,EATK,EASLA,aAGIE,EAAgBL,EAAWzD,KAAI,SAAC+D,EAAG7D,GAAJ,OACnC,kBAAC,GAAD,CACErM,KAAMA,EACNyP,UAAWS,EACX7C,SAAU6C,EAAElU,iBAAF,OAAoB+T,QAApB,IAAoBA,OAApB,EAAoBA,EAAc/T,eAC5C0T,OAAQ,EAAKS,kBAAkBlR,KAAK,QAIlCiN,EAAcH,EAAQI,KAAI,SAACC,EAAGC,GAAJ,OAC9B,kBAAC,GAAD,CACErM,KAAMA,EACNvC,OAAQ2O,EACRtB,cAAeA,EAAcuB,QAI3B+D,EACJ,yBAAKxQ,UAAU,qBACb,yBAAKA,UAAU,yBACb,wCAGF,yBAAKA,UAAU,4BACb,6BAAMqQ,KAKNI,EACJ,yBAAKzQ,UAAU,qBACb,yBAAKA,UAAU,yBACb,uCAAMmQ,QAAN,IAAMA,OAAN,EAAMA,EAAcnR,KAApB,MAGF,yBAAKgB,UAAU,yBACb,6BAAMsM,KAKNoE,EACJ,yBAAK1Q,UAAU,wDACb,sDACA,kBAACE,EAAA,EAAD,CACER,QAAQ,gBACRE,QAAS,WACP,EAAK4C,SAAS,CACZ2J,QAAS,GACT6D,WAAY,GACZC,mBAAmB,IAErB,EAAKC,sBAGP,kBAAC,IAAD,CAAiBtM,KAAMgJ,QAK7B,OACE,qCACIqD,GAA2C,IAAtBD,EAAW1S,QAChC,yBAAK0C,UAAU,oCACb,uDAIFiQ,IAAsBlB,GAAkC,IAAtBiB,EAAW1S,QAC7C,kBAACiJ,EAAA,EAAD,CAAKvG,UAAU,aACb,kBAACwG,EAAA,EAAD,KAAMgK,GACN,kBAAChK,EAAA,EAAD,KAAMkK,KAIRT,GAAqBlB,GAAkC,IAAtBiB,EAAW1S,QAC5C,kBAACiJ,EAAA,EAAD,CAAKvG,UAAU,kBACb,kBAACwG,EAAA,EAAD,KACE,kBAACD,EAAA,EAAD,CAAKvG,UAAU,QACb,kBAACwG,EAAA,EAAD,KAAMgK,IAGR,kBAACjK,EAAA,EAAD,CAAKvG,UAAU,SACXoM,GAAkB,kBAAC5F,EAAA,EAAD,KAAMiK,GACzBrE,GACC,kBAAC5F,EAAA,EAAD,KACE,yBAAKxG,UAAU,iDACb,kBAACqE,EAAA,EAAD,CACErE,UAAU,GACVsE,UAAU,SACV5E,QAAQ,kBAOpB,kBAAC8G,EAAA,EAAD,KAAMkK,IAITT,GACC,yBAAKjQ,UAAU,iDACb,kBAACqE,EAAA,EAAD,CAASrE,UAAU,GAAGsE,UAAU,SAAS5E,QAAQ,oB,GA1PrCmB,IAAMC,Y,UCwpBf6P,I,mBA1oBb,WAAYxR,GAAoB,IAAD,8BAC7B,4CAAMA,KAHA4C,kBAEuB,EAE7B,EAAKZ,MAAQ,CACXyP,WAAW,EACXC,WAAW,EACXC,cAAc,EACdC,aAAa,EACbC,eAAe,EACfC,iBAAiB,EACjBC,WAAW,EACX1J,eAAe,EACf2J,WAAY,GACZC,UAAW,GAEXC,WAAW,GAEb,EAAKtP,aAAe,IAAIrG,IAExB,EAAK4V,sBAAwB,EAAKA,sBAAsBjS,KAA3B,gBAC7B,EAAKkS,uBAAyB,EAAKA,uBAAuBlS,KAA5B,gBAE9B,EAAKmS,aAAe,EAAKA,aAAanS,KAAlB,gBACpB,EAAKoS,YAAc,EAAKA,YAAYpS,KAAjB,gBACnB,EAAKqS,aAAe,EAAKA,aAAarS,KAAlB,gBAvBS,E,6EA2B7B,IAAMjD,EAAgBP,KAAKsD,MAAMiB,KAAKhE,cAGtC,GAAsB,KAAlBA,EAAJ,CAOA,IAAMuV,EAAa,0JAGnB,OAFAnV,QAAQC,IAAIkV,EAAGC,KAAK/V,KAAKsF,MAAMgQ,WAAWU,gBAC1CrV,QAAQC,IAAIZ,KAAKsF,MAAMgQ,YAErBtV,KAAKsF,MAAMgQ,WAAW7T,QAAU,IAC/BqU,EAAGC,KAAK/V,KAAKsF,MAAMgQ,WAAWU,gBAE/BrV,QAAQC,IAAIZ,KAAKsF,MAAMiQ,WACvB5U,QAAQC,IAAI,0BAEZZ,KAAK2G,SAAS,CACZoO,WAAW,EACXC,WAAW,EACXC,cAAc,EACdC,aAAa,EACbC,eAAe,EACfC,iBAAiB,EACjBC,WAAW,EACX1J,eAAe,KAGR3L,KAAKsF,MAAMiQ,UAAU9T,QAAU,GACxCd,QAAQC,IAAIZ,KAAKsF,MAAMiQ,WACvB5U,QAAQC,IAAI,yBAEZZ,KAAK2G,SAAS,CACZoO,WAAW,EACXC,WAAW,EACXC,cAAc,EACdC,aAAa,EACbC,eAAe,EACfC,iBAAiB,EACjBC,WAAW,EACX1J,eAAe,UAMnB3L,KAAKiW,OAAO,CACV1V,cAAeA,EACf2V,MAAOlW,KAAKsF,MAAMgQ,WAClBC,UAAWvV,KAAKsF,MAAMiQ,YACrBnV,OAAM,SAACC,GACRM,QAAQC,IAAIP,MAjDZM,QAAQC,IAAI,kD,qCAgEyD,IAAD,OACtED,QAAQC,IAAI,kBAGZ,IAAML,EAAgBP,KAAKsD,MAAMiB,KAAKhE,cAItC,GAAsB,KAAlBA,EAAJ,CAQAI,QAAQC,IAAI,kBAAmBL,GAU/B4I,MAAM,GAAD,OACAC,oDADA,uBACgD7I,GAT3B,CACxBQ,OAAQ,MACRmE,QAAS,CACP,8BAA+B,IAC/B,eAAgB,sBAQjB/E,MAAK,SAACkJ,GAGL,OAFA1I,QAAQC,IAAI,gCACZD,QAAQC,IAAIyI,GACLA,EAASC,UAEjBnJ,MAAK,SAACgR,GAGL,OAFAxQ,QAAQC,IAAIuQ,GAEI,MAAZA,EAAM,IACRxQ,QAAQC,IAAI,mBAKZ,EAAK+F,SAAS,CACZoO,WAAW,EACXC,WAAW,EACXC,cAAc,EACdC,aAAa,EACbC,eAAe,EACfC,iBAAiB,EACjBC,WAAW,EACX1J,eAAe,IAEVjK,QAAQE,OAAO,wBAEjBuP,EAAM,MAGdhR,KAAKH,KAAK4V,aAEVzV,KAAKH,KAAK6V,cAEVzV,OAAM,SAACiC,GACN1B,QAAQC,IAAIyB,WAtDd1B,QAAQC,IAAI,kD,oKA+DdL,E,EAAAA,cACA2V,E,EAAAA,MACAX,E,EAAAA,UAMA5U,QAAQC,IACN,iBACAL,EACA,QACA2V,EACA,QACAX,GAIFvV,KAAK2G,SAAS,CACZoO,WAAW,EACXC,WAAW,EACXC,cAAc,EACdC,aAAa,EACbC,eAAe,EACfC,iBAAiB,EACjBC,WAAW,EACX1J,eAAe,I,SAEO3L,KAAKkG,aAAaiQ,aAAa5V,G,UAAjDT,E,OACNa,QAAQC,IAAId,GAEPA,E,wBAEHE,KAAK2G,SAAS,CACZoO,WAAW,EACXC,WAAW,EACXC,cAAc,EACdC,aAAa,EACbC,eAAe,EACfC,iBAAiB,EACjBC,WAAW,EACX1J,eAAe,I,kBAEVjK,QAAQE,OAAO,6B,eAGxB5B,KAAK2G,SAAS,CAAEoO,WAAW,I,UAEd5L,MAAM,GAAD,OACbC,oDADa,sBAEhB,CACEJ,KAAM3H,KAAKC,UAAU,CACnBf,cAAeA,EACf4C,KAAMoS,EACNW,MAAOA,EACPpW,UAAWA,IAEboF,QAAS,CACP,8BAA+B,IAC/B,eAAgB,oBAElBnE,OAAQ,SAGTZ,MAAK,SAACkJ,GAGL,OAFA1I,QAAQC,IAAI,2BACZD,QAAQC,IAAIyI,GACLA,EAASC,UAEjBnJ,MAAK,SAACgR,GAGL,GAFAxQ,QAAQC,IAAIuQ,GACZxQ,QAAQC,IAAI,iBACPuQ,GAA0B,IAAjBA,EAAM1P,OAwBlB,OAVA,EAAKkF,SAAS,CACZoO,WAAW,EACXC,WAAW,EACXC,cAAc,EACdC,aAAa,EACbC,eAAe,EACfC,iBAAiB,EACjBC,WAAW,EACX1J,eAAe,IAEVwF,EAAM,GAtBb,EAAKxK,SAAS,CACZoO,WAAW,EACXC,WAAW,EACXC,cAAc,EACdC,aAAa,EACbC,eAAe,EACfC,iBAAiB,EACjBC,WAAW,EACX1J,eAAe,OAkBpBvL,OAAM,SAACiC,GAAD,OAAgB1B,QAAQC,IAAIyB,M,wTAIrC9B,E,EAAAA,cACA6V,E,EAAAA,MAMAzV,QAAQC,IAAI,qBACZD,QAAQC,IAAIwV,GAGN7T,EAAU6T,EAEhBzV,QAAQC,IAAI2B,GACZ5B,QAAQC,IAAIqB,GAAKoU,MAAMC,UAAX,UAAwB/T,KACpC5B,QAAQC,IAAIL,G,kBACL,IAAImB,SAAQ,SAACC,EAASC,GAE3BK,GAAKC,IAAIC,SACNC,KACCG,EAEAhC,EACA,IACA,SAAC8B,EAAKG,GAGJ,OAAIH,GACF1B,QAAQC,IAAI,sBAEZ,EAAK+F,SAAS,CACZoO,WAAW,EACXC,WAAW,EACXC,cAAc,EACdC,aAAa,EACbC,eAAe,EACfC,iBAAiB,EACjBC,WAAW,EACX1J,eAAe,IAEV/J,EAAOS,KAEhB1B,QAAQC,IAAI,kBACLe,EAAQ,CAAEpB,gBAAeiC,kBAGnCrC,KAAKQ,QAAQC,KACbR,OAAM,SAACiC,GACN1B,QAAQC,a,wQAMdL,E,EAAAA,cACAiC,E,EAAAA,UAKA7B,QAAQC,IAAI,kB,kBAMLuI,MAAM,GAAD,OAAIC,oDAAJ,SAA8C,CACxDJ,KAAM3H,KAAKC,UAAU,CAAEf,gBAAeiC,cACtC0C,QAAS,CACP,8BAA+B,IAC/B,eAAgB,oBAElBnE,OAAQ,SAEPZ,MAAK,SAACkJ,GACL1I,QAAQC,IAAI,qBACZD,QAAQC,IAAIyI,GAEZA,EACGC,OACAnJ,MAAK,SAAC6I,GACLrI,QAAQC,IAAIoI,GACZ,IACMuN,EADOvN,EAAKxH,KACH0H,SACfvI,QAAQC,IAAI,WAAY2V,GACxB,IAAIrN,EAAWqN,QAAQxT,EACnBmG,GACFvI,QAAQC,IAAIsI,GACZ,EAAK5F,MAAMkT,SAAS,CAClBjW,cAAe,EAAK+C,MAAMiB,KAAKhE,cAC/B4C,KAAM,EAAKG,MAAMiB,KAAKpB,KACtB+F,SAAUA,KAGZvI,QAAQC,IAAI,0BAGfR,OAAM,SAACiC,GACN1B,QAAQC,IAAIyB,SAGjBjC,OAAM,SAACiC,GACN1B,QAAQC,IAAIyB,O,8IAIIoI,GACpB9J,QAAQC,IAAI6J,EAAM7D,OAAOd,OACzB9F,KAAK2G,SAAS,CAAE4O,UAAW9K,EAAM7D,OAAOd,U,6CAGnB2E,GACrB9J,QAAQC,IAAI6J,EAAM7D,OAAOd,OACzB9F,KAAK2G,SAAS,CAAE2O,WAAY7K,EAAM7D,OAAOd,U,mCAIzC9F,KAAK2G,SAAS,CACZ6O,WAAYxV,KAAKsF,MAAMkQ,UACvBT,WAAW,EACXC,WAAW,EACXC,cAAc,EACdC,aAAa,EACbC,eAAe,EACfC,iBAAiB,EACjBC,WAAW,EACX1J,eAAe,M,+BAIT,IAAD,OACD8K,EACJ,yBAAKtS,UAAU,8CACb,kBAACE,EAAA,EAAD,CACER,QAAQ,gBACRM,UAAU,qBACVJ,QAAS,WACP,EAAK2S,eAJT,WASA,kBAACrS,EAAA,EAAD,CACER,QAAQ,gBACRM,UAAU,YACVJ,QAAS,WACP,EAAK4R,iBAJT,UAYEgB,EACJ,0BAAMxS,UAAU,2BACd,kBAACmN,EAAA,EAAD,CAAYnN,UAAU,2BACpB,kBAACmD,EAAA,EAAKE,MAAN,CAAYoD,UAAU,aAEpB,kBAACtD,EAAA,EAAKwD,QAAN,CACE1H,KAAK,QACLe,UAAU,aACV4G,YAAY,QACZrE,SAAU1G,KAAK0V,0BASnB,kBAACkB,GAAA,EAAD,CACExT,KAAK,OACLe,UAAU,QACV4G,YAAY,OACZjF,MAAO9F,KAAKsF,MAAMiQ,UAClB7O,SAAU1G,KAAKyV,yBAGnB,yBAAKtR,UAAU,sBACb,kBAACE,EAAA,EAAD,CACER,QAAQ,gBACRM,UAAU,wBACVJ,QAAS,WACP,EAAK8S,kBAJT,WASA,kBAACxS,EAAA,EAAD,CACER,QAAQ,gBACRM,UAAU,6BACVJ,QAAS,WACP,EAAK2S,aACL,EAAK/P,SAAS,CAAE4O,UAAW,OAL/B,UAcEhR,EAASvE,KAAKsD,MAAdiB,KA1ED,EAqFHvE,KAAKsF,MATPyP,EA5EK,EA4ELA,UACAC,EA7EK,EA6ELA,UACAC,EA9EK,EA8ELA,aACAC,EA/EK,EA+ELA,YACAC,EAhFK,EAgFLA,cACAC,EAjFK,EAiFLA,gBACAC,EAlFK,EAkFLA,UACA1J,EAnFK,EAmFLA,cACA6J,EApFK,EAoFLA,UAGF,OACE,yBAAKrR,UAAU,SACb,yBAAKA,UAAU,cACb,6BAAMqR,EAAYiB,EAAeE,GACjC,yBAAKxS,UAAU,wCAEX4Q,GACAC,GACAC,GACAC,GACAC,GACAC,GACAzJ,IACE,kBAAC/D,EAAA,EAAD,CACF+B,UAAU,SACV9B,QACE,kBAACC,EAAA,EAAD,CAASrD,GAAG,cACV,oCACGsQ,GACC,2DAC6B,yCAD7B,oBAEM,iCAFN,sBAEkC,qCAFlC,+BAGwB,iCAHxB,2CAODC,GACC,6CACe,uCADf,yCAEY,yCAFZ,iGAImB,oDAJnB,iBAQDC,GACC,mIAE6C,IAC3C,sDAGHC,GACC,4EAC+C,IAC7C,+CAFF,oBAKsB,KAAvB3Q,EAAKhE,eACJ,4JAMD4U,GACC,gFACmD,IACjD,oCAFF,2BAG2B,KAG5BC,GACC,0EAC4C,oCAAa,IADzD,6DAMDC,GACC,+DACiC,sCADjC,mEAKD1J,GACC,yBAAKxH,UAAU,gBAAf,gBACe,oCADf,mBAC4C,oCAD5C,sEAGa,qDAHb,oBAkCR,kBAAC,IAAD,CACE4D,KACGgN,GACDI,EACIjN,IACAF,IAENlB,KAAK,KACL3C,UAAU,UAGb4Q,GAAa,yBAAK5Q,UAAU,QAAf,0BACb6Q,GAAa,yBAAK7Q,UAAU,QAAf,2BACb8Q,GACC,yBAAK9Q,UAAU,QAAf,8BAED+Q,GACC,yBAAK/Q,UAAU,QAAf,6BAEsB,KAAvBI,EAAKhE,eACJ,yBAAK4D,UAAU,QAAf,8BAEDgR,GACC,yBAAKhR,UAAU,QAAf,qCAEDiR,GACC,yBAAKjR,UAAU,QAAf,wBAEDkR,GAAa,yBAAKlR,UAAU,QAAf,yBACbwH,GAAiB,yBAAKxH,UAAU,QAAf,mBAYlB,yBAAKA,UAAU,qB,GApoBPa,IAAMC,YCnCpBC,I,OAAU,IAAIC,SACpBD,GAAQE,IAAI,8BAA+B,KAC3CF,GAAQE,IAAI,eAAgB,oB,ICkBjBnD,GAGN6U,GAOAC,GDyBUC,G,YA7Cb,WAAY1T,GAAwB,IAAD,8BACjC,4CAAMA,KACDgC,MAAQ,GAFoB,E,sEAMjC,OACE,kBAACoF,EAAA,EAAD,CAAKvG,UAAU,sCAQb,kBAACwG,EAAA,EAAD,CAAKxG,UAAU,oBACb,0CAEF,kBAACwG,EAAA,EAAD,CAAKxG,UAAU,+BACf,kBAACuG,EAAA,EAAD,CAAKvG,UAAU,aACX,kBAAC,IAAD,CAAMS,GtBlCO,asBkCeT,UAAU,uBACpC,kBAACkE,EAAA,EAAK6B,OAAN,CAAa/F,UAAU,8EACrB,4CAIN,kBAACuG,EAAA,EAAD,CAAKvG,UAAU,aACb,kBAAC,IAAD,CAAMS,GtBxCI,UsBwCeT,UAAU,uBACjC,kBAACkE,EAAA,EAAK6B,OAAN,CAAa/F,UAAU,8EACrB,yCAIN,kBAACuG,EAAA,EAAD,CAAKvG,UAAU,aACb,kBAAC,IAAD,CAAMS,GtBjDO,asBiDeT,UAAU,uBACpC,kBAACkE,EAAA,EAAK6B,OAAN,CAAa/F,UAAU,8EACrB,kD,GArCQa,IAAMC,W,0ECczB6R,K,uBAAAA,E,uBAAAA,E,iBAAAA,E,wBAAAA,Q,cAOAC,K,SAAAA,E,gBAAAA,Q,KAYL,IA4BWE,GACPC,GA7BEC,GAAY,SAAC,GAKQ,IAJzBlS,EAIwB,EAJxBA,UACAmS,EAGwB,EAHxBA,KAGwB,IAFxBC,aAEwB,SAClBC,EADkB,EADxBC,OAIA,OACE,kBAAC,IAAD,CACEF,MAAOA,EACPD,KAAMA,EACN1X,OAAQ,SAAC4D,GAAD,OACNgU,EACE,kBAACrS,EAAc3B,GAEf,kBAAC,IAAD,CACEsB,GAAI,CACF4S,SAAUT,GAAcU,a,IAoDhCC,G,YACJ,WAAYpU,GAAa,IAAD,8BACtB,4CAAMA,KACDgC,MAAQ,CACXqS,gBAAgB,EAChBC,kBAAmB,EACnBC,SAAU,GACVC,cAAc,EACd1T,aAAa,EACbV,UAAU,EACVa,KAAM,CAAEhE,cAAe,GAAI4C,KAAM,GAAI+F,SAAU,KAEjD,EAAK3F,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKuU,QAAU,EAAKA,QAAQvU,KAAb,gBAZO,E,kFAiBtBxD,KAAKuD,c,2CAGckH,GACnBzK,KAAK2G,SAAS,CACZiR,kBAAmBnN,EAAM7D,OAAOd,QAElCnF,QAAQC,IAAI,+BAAiCZ,KAAKsF,MAAMsS,mBAC7C5X,KAAKsF,MAAMuS,SAASG,QAAQC,OAAOC,OACjC,IAAIC,IAAGnY,KAAKsF,MAAMsS,qB,6JAM/BjX,QAAQC,IAAI,aACNb,EAAYE,OAAeF,SACjCY,QAAQC,IAAIb,IACRA,E,iCACIA,EAASG,S,cACfgX,GAAgBjX,OAAegC,KAAKmW,gBAIpCnW,GAAO,IAAIoW,KAAKnB,I,UACCnX,EAASe,QAAQ,CAAEC,OAAQ,iB,WAA5CkW,G,OAEAtW,QAAQC,IAAIqW,IAURqB,EAAIrY,OAAOsY,aAAaC,QAAQ,YAChCjU,EAAO,CAAEhE,cAAe0W,GAAS,GAAI9T,KAAM,GAAI+F,SAAU,IAEpD,MAALoP,E,oBACEG,EAAIpX,KAAKuB,MAAM0V,GACnB3X,QAAQC,IAAI6X,GAERlU,EAAKhE,gBAAkBkY,EAAElY,c,kCACKP,KAAK0Y,SAASD,G,QAAxCE,E,OACNhY,QAAQC,IAAI+X,GACRA,GACFpU,EAAO,CACLhE,cAAekY,EAAElY,cACjB4C,KAAMsV,EAAEtV,KACR+F,SAAUuP,EAAEvP,UAGdlJ,KAAK2G,SAAS,CACZkR,cAhHVA,EAiHUtT,OACAb,UAAU,EACVoU,cAAc,EACd1T,aAAa,KAIfpE,KAAK2G,SAAS,CACZkR,cAzHVA,EA0HUtT,OACAb,UAAU,EACVoU,cAAc,EACd1T,aAAa,I,wBAIjBpE,KAAK2G,SAAS,CACZkR,cAlIRA,EAmIQzT,aAAa,EACbG,OACAuT,cAAc,I,gCAIlBnX,QAAQC,IAAI,IACZZ,KAAK2G,SAAS,CACZkR,cA3INA,EA4IMzT,aAAa,EACbG,OACAuT,cAAc,I,QAGlBnX,QAAQC,IAAI2D,EAAKhE,cAAegE,EAAKpB,KAAMoB,EAAK2E,U,wBAKhDlJ,KAAK2G,SAAS,CAAEgR,gBAAgB,IAChC3X,KAAKsD,MAAM4J,QAAQ3B,KvBlOQ,sB,+KuByOhBhH,G,8EACb5D,QAAQC,IAAI,Y,kBAGWuI,MAAM,GAAD,OACrBC,oDADqB,yBAC6B7E,EAAKhE,eAC1D,CACEyI,KAAM3H,KAAKC,UAAU,CACnB2H,KAAM,CACJC,SAAU3E,EAAK2E,SACf3I,cAAegE,EAAKhE,eAEtBiB,KAAM,KAER0D,QAAS,CACP,8BAA+B,IAC/B,eAAgB,oBAElBnE,OAAQ,S,UAdRsI,E,OAiBJ1I,QAAQC,IAAIyI,EAASqD,QACG,MAApBrD,EAASqD,O,2CACJ,G,kCAEA,G,oFAGF,G,+IAIH4L,GACN3X,QAAQC,IAAI,kBACZZ,KAAK2G,SAAS,CAAEpC,KAAM+T,EAAG5U,UAAU,IACnC1D,KAAKsD,MAAM4J,QAAQ3B,KvBhRE,cuBiRrBtL,OAAOsY,aAAaK,QAAQ,WAAYvX,KAAKC,UAAUgX,M,+BAG/C,IAAD,EAOHtY,KAAKsF,MAJPwS,GAHK,EAELH,eAFK,EAGLG,cACA1T,EAJK,EAILA,YACAV,EALK,EAKLA,SACAa,EANK,EAMLA,KAEIsU,EAAO,kBAAC,EAAD,CAAUtU,KAAMA,IACvBkT,EAAQ,kBAAC,GAAD,CAAWjB,SAAUxW,KAAK+X,QAAQvU,KAAKxD,MAAOuE,KAAMA,IAC5DuU,EAAY,kBAAC,GAAD,CAAevU,KAAMA,IACjCyP,EAAY,kBAAC,GAAD,CAAezP,KAAMA,IACjCwU,EAAS,kBAAC,EAAD,CAAYxU,KAAMA,IAC3ByU,EAAY,kBAAC,GAAD,CAAezU,KAAMA,IAEvC,OACE,6BACE,kBAAC,EAAD,CACEA,KAAMA,EACNH,YAAaA,EACbb,UAAWvD,KAAKuD,UAChBG,SAAUA,IAIXoU,GACC,yBAAK3T,UAAU,oBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEiT,KAAML,GAAcU,MACpBF,OAAQ7T,EACRuV,UAAW,kBAAMxB,KAEnB,kBAAC,IAAD,CACEJ,OAAK,EACLD,KAAML,GAAc8B,KACpBtB,OAAQ7T,EACRuV,UAAW,kBAAMJ,KAEnB,kBAAC,GAAD,CACEzB,KAAMN,GAAW9C,UACjBuD,OAAQ7T,EACRuB,UAAW,kBAAM+O,KAEnB,kBAAC,GAAD,CACEoD,KAAMN,GAAWiC,OACjBxB,OAAQ7T,EACRuB,UAAW,kBAAM8T,KAEnB,kBAAC,GAAD,CACE3B,KAAMN,GAAWkC,UACjBzB,OAAQ7T,EACRuB,UAAW,kBAAM+T,KAEnB,kBAAC,GAAD,CACE5B,KAAMN,GAAWgC,UACjBvB,OAAQ7T,EACRuB,UAAW,kBAAM6T,Y,GAvNf9T,IAAMC,WAgOTiU,gBAAWxB,M","file":"static/js/main.2ed3c62c.chunk.js","sourcesContent":["import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./assets/styles/app.scss\";\r\n// import { BigNumber } from \"bignumber.js\";\r\n//import * as TruffleContracts from \".\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\n// const Web3 = require('web3');\r\n\r\n// let web3: typeof Web3\r\n// let web3Provider;\r\n//web3 = new Web3(new Web3.providers.HttpProvider('http://127.0.0.1:9545')); // was 9545 before\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <App />\r\n  </Router>,\r\n  document.getElementById(\"root\")\r\n);\r\n","import * as EthUtil from \"ethereumjs-util\";\r\nimport * as SigUtil from \"eth-sig-util\";\r\nimport FileData from \"../common/FileData.interface\";\r\nimport { web3 } from \"../App\";\r\n\r\nclass CryptService {\r\n  private publicKey: string = \"\";\r\n  private ethereum: any;\r\n\r\n  constructor() {\r\n    this.publicKey = \"\";\r\n    this.ethereum = (window as any).ethereum;\r\n    if (this.ethereum) {\r\n      this.ethereum\r\n        .enable()\r\n        .then(() => {})\r\n        .catch((e: Error) => {});\r\n    }\r\n  }\r\n\r\n  async encrypt(file: File, publicAddress: string): Promise<string> {\r\n    try {\r\n      const fileData = await this.createFileData(file); // rejects on failure\r\n\r\n      let fileDataString: string | null = null;\r\n      console.log(publicAddress);\r\n      console.log(fileData.letterType);\r\n      return this.ethereum\r\n        .request({\r\n          method: \"eth_getEncryptionPublicKey\",\r\n          params: [publicAddress], // you must have access to the specified account\r\n        })\r\n        .then((publicKey: string) => {\r\n          console.log(\"publicKey\", publicKey);\r\n          this.publicKey = publicKey;\r\n\r\n          const encryptedMessage = EthUtil.bufferToHex(\r\n            Buffer.from(\r\n              JSON.stringify(\r\n                SigUtil.encrypt(\r\n                  this.publicKey,\r\n                  { data: JSON.stringify(fileData) },\r\n                  \"x25519-xsalsa20-poly1305\"\r\n                )\r\n              ),\r\n              \"utf8\"\r\n            )\r\n          );\r\n          console.log(encryptedMessage.length);\r\n          fileDataString = encryptedMessage;\r\n          return Promise.resolve(fileDataString);\r\n        })\r\n        .catch((e: Error) => {\r\n          console.log(e);\r\n          return Promise.resolve(fileDataString);\r\n        });\r\n    } catch (error) {\r\n      console.log(\"error in file reader and/or encryption\");\r\n      return Promise.reject(\"error in file reader and/or encryption\");\r\n    }\r\n  }\r\n\r\n  async encryptSend(fileData: FileData, pubKey: string): Promise<string> {\r\n    console.log(pubKey);\r\n\r\n    try {\r\n      // const fileData = await this.createFileData(file);\r\n      let fileDataString: string | null = null;\r\n      console.log(fileData.letterType);\r\n      const encryptedMessage = EthUtil.bufferToHex(\r\n        Buffer.from(\r\n          JSON.stringify(\r\n            SigUtil.encrypt(\r\n              pubKey,\r\n              { data: JSON.stringify(fileData) },\r\n              \"x25519-xsalsa20-poly1305\"\r\n            )\r\n          ),\r\n          \"utf8\"\r\n        )\r\n      );\r\n      console.log(encryptedMessage.length);\r\n      fileDataString = encryptedMessage;\r\n      return Promise.resolve(fileDataString);\r\n    } catch (error) {\r\n      console.log(\"error in file reader and/or encryption\", error);\r\n      return Promise.reject(\"error in file reader and/or encryption\");\r\n    }\r\n  }\r\n\r\n  async hashFile(letterDetails: string): Promise<string> {\r\n    try {\r\n      let hash = EthUtil.bufferToHex(\r\n        EthUtil.keccak256(Buffer.from(letterDetails, \"utf8\"))\r\n      );\r\n      console.log(\"Hash is: \" + hash);\r\n      return hash;\r\n    } catch (error) {\r\n      console.log(\"error in file reader and/or fileHash\");\r\n      return \"error in file reader and/or fileHash\";\r\n    }\r\n  }\r\n\r\n  async signLetter(letter: string, publicAddress: string): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n      web3.eth.personal\r\n        .sign(letter, publicAddress, \"\", (err, signedLetter) => {\r\n          if (err) {\r\n            console.log(\"error when signing\");\r\n            return reject(err);\r\n          }\r\n          console.log(\"message signed\");\r\n          return resolve(signedLetter);\r\n        })\r\n        .then(console.log)\r\n        .catch((err: Error) => {\r\n          console.log();\r\n        });\r\n    });\r\n  }\r\n\r\n  async sign(file: File, publicAddress: string): Promise<string> {\r\n    try {\r\n      const fileData = await this.createFileData(file); // rejects on failure\r\n      let signedFile: string | null = null;\r\n      let message = JSON.stringify(fileData);\r\n\r\n      return new Promise((resolve, reject) => {\r\n        web3.eth.personal\r\n          .sign(message, publicAddress, \"\", (err, signature) => {\r\n            if (err) {\r\n              console.log(\"error when signing\");\r\n              return reject(err);\r\n            }\r\n            console.log(\"message signed\");\r\n            // Did this to test signature\r\n            // web3.eth.personal.ecRecover(message, signature).then((account: string) => {\r\n            // \t//console.log(\"Successfully signed letter\")\r\n            // \tif (account != publicAddress) {\r\n            // \t\tconsole.log(\"Successfully signed letter\")\r\n            // \t}\r\n            // });\r\n            return resolve(signature);\r\n          })\r\n          .then(console.log)\r\n          .catch((err: Error) => {\r\n            console.log();\r\n          });\r\n      });\r\n    } catch (error) {\r\n      console.log(\"error in file reader and/or digital signature\");\r\n      return Promise.reject(\"error in file reader and/or digital signature\");\r\n    }\r\n  }\r\n\r\n  async decrypt(file: string, publicAddress: string): Promise<FileData> {\r\n    console.log(publicAddress);\r\n    console.log(file);\r\n    let fileData: FileData = {\r\n      letterTitle: \"\",\r\n      letterType: \"invalid\",\r\n      letterUrl: \"\",\r\n    };\r\n    return this.ethereum\r\n      .request({\r\n        method: \"eth_decrypt\",\r\n        params: [file, publicAddress],\r\n      })\r\n      .then((decryptedMessage: string) => {\r\n        console.log(decryptedMessage.length);\r\n        fileData = JSON.parse(decryptedMessage);\r\n        console.log(\"parsed\");\r\n        return Promise.resolve(fileData);\r\n      })\r\n      .catch((e: Error) => {\r\n        console.log(e);\r\n        return Promise.reject(\"failure to decrypt\");\r\n      });\r\n  }\r\n\r\n  async createFileData(file: File): Promise<FileData> {\r\n    let fileData: FileData = {\r\n      letterUrl: \"\",\r\n      letterTitle: \"\",\r\n      letterType: \"invalid\",\r\n    };\r\n    return new Promise((resolve, reject) => {\r\n      let reader = new FileReader();\r\n      if (file !== undefined) {\r\n        reader.readAsDataURL(file);\r\n        reader.onload = (e: any) => {\r\n          if (typeof reader.result === \"string\") {\r\n            console.log(\"letterUrl obtained\");\r\n            // console.log(reader.result);\r\n            fileData.letterTitle = file.name;\r\n            fileData.letterType = file.type;\r\n            fileData.letterUrl = reader.result;\r\n            resolve(fileData);\r\n            // console.log(fileData);\r\n            // { letterUrl: reader.result, letterTitle: file.name, letterType : file.type };\r\n          } else {\r\n            console.log(\"error with reader.result type\");\r\n            reject(\"failed to get reader.result type string\");\r\n          }\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  async getPublicKey(publicAddress: string): Promise<string | null> {\r\n    try {\r\n      return await this.ethereum.request({\r\n        method: \"eth_getEncryptionPublicKey\",\r\n        params: [publicAddress], // you must have access to the specified account\r\n      });\r\n    } catch (error) {\r\n      console.log(\"error in encrypting letter\", error);\r\n      return null;\r\n    }\r\n  }\r\n}\r\nexport default CryptService;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport \"./Nav.css\";\r\n\r\nimport * as ROUTES from \"../routes\";\r\nimport UserAuth from \"../common/UserAuth.interface\";\r\n\r\ntype NavProps = {\r\n  user: UserAuth;\r\n  connectedTo: boolean; // metamask\r\n  onConnect: () => void;\r\n  loggedIn: boolean; // app\r\n};\r\ntype NavState = {};\r\n\r\nclass Nav extends React.Component<NavProps, NavState> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.onConnect = this.onConnect.bind(this);\r\n  }\r\n\r\n  onConnect() {\r\n    // callback\r\n    this.props.onConnect();\r\n  }\r\n\r\n  render() {\r\n    const brandLink = this.props.loggedIn ? \"/dashboard\" : \"/\";\r\n    return (\r\n      <Navbar bg=\"dark\" variant=\"dark\">\r\n        <Navbar.Brand\r\n          onClick={() => {\r\n            return false;\r\n          }}\r\n          href={brandLink}\r\n        >\r\n          ETC Reference Letter dApp\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle />\r\n        <Navbar.Collapse className=\"justify-content-end\">\r\n          {!this.props.connectedTo && (\r\n            <Button\r\n              className=\"connect\"\r\n              onClick={() => {\r\n                this.onConnect();\r\n              }}\r\n            >\r\n              Connect\r\n            </Button>\r\n          )}\r\n          {this.props.connectedTo && (\r\n            <Navbar.Text className=\"navText\">\r\n              Connected to Metamask: <span>{this.props.connectedTo ? this.props.user.publicAddress : \"--\"}</span>\r\n            </Navbar.Text>\r\n          )}\r\n        </Navbar.Collapse>\r\n        <Dropdown>\r\n          <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n            Menu\r\n          </Dropdown.Toggle>\r\n          {this.props.loggedIn && (\r\n            <Dropdown.Menu alignRight={true}>\r\n              <Link to={ROUTES.HOME} style={{ textDecoration: \"none\" }}>\r\n                <li>\r\n                  <Dropdown.Item href=\"#/action-0\">Home</Dropdown.Item>\r\n                </li>\r\n              </Link>\r\n              {/* <Link to={ROUTES.LOGIN} style={{ textDecoration: \"none\" }}>\r\n              <li>\r\n                <Dropdown.Item href=\"#/action-1\">Login</Dropdown.Item>\r\n              </li>\r\n            </Link> */}\r\n              <Link to={ROUTES.DASHBOARD} style={{ textDecoration: \"none\" }}>\r\n                <li>\r\n                  <Dropdown.Item href=\"#/action-2\">Dashboard</Dropdown.Item>\r\n                </li>\r\n              </Link>\r\n              <Link to={ROUTES.REQUESTOR} style={{ textDecoration: \"none\" }}>\r\n                <li>\r\n                  <Dropdown.Item href=\"#/action-3\">Requestor</Dropdown.Item>\r\n                </li>\r\n              </Link>\r\n              <Link to={ROUTES.WRITER} style={{ textDecoration: \"none\" }}>\r\n                <li>\r\n                  <Dropdown.Item href=\"#/action-4\">Writer</Dropdown.Item>\r\n                </li>\r\n              </Link>\r\n              <Link to={ROUTES.RECIPIENT} style={{ textDecoration: \"none\" }}>\r\n                <li>\r\n                  <Dropdown.Item href=\"#/action-5\">Recipient</Dropdown.Item>\r\n                </li>\r\n              </Link>\r\n            </Dropdown.Menu>\r\n          )}\r\n          {!this.props.loggedIn && (\r\n            <Dropdown.Menu alignRight={true}>\r\n              <Link to={ROUTES.HOME} style={{ textDecoration: \"none\" }}>\r\n                <li>\r\n                  <Dropdown.Item href=\"#/action-0\">Home</Dropdown.Item>\r\n                </li>\r\n              </Link>\r\n              <Link to={ROUTES.LOGIN} style={{ textDecoration: \"none\" }}>\r\n                <li>\r\n                  <Dropdown.Item href=\"#/action-1\">Login</Dropdown.Item>\r\n                </li>\r\n              </Link>\r\n            </Dropdown.Menu>\r\n          )}\r\n        </Dropdown>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\nexport default Nav;\r\n","export const HOME = '/';\r\nexport const LOGIN = '/login';\r\nexport const DASHBOARD = \"/dashboard\";\r\nexport const RECIPIENT = '/recipient';\r\nexport const REQUESTOR = '/requestor';\r\nexport const WRITER = '/writer';\r\nexport const METAMASK_TUTORIAL = '/metamask-tutorial';\r\nexport const FAQS = '/faqs';\r\nexport const ERROR = '/';\r\n","import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport User from \"../common/UserAuth.interface\";\r\nimport * as ROUTES from \"../routes\";\r\nimport \"./Home.css\";\r\n\r\nconst headers = new Headers();\r\nheaders.set(\"Access-Control-Allow-Origin\", \"*\");\r\nheaders.set(\"Content-Type\", \"application/json\");\r\n\r\ninterface HomeProps {\r\n  user: User;\r\n}\r\ninterface HomeState {}\r\n\r\nclass Home extends React.Component<HomeProps, HomeState> {\r\n  constructor(props: HomeProps) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"home\">\r\n        <Redirect to={ROUTES.LOGIN} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Home;\r\n","import memoryCache, { CacheClass } from 'memory-cache';\r\n\r\nclass CacheService<K, V> {\r\n  private memCache: CacheClass<K, V> = new memoryCache.Cache();\r\n  private duration: number; // in milliseconds\r\n  constructor(minutes: number) {\r\n    this.duration = 1000 * minutes * 60;\r\n  }\r\n  put(key: K, value: V) {\r\n    console.log(\"put\", key, value);\r\n    this.memCache.put(key, value, this.duration);\r\n  }\r\n  get(key: K) {\r\n    console.log(\"get\", key);\r\n    return this.memCache.get(key);\r\n  }\r\n} export default CacheService;","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Form,\r\n  Spinner,\r\n  OverlayTrigger,\r\n  Tooltip,\r\n} from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faExclamationTriangle } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport User from \"../../common/UserAuth.interface\";\r\nimport \"./FileUpload.css\";\r\nimport { DropdownDivider } from \"react-bootstrap/Dropdown\";\r\nimport CryptService from \"../../services/CryptService\";\r\n\r\ninterface FileUploadProps {\r\n  user: User;\r\n  restrictPdf?: boolean;\r\n  encrypt: boolean;\r\n  reUpload: boolean;\r\n  onEncryptedUpload: (encryptedFile: string) => void;\r\n  onClose: () => void;\r\n}\r\ninterface FileUploadState {\r\n  file: File;\r\n  displayMessage: string;\r\n  displayVariant: number; // 0 = white, 1 = warning\r\n  submitClicked: boolean;\r\n  buffering: boolean;\r\n  failedEncryption: boolean;\r\n}\r\n\r\nclass FileUpload extends React.Component<FileUploadProps, FileUploadState> {\r\n  private cryptService: CryptService;\r\n\r\n  constructor(props: FileUploadProps) {\r\n    super(props);\r\n    this.state = {\r\n      file: new File([], \"\"),\r\n      displayMessage: \"\",\r\n      displayVariant: 0,\r\n      submitClicked: false,\r\n      buffering: false,\r\n      failedEncryption: false,\r\n    };\r\n    this.onFormSubmit = this.onFormSubmit.bind(this);\r\n    this.onChange = this.onChange.bind(this);\r\n    this.cryptService = new CryptService();\r\n  }\r\n\r\n  onChange(e: any) {\r\n    console.log(\"file changed\");\r\n    this.setState({ file: e.target.files[0] });\r\n  }\r\n\r\n  async onFormSubmit() {\r\n    const file = this.state.file;\r\n    console.log(file);\r\n    if (!file || file.size === 0) {\r\n      console.log(\"no file uploaded\");\r\n      this.setState({\r\n        displayMessage: \"No File Uploaded.\",\r\n        displayVariant: 0,\r\n        submitClicked: true,\r\n      });\r\n    } else if (this.props.restrictPdf && file.type !== \"application/pdf\") {\r\n      console.log(\"not a pdf\");\r\n      this.setState({\r\n        displayMessage: \"Please Upload a PDF.\",\r\n        displayVariant: 0,\r\n        submitClicked: true,\r\n        file: new File([], \"\"),\r\n      });\r\n    } else {\r\n      if (this.props.encrypt) {\r\n        this.setState({\r\n          displayMessage: \"See Metamask to Upload\",\r\n          displayVariant: 0,\r\n          submitClicked: true,\r\n          failedEncryption: false,\r\n        });\r\n\r\n        // handle encryption for uploaded file\r\n        // encrypt file\r\n        let encryptedFile = await this.cryptService.encrypt(\r\n          file,\r\n          this.props.user.publicAddress\r\n        );\r\n\r\n        if (!encryptedFile) {\r\n          console.log(\"encryption failed\");\r\n          this.setState({\r\n            failedEncryption: true,\r\n            submitClicked: false,\r\n            displayMessage: \"Failed to Encrypt\",\r\n            displayVariant: 0,\r\n          });\r\n        } else {\r\n          console.log(\"checking if upload to server\");\r\n          this.setState({\r\n            buffering: true,\r\n            displayMessage: \"\",\r\n            submitClicked: false,\r\n          });\r\n          setTimeout(() => {\r\n            this.props.onEncryptedUpload(encryptedFile);\r\n          }, 1000);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /*encryptFile(file: File) {\r\n    console.log(\"pretending to encrypt file\");\r\n    this.fileUploadToServer(file);\r\n  }\r\n\r\n  fileUploadToServer(file: File) {\r\n    console.log(\"sending file to server\");\r\n\r\n    // let fileForm: string = this.encryptFile(file);\r\n    \r\n    // REMOVE:\r\n    let fileForm: FormData = new FormData();\r\n    fileForm.append(\"file\", file);\r\n    // END REMOVE\r\n\r\n    this.setState({displayMessage: \"Uploading File.\"});\r\n\r\n    fetch(`${process.env.REACT_APP_BACKEND_URL}` + this.props.fetchUrl, {\r\n      body: fileForm,\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Content-Type\": \"mutlipart/form-data\",\r\n        jwtToken: this.props.user.jwtToken,\r\n      },\r\n      method: \"POST\",\r\n    })\r\n      .then((response: any) => {\r\n        console.log(\"body\", response.json);\r\n        console.log(\"status\", response.status);\r\n        if (response.status === 200) {\r\n          this.props.onUpload(this.state.file);\r\n        } else {\r\n          this.changeDisplayMessage(\"Upload Failed. Try Again Later.\");\r\n          this.props.onUpload(this.state.file); // DELETE: here for testing purposes\r\n        }\r\n      })\r\n      .catch((e: Error) => {\r\n        console.log(e);\r\n      });\r\n  }*/\r\n\r\n  changeDisplayMessage(newDisplayMessage: string) {\r\n    this.setState({ displayMessage: newDisplayMessage });\r\n  }\r\n\r\n  render() {\r\n    const { reUpload } = this.props;\r\n    const {\r\n      displayMessage,\r\n      displayVariant,\r\n      submitClicked,\r\n      buffering,\r\n      failedEncryption,\r\n      file,\r\n    } = this.state;\r\n    return (\r\n      <Form onSubmit={this.onFormSubmit.bind(this)}>\r\n        <Form.Group>\r\n          <div className=\"text-center mb-3\">Upload</div>\r\n\r\n          <Form.File\r\n            id=\"fileUpload\"\r\n            className=\"file-upload-form\"\r\n            label={\r\n              file && file.name !== \"\"\r\n                ? file.name\r\n                : reUpload\r\n                ? \"Change Your Upload\"\r\n                : \"Upload a New Letter\"\r\n            }\r\n            data-browse=\"Select\"\r\n            onChange={this.onChange}\r\n            custom\r\n          />\r\n\r\n          <div className=\"d-flex border-radius button-blur mb-2\">\r\n            {failedEncryption && (\r\n              <div className=\"flex-shrink-1 mt-4 mr-3\">\r\n                <OverlayTrigger\r\n                  overlay={\r\n                    <Tooltip id=\"learn-more\">\r\n                      <>\r\n                        <div>\r\n                          Please click <em>Provide</em> on Metamask. We need\r\n                          your <b>Public Key</b> to encrypt your letter. This\r\n                          keeps your letters secure so that only you can view\r\n                          it. See <b>End-to-End Encryption</b> in the FAQs.\r\n                        </div>\r\n                      </>\r\n                    </Tooltip>\r\n                  }\r\n                >\r\n                  <FontAwesomeIcon\r\n                    icon={faExclamationTriangle}\r\n                    color=\"yellow\"\r\n                    size=\"lg\"\r\n                    className=\"ml-3\"\r\n                  />\r\n                </OverlayTrigger>\r\n              </div>\r\n            )}\r\n\r\n            {submitClicked && (\r\n              <div className=\"flex-shrink-1 mt-4 mr-3\">\r\n                <OverlayTrigger\r\n                  overlay={\r\n                    <Tooltip id=\"learn-more\">\r\n                      <>\r\n                        {/* when file exists and submitClicked is going on (metamask prompt) */}\r\n                        {file && file.name !== \"\" && (\r\n                          <div>\r\n                            We use <b>Metamask</b> to get your <b>Public Key</b>{\" \"}\r\n                            which we use to encrypt your letter. This makes your\r\n                            letter secure so that only you can view it. See{\" \"}\r\n                            <b>End-to-End Encryption</b> in the FAQs.\r\n                          </div>\r\n                        )}\r\n\r\n                        {/* when submit button is clicked but no file uploaded */}\r\n                        {file && file.name === \"\" && (\r\n                          <div>\r\n                            Please Upload a <em>Valid</em> File. We keep your letter secure by\r\n                            submitClicked your letter with your{\" \"}\r\n                            <b>Public Key</b>. See <b>End-to-End Encryption</b>{\" \"}\r\n                            in the FAQs.\r\n                          </div>\r\n                        )}\r\n                      </>\r\n                    </Tooltip>\r\n                  }\r\n                >\r\n                  <FontAwesomeIcon\r\n                    icon={faInfoCircle}\r\n                    size=\"lg\"\r\n                    className=\"ml-3\"\r\n                  />\r\n                </OverlayTrigger>\r\n              </div>\r\n            )}\r\n\r\n            {displayVariant === 0 && (\r\n              <div className=\"text-white mt-4 flex-fill \">{displayMessage}</div>\r\n            )}\r\n            {displayVariant === 1 && (\r\n              <div className=\"text-warning mt-4 flex-fill \">\r\n                {displayMessage}\r\n              </div>\r\n            )}\r\n\r\n            {/* {buffering && (\r\n              <div className=\"d-flex justify-content-end\">\r\n                <Spinner\r\n                  className=\"mt-4 mr-3\"\r\n                  animation=\"border\"\r\n                  variant=\"secondary\"\r\n                />\r\n              </div>\r\n            )} */}\r\n\r\n            <Button\r\n              className=\"mt-3 mr-3 flex-shrink-1 float-right\"\r\n              variant=\"outline-light\"\r\n              onClick={this.onFormSubmit}\r\n            >\r\n              Submit\r\n            </Button>\r\n            <Button\r\n              className=\"mt-3 flex-shrink-1 float-right\"\r\n              variant=\"outline-light\"\r\n              onClick={(e: any) => {\r\n                this.props.onClose();\r\n              }}\r\n            >\r\n              Close\r\n            </Button>\r\n          </div>\r\n        </Form.Group>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FileUpload;\r\n","import Profile from \"./Profile\";\r\nexport default Profile;","import React from \"react\";\r\nimport { Button, Image, Card, Spinner } from \"react-bootstrap\";\r\nimport UserProfile from \"../../common/UserProfile.interface\";\r\nimport \"./Profile.css\";\r\n\r\ninterface ProfileProps {\r\n  user?: UserProfile;\r\n  onClose: () => void;\r\n}\r\ninterface ProfileState {}\r\n\r\nclass Profile extends React.Component<ProfileProps, ProfileState> {\r\n  componentWillMount() {\r\n    // make query for all other user information\r\n  }\r\n\r\n  constructor(props: ProfileProps) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const { user } = this.props;\r\n    return (\r\n      <div>\r\n        {user && (\r\n          <div className=\"d-flex mb-2\">\r\n            <Card className=\"flex-fill\">\r\n              <div className=\"m-2\">\r\n                <div className=\"\">Name: {user.name}</div>\r\n                {/* <div className=\"text-break\">ID: {user.publicAddress}</div> */}\r\n              </div>\r\n            </Card>\r\n            <div className=\"ml-4 flex-shrink-1 float-right image-card\">\r\n              <Image\r\n                className=\"profile-image\"\r\n                src=\"https://engineering.lehigh.edu/sites/engineering.lehigh.edu/files/styles/faculty_photo/public/korth.jpg?itok=GfxQ6zFl\"\r\n              />\r\n            </div>\r\n          </div>\r\n        )}\r\n        {!user && (\r\n          <div className=\"d-flex justify-content-center\">\r\n            <Spinner\r\n              className=\"float-right mt-4 mr-3\"\r\n              animation=\"border\"\r\n              variant=\"secondary\"\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        <Button\r\n          className=\"mt-3 float-right\"\r\n          onClick={(e: any) => {\r\n            this.props.onClose();\r\n          }}\r\n        >\r\n          Close\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport {\r\n  Modal,\r\n  Button,\r\n  Spinner,\r\n  Tooltip,\r\n  OverlayTrigger,\r\n} from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faInfoCircle, faExclamationTriangle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport LetterDetails from \"../../common/LetterDetails.interface\";\r\nimport UserProfile from \"../../common/UserProfile.interface\";\r\nimport FileData from \"../../common/FileData.interface\";\r\nimport Profile from \"../../components/Profile\";\r\nimport RequestBody from \"../../common/RequestBody.interface\";\r\nimport ResponseBody from \"../../common/ResponseBody.interface\";\r\nimport \"./FileView.css\";\r\nimport UserAuth from \"../../common/UserAuth.interface\";\r\n\r\ninterface FileViewProps {\r\n  user: UserAuth;\r\n  fileData?: FileData;\r\n  loadingView: boolean;\r\n  onClose: () => void;\r\n}\r\ninterface FileViewState {\r\n  profileIsOpen: boolean;\r\n  selectedPublicAddress: string;\r\n  selectedUserProfile?: UserProfile;\r\n}\r\n\r\nclass FileView extends React.Component<FileViewProps, FileViewState> {\r\n  constructor(props: FileViewProps) {\r\n    super(props);\r\n    this.state = {\r\n      profileIsOpen: false,\r\n      selectedPublicAddress: \"\",\r\n    };\r\n  }\r\n\r\n  openProfileModal(selectedPublicAddress: string) {\r\n    console.log(\"opening view modal\");\r\n    const fetchUrl = `/api/v1/users/${selectedPublicAddress}/profile`;\r\n    this.retrieveProfileFromServer(fetchUrl);\r\n  }\r\n\r\n  retrieveProfileFromServer(fetchUrl: string) {\r\n    const init: RequestInit = {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        auth: {\r\n          jwtToken: this.props.user.jwtToken,\r\n          publicAddress: this.props.user.publicAddress,\r\n        },\r\n        data: {},\r\n      }),\r\n    };\r\n\r\n    // get user profile from server\r\n    fetch(`${process.env.REACT_APP_BACKEND_URL}${fetchUrl}`, init)\r\n      .then((response) => {\r\n        response\r\n          .json()\r\n          .then((body: ResponseBody) => {\r\n            const data: UserProfile[] = body.data;\r\n            console.log(response);\r\n            if (data && data.length !== 0) {\r\n              this.setState({\r\n                selectedUserProfile: data[0],\r\n                profileIsOpen: true,\r\n              });\r\n            }\r\n          })\r\n          .catch((e: Error) => {\r\n            console.log(e);\r\n          });\r\n      })\r\n      .catch((e: Error) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  closeProfileModal() {\r\n    console.log(\"closing view modal\");\r\n    this.setState({ profileIsOpen: false });\r\n  }\r\n  render() {\r\n    const { fileData, loadingView } = this.props;\r\n    const { profileIsOpen } = this.state;\r\n    return (\r\n      <div>\r\n        <div className=\"mb-3\">\r\n          {fileData && (\r\n            <embed\r\n              type={fileData.letterType}\r\n              src={fileData.letterUrl}\r\n              width=\"100%\"\r\n              height=\"500px\"\r\n            />\r\n          )}\r\n          {!fileData && (\r\n            <>\r\n              {loadingView && (\r\n                <>\r\n                  {/* <div className=\"d-flex justify-content-center\">\r\n                    <Spinner\r\n                      className=\"mb-3 .absolute-center\"\r\n                      animation=\"border\"\r\n                      variant=\"secondary\"\r\n                    />\r\n                  </div> */}\r\n                  <div className=\"d-flex justify-content-center\">\r\n                    <OverlayTrigger\r\n                      placement=\"bottom\"\r\n                      overlay={\r\n                        <Tooltip id=\"learn-more\">\r\n                          <div>\r\n                            We use <b>Metamask</b> to retrieve your letter{\" \"}\r\n                            <em>securely</em>. Metamask uses your{\" \"}\r\n                            <b>Private Key</b> to decrypt the letter. Learn more\r\n                            about <b>Encryption / Decryption</b> in the FAQS.\r\n                          </div>\r\n                        </Tooltip>\r\n                      }\r\n                    >\r\n                      <FontAwesomeIcon\r\n                        icon={faInfoCircle}\r\n                        size=\"lg\"\r\n                        className=\"mr-3\"\r\n                      />\r\n                    </OverlayTrigger>\r\n                    <div>See Metamask to Retrieve Your Letter</div>\r\n                  </div>\r\n                </>\r\n              )}\r\n              {!loadingView && (\r\n                <div className=\"d-flex justify-content-center\">\r\n                  <OverlayTrigger\r\n                    placement=\"bottom\"\r\n                    overlay={\r\n                      <Tooltip id=\"learn-more\">\r\n                        <div>\r\n                          Please click <em>Decrypt</em> on Metamask to decrypt\r\n                          your letter. This is because we use end-to-end\r\n                          encryption to keep your letters secure. See{\" \"}\r\n                          <b>Encryption / Decryption</b> in the FAQs.\r\n                        </div>\r\n                      </Tooltip>\r\n                    }\r\n                  >\r\n                    <FontAwesomeIcon icon={faExclamationTriangle} size=\"lg\" />\r\n                  </OverlayTrigger>\r\n                  <div className=\"ml-3\">Failed to Decrypt</div>\r\n                </div>\r\n              )}\r\n            </>\r\n          )}\r\n        </div>\r\n\r\n        <Button\r\n          className=\"mt-3 float-right\"\r\n          onClick={(e: any) => {\r\n            this.props.onClose();\r\n          }}\r\n        >\r\n          Close\r\n        </Button>\r\n\r\n        <Modal\r\n          id=\"profile-modal\"\r\n          show={profileIsOpen}\r\n          onHide={this.closeProfileModal.bind(this)}\r\n          backdrop=\"static\"\r\n          animation={false}\r\n          className=\"modal\"\r\n          scrollable={false}\r\n          size=\"sm\"\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>User Profile</Modal.Title>\r\n          </Modal.Header>\r\n\r\n          <Modal.Body>\r\n            {this.state.selectedUserProfile && (\r\n              <Profile\r\n                user={this.state.selectedUserProfile}\r\n                onClose={this.closeProfileModal.bind(this)}\r\n              />\r\n            )}\r\n          </Modal.Body>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FileView;\r\n","import React from \"react\";\r\nimport { Button, Row, Col, Spinner, Form } from \"react-bootstrap\";\r\nimport UserAuth from \"../../common/UserAuth.interface\";\r\nimport \"./Confirm.css\";\r\n\r\ninterface ConfirmProps {\r\n  user: UserAuth;\r\n  custom: boolean;\r\n  onConfirm: (customMessage: string) => void;\r\n  onClose: () => void;\r\n}\r\ninterface ConfirmState {\r\n  confirmed: boolean;\r\n  customMessage: string;\r\n}\r\n\r\nclass Confirm extends React.Component<ConfirmProps, ConfirmState> {\r\n  constructor(props: ConfirmProps) {\r\n    super(props);\r\n    this.state = {\r\n      confirmed: false,\r\n      customMessage: \"\",\r\n    };\r\n  }\r\n\r\n  async handleMessageChange(event: any) {\r\n    const customMessage: string = event.target.value;\r\n    console.log(customMessage);\r\n    this.setState({ customMessage: customMessage });\r\n  }\r\n\r\n  render() {\r\n    const { custom } = this.props;\r\n    const { confirmed } = this.state;\r\n    return (\r\n      <Col>\r\n        {!custom && (<Row>Submit Your Request?</Row>)}\r\n        {custom && (<Row>\r\n          <Form.Group controlId=\"custom-message\" className=\"w-100\">\r\n            <Form.Label>Optional Custom Message</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"Type here . . . \"\r\n              onChange={this.handleMessageChange.bind(this)}\r\n            />\r\n            <Form.Text className=\"text-muted\">\r\n              This will be visible to the other user.\r\n            </Form.Text>\r\n          </Form.Group>\r\n        </Row>)}\r\n        <Row className=\"d-flex justify-content-end\">\r\n          <div className=\"mt-3 mr-3\">\r\n            {confirmed && <Spinner animation=\"border\" variant=\"secondary\" />}\r\n          </div>\r\n          <Button\r\n            disabled={confirmed}\r\n            className=\"mt-3 mr-3 flex-shrink-1\"\r\n            onClick={(e: any) => {\r\n              this.setState({ confirmed: true });\r\n              this.props.onConfirm(this.state.customMessage);\r\n            }}\r\n          >\r\n            Confirm\r\n          </Button>\r\n          <Button\r\n            className=\"mt-3 flex-shrink-1\"\r\n            onClick={(e: any) => {\r\n              this.props.onClose();\r\n            }}\r\n          >\r\n            Back\r\n          </Button>\r\n        </Row>\r\n      </Col>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Confirm;\r\n","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Row,\r\n  Col,\r\n  Spinner,\r\n  Card,\r\n  Collapse,\r\n  Form,\r\n  OverlayTrigger,\r\n  Tooltip,\r\n} from \"react-bootstrap\";\r\nimport UserAuth from \"../../common/UserAuth.interface\";\r\nimport UserKey from \"../../common/UserKey.interface\";\r\nimport FileData from \"../../common/FileData.interface\";\r\nimport Letter from \"../../common/LetterDetails.interface\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCheckSquare } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faInfoCircle, faExclamationTriangle } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport CryptService from \"../../services/CryptService\";\r\n\r\nimport \"./Send.css\";\r\n\r\ninterface SendProps {\r\n  user: UserAuth;\r\n  letter: Letter;\r\n  unsentRecipientKeys: UserKey[];\r\n  onClose: () => void;\r\n}\r\ninterface SendState {\r\n  loadingContents: boolean;\r\n  failedLoad: boolean;\r\n  signingLetter: boolean;\r\n  failedSigning: boolean;\r\n  sending: boolean;\r\n  sendSuccess: boolean;\r\n  encrypted: boolean[];\r\n  encryptedLetter?: FileData;\r\n}\r\n\r\nclass Send extends React.Component<SendProps, SendState> {\r\n  private cryptService: CryptService;\r\n  constructor(props: SendProps) {\r\n    super(props);\r\n\r\n    let e = [];\r\n    const keys = this.props.unsentRecipientKeys;\r\n    if (keys) {\r\n      for (let i = 0; i < keys.length; i++) {\r\n        e.push(false);\r\n      }\r\n    }\r\n    console.log(e);\r\n    console.log(keys);\r\n\r\n    this.state = {\r\n      loadingContents: true,\r\n      failedLoad: false,\r\n      signingLetter: false,\r\n      failedSigning: false,\r\n      sending: false,\r\n      sendSuccess: false,\r\n      encrypted: e,\r\n    };\r\n    this.cryptService = new CryptService();\r\n  }\r\n\r\n  async componentDidMount() {\r\n    let fetchUrl = `/api/v1/letters/${this.props.letter.letterId}/contents/writer`;\r\n    let url = await this.getLetterContents(\r\n      this.props.letter.letterId,\r\n      fetchUrl\r\n    );\r\n  }\r\n\r\n  async encryptSignAndUpload(key: number, userKey: UserKey) {\r\n    this.setState({ failedLoad: false, failedSigning: false, sendSuccess: false, });\r\n    try {\r\n      console.log(\"Pub key is: \" + userKey.publicKey);\r\n      console.log(\"State url: \" + this.state.encryptedLetter);\r\n\r\n      if (!this.state.encryptedLetter) return;\r\n\r\n      // this does not prompt the user with metamask\r\n      let encryptedLetter = await this.cryptService.encryptSend(\r\n        this.state.encryptedLetter,\r\n        userKey.publicKey\r\n      );\r\n      console.log(\"Encrypted letter: \" + encryptedLetter);\r\n\r\n      this.setState({ signingLetter: true });\r\n\r\n      // this padding is necessary for correct signature and verification of encrypted recipient letters\r\n      // the first 10 characters are 'encrypted:'\r\n      let signedLetter = await this.cryptService.signLetter(\r\n        \"encrypted:\" + encryptedLetter,\r\n        this.props.user.publicAddress\r\n      );\r\n      this.setState({ signingLetter: false });\r\n      console.log(\"Signed letter: \" + signedLetter);\r\n\r\n      const encryptedLetterForm: {\r\n        letterContents: string;\r\n        letterSignature: string;\r\n        letterRecipient: string;\r\n      } = {\r\n        letterContents: encryptedLetter,\r\n        letterSignature: signedLetter,\r\n        letterRecipient: userKey.publicAddress,\r\n      };\r\n\r\n      this.setState({ sending: true });\r\n\r\n      const fetchUrl = `/api/v1/letters/${this.props.letter.letterId}/recipientContents/update`;\r\n      const success = await this.uploadEncryptedLetterForm(\r\n        fetchUrl,\r\n        encryptedLetterForm\r\n      );\r\n      // const success = true;\r\n      // check if letter sent successfully\r\n      if (success) {\r\n        let encrypted = [...this.state.encrypted];\r\n        encrypted[key] = true;\r\n        this.setState({\r\n          encrypted: encrypted,\r\n          sending: false,\r\n          sendSuccess: true,\r\n        });\r\n      } else {\r\n        this.setState({\r\n          sending: false,\r\n        });\r\n      }\r\n    } catch (e) {\r\n      if (this.state.signingLetter) {\r\n        // user likely canceled the metamask signing transaction\r\n        console.log(\"failed signing\");\r\n        this.setState({\r\n          signingLetter: false,\r\n          sending: false,\r\n          failedSigning: true,\r\n        });\r\n      } else if (this.state.sending) {\r\n        // possible network error?\r\n        console.log(\"failed upload\");\r\n        this.setState({\r\n          signingLetter: false,\r\n          sending: false,\r\n        });\r\n      } else {\r\n        // maybe something wrong with the key (yikes)\r\n        console.log(\"failed encryption or other\");\r\n        this.setState({\r\n          signingLetter: false,\r\n          sending: false,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  async uploadEncryptedLetterForm(\r\n    fetchUrl: string,\r\n    encryptedLetterForm: {\r\n      letterContents: string;\r\n      letterSignature: string;\r\n    }\r\n  ) {\r\n    const init: RequestInit = {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        auth: {\r\n          jwtToken: this.props.user.jwtToken,\r\n          publicAddress: this.props.user.publicAddress,\r\n        },\r\n        data: encryptedLetterForm,\r\n      }),\r\n    };\r\n\r\n    try {\r\n      let response = await fetch(\r\n        `${process.env.REACT_APP_BACKEND_URL}${fetchUrl}`,\r\n        init\r\n      );\r\n      if (response.status === 400) {\r\n        console.log(response.status);\r\n        return false;\r\n      } else {\r\n        // let body = await response.json();\r\n        return true;\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async getLetterContents(id: string, fetchUrl: string) {\r\n    console.log(\"Letter Id: \" + id);\r\n    const init: RequestInit = {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        auth: {\r\n          jwtToken: this.props.user.jwtToken,\r\n          publicAddress: this.props.user.publicAddress,\r\n        },\r\n        data: {},\r\n      }),\r\n    };\r\n    const letterId = id;\r\n    // get letter from server\r\n    fetch(`${process.env.REACT_APP_BACKEND_URL}${fetchUrl}`, init)\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((body) => {\r\n        const encryptedLetter: string = body.data;\r\n        if (encryptedLetter) {\r\n          //return encryptedLetter;\r\n          this.cryptService\r\n            .decrypt(encryptedLetter, this.props.user.publicAddress)\r\n            .then((fileData) => {\r\n              if (fileData) {\r\n                this.setState({\r\n                  encryptedLetter: fileData,\r\n                  loadingContents: false,\r\n                });\r\n              }\r\n            })\r\n            .catch((e: Error) => {\r\n              console.log(\"failed to decrypt letter\");\r\n              this.setState({\r\n                loadingContents: false,\r\n                failedLoad: true,\r\n              });\r\n            });\r\n        } else {\r\n          console.log(\"Letter retrieval in send failed\");\r\n        }\r\n      })\r\n      .catch((e: Error) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { user, letter, unsentRecipientKeys } = this.props;\r\n    const {\r\n      loadingContents,\r\n      failedLoad,\r\n      signingLetter,\r\n      failedSigning,\r\n      sending,\r\n      sendSuccess,\r\n      encrypted,\r\n    } = this.state;\r\n\r\n    let recipientList = [];\r\n    if (unsentRecipientKeys) {\r\n      for (let i = 0; i < unsentRecipientKeys.length; i += 2) {\r\n        recipientList.push(\r\n          <Row>\r\n            <Col>\r\n              <Card className=\"full-width opacity-0 mt-3\">\r\n                <div className=\"d-flex justify-content-between\">\r\n                  <Card.Header\r\n                    className=\"flex-fill send-entry\"\r\n                    onClick={() => {\r\n                      if (!encrypted[i]) {\r\n                        this.encryptSignAndUpload(i, unsentRecipientKeys[i]);\r\n                      }\r\n                    }}\r\n                  >\r\n                    {unsentRecipientKeys[i].name}\r\n                  </Card.Header>\r\n\r\n                  {encrypted[i] && (\r\n                    <OverlayTrigger\r\n                      placement=\"bottom\"\r\n                      overlay={\r\n                        <Tooltip id=\"learn-more\">\r\n                          <div>Letter has been sent!</div>\r\n                        </Tooltip>\r\n                      }\r\n                    >\r\n                      <FontAwesomeIcon\r\n                        icon={faCheckSquare}\r\n                        size=\"lg\"\r\n                        className=\"send-check-square\"\r\n                      />\r\n                    </OverlayTrigger>\r\n                  )}\r\n                  {!encrypted[i] && (\r\n                    <div className=\"send-check-square-placeholder\"></div>\r\n                  )}\r\n                </div>\r\n              </Card>\r\n            </Col>\r\n            {i + 1 < unsentRecipientKeys.length && (\r\n              <Col>\r\n                <Card className=\"full-width opacity-0 mt-3\">\r\n                  <div className=\"d-flex justify-content-between\">\r\n                    <Card.Header\r\n                      className=\"flex-fill send-entry\"\r\n                      onClick={() => {\r\n                        if (!encrypted[i + 1]) {\r\n                          this.encryptSignAndUpload(\r\n                            i + 1,\r\n                            unsentRecipientKeys[i + 1]\r\n                          );\r\n                        }\r\n                      }}\r\n                    >\r\n                      {unsentRecipientKeys[i + 1].name}\r\n                    </Card.Header>\r\n                    {encrypted[i + 1] && (\r\n                      <OverlayTrigger\r\n                        placement=\"bottom\"\r\n                        overlay={\r\n                          <Tooltip id=\"learn-more\">\r\n                            <div>Letter has been sent!</div>\r\n                          </Tooltip>\r\n                        }\r\n                      >\r\n                        <FontAwesomeIcon\r\n                          icon={faCheckSquare}\r\n                          size=\"lg\"\r\n                          className=\"send-check-square\"\r\n                        />\r\n                      </OverlayTrigger>\r\n                    )}\r\n                    {!encrypted[i + 1] && (\r\n                      <div className=\"send-check-square-placeholder\"></div>\r\n                    )}\r\n                  </div>\r\n                </Card>\r\n              </Col>\r\n            )}\r\n\r\n            {i + 1 >= unsentRecipientKeys.length && (\r\n              <Col>\r\n                <Card className=\"full-width opacity-0 mt-3\">\r\n                  <div className=\"send-placeholder\"></div>\r\n                </Card>\r\n              </Col>\r\n            )}\r\n          </Row>\r\n        );\r\n      }\r\n    }\r\n\r\n    return (\r\n      <>\r\n        {!loadingContents && failedLoad && (\r\n          <div className=\"d-flex justify-content-center mb-3\">\r\n            <OverlayTrigger\r\n              placement=\"bottom\"\r\n              overlay={\r\n                <Tooltip id=\"learn-more\">\r\n                  <div>\r\n                    Please click <em>Decrypt</em> on Metamask to retrieve your\r\n                    encrypted letter. This is because we use Metamask to keep\r\n                    your letters <b>secure</b> and need to decrypt it before we\r\n                    can send it. This is step 1 of 3-step process. Learn more in\r\n                    the FAQs.\r\n                  </div>\r\n                </Tooltip>\r\n              }\r\n            >\r\n              <FontAwesomeIcon icon={faExclamationTriangle} size=\"lg\" />\r\n            </OverlayTrigger>\r\n            <div className=\"ml-3\">Failed to Retrieve Your Letter</div>\r\n          </div>\r\n        )}\r\n        {!loadingContents && !failedLoad && (\r\n          <Col>\r\n            {unsentRecipientKeys && (\r\n              <>\r\n                {/* <Row className=\"mb-2\">Select a Recipient:</Row> */}\r\n                <Row>\r\n                  <Col>{recipientList}</Col>\r\n                </Row>\r\n              </>\r\n            )}\r\n            {(!unsentRecipientKeys || unsentRecipientKeys.length === 0) && (\r\n              <Row className=\"d-flex justify-content-center\">\r\n                <Spinner\r\n                  className=\"float-right mt-4 mr-3\"\r\n                  animation=\"border\"\r\n                  variant=\"secondary\"\r\n                />\r\n              </Row>\r\n            )}\r\n            <Row className=\"d-flex justify-content-between\">\r\n              <div className=\"d-flex justify-content-between mt-4 ml-4 text-info float-left flex-fill\">\r\n                {signingLetter && !sending && (\r\n                  <div className=\"d-flex justify-content-between\">\r\n                    <OverlayTrigger\r\n                      placement=\"bottom\"\r\n                      overlay={\r\n                        <Tooltip id=\"learn-more\">\r\n                          <div>\r\n                            We ask you to <b>sign</b> your letter as{\" \"}\r\n                            <b>proof</b> that this letter is from you. Your{\" \"}\r\n                            <b>signature</b> will give the recipient confidence\r\n                            that the letter is authentic. Learn more about{\" \"}\r\n                            <b>Signing / Verification</b> in the FAQS.\r\n                          </div>\r\n                        </Tooltip>\r\n                      }\r\n                    >\r\n                      <FontAwesomeIcon\r\n                        icon={faInfoCircle}\r\n                        size=\"lg\"\r\n                        className=\"mr-3\"\r\n                      />\r\n                    </OverlayTrigger>\r\n                    <div>See Metamask to Sign Your Letter</div>\r\n                  </div>\r\n                )}\r\n                {failedSigning && !sending && !signingLetter && (\r\n                  <div className=\"d-flex justify-content-between\">\r\n                    <OverlayTrigger\r\n                      placement=\"bottom\"\r\n                      overlay={\r\n                        <Tooltip id=\"learn-more\">\r\n                          <div>\r\n                            Please click <em>Sign</em> on Metamask to sign your\r\n                            letter. Your <b>signature</b> will give the\r\n                            recipient confidence that the letter is authentic.\r\n                            Learn more about <b>Signing / Verification</b> in\r\n                            the FAQS.\r\n                          </div>\r\n                        </Tooltip>\r\n                      }\r\n                    >\r\n                      <FontAwesomeIcon icon={faInfoCircle} size=\"lg\" />\r\n                    </OverlayTrigger>\r\n                    <div className=\"ml-3\">Failed to Sign Your Letter</div>\r\n                  </div>\r\n                )}\r\n\r\n                {sending && !signingLetter && (\r\n                  <div className=\"d-flex justify-content-between\">\r\n                    <OverlayTrigger\r\n                      placement=\"bottom\"\r\n                      overlay={\r\n                        <Tooltip id=\"learn-more\">\r\n                          <div>\r\n                            Verifying your encrypted letter and the signature.\r\n                            Your <b>signature</b> will give the recipient\r\n                            confidence that the letter is authentic. Learn more\r\n                            about <b>Signing / Verification</b> in the FAQS.\r\n                          </div>\r\n                        </Tooltip>\r\n                      }\r\n                    >\r\n                      <FontAwesomeIcon\r\n                        icon={faInfoCircle}\r\n                        size=\"lg\"\r\n                        className=\"mr-3\"\r\n                      />\r\n                    </OverlayTrigger>\r\n                    <div> Sending Your Letter . . . </div>\r\n                  </div>\r\n                )}\r\n                {sendSuccess && !sending && !signingLetter && (\r\n                  <div className=\"d-flex justify-content-between\">\r\n                    <OverlayTrigger\r\n                      placement=\"bottom\"\r\n                      overlay={\r\n                        <Tooltip id=\"learn-more\">\r\n                          <div>\r\n                            Your letter has been sent! You can continue to send\r\n                            letters to recipients or click <b>Close</b> to\r\n                            finish the session. Learn more in the FAQS.\r\n                          </div>\r\n                        </Tooltip>\r\n                      }\r\n                    >\r\n                      <FontAwesomeIcon\r\n                        icon={faInfoCircle}\r\n                        size=\"lg\"\r\n                        className=\"mr-3\"\r\n                      />\r\n                    </OverlayTrigger>\r\n                    <div>Your letter has been sent!</div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n              <div className=\"mt-3 mr-3 flex-shrink-1\">\r\n                {sending && <Spinner animation=\"border\" variant=\"secondary\" />}\r\n              </div>\r\n              <Button\r\n                className=\"mt-3 flex-shrink-1\"\r\n                onClick={(e: any) => {\r\n                  this.props.onClose();\r\n                }}\r\n              >\r\n                Close\r\n              </Button>\r\n            </Row>\r\n          </Col>\r\n        )}\r\n\r\n        {loadingContents && (\r\n          <>\r\n            {/* <div className=\"d-flex justify-content-center mb-3\">\r\n              <Spinner\r\n                className=\"mb-3\"\r\n                animation=\"border\"\r\n                variant=\"secondary\"\r\n              />\r\n            </div> */}\r\n            <div className=\"d-flex justify-content-center mb-3\">\r\n              <OverlayTrigger\r\n                placement=\"bottom\"\r\n                overlay={\r\n                  <Tooltip id=\"learn-more\">\r\n                    <div>\r\n                      We use Metamask to keep your letters <b>secure</b> and{\" \"}\r\n                      <b>verifiable</b>. To send your letter, we must 1.\r\n                      Retrieve and Decrypt your letter. 2. Encrypt your letter (\r\n                      <em>w/ the Recipient's key</em>) 3. Sign the Letter. Learn\r\n                      more about this proces in the FAQs.\r\n                    </div>\r\n                  </Tooltip>\r\n                }\r\n              >\r\n                <FontAwesomeIcon icon={faInfoCircle} size=\"lg\" />\r\n              </OverlayTrigger>\r\n              <div className=\"ml-3\">See Metamask to start sending</div>\r\n            </div>\r\n          </>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default Send;\r\n","import FileHistory from \"./FileHistory\";\r\nexport default FileHistory;","import React from \"react\";\r\nimport {\r\n  Card,\r\n  Collapse,\r\n  Col,\r\n  Row,\r\n  Button,\r\n  Modal,\r\n  OverlayTrigger,\r\n  Tooltip,\r\n} from \"react-bootstrap\";\r\nimport \"./FileHistory.css\";\r\nimport LetterHistory from \"../../common/LetterHistory.interface\";\r\nimport UserProfile from \"../../common/UserProfile.interface\";\r\nimport Profile from \"../../components/Profile\";\r\nimport RequestBody from \"../../common/RequestBody.interface\";\r\nimport ResponseBody from \"../../common/ResponseBody.interface\";\r\nimport User from \"../../common/User.interface\";\r\nimport UserAuth from \"../../common/UserAuth.interface\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\ninterface FileHistoryProps {\r\n  user: UserAuth;\r\n  history: LetterHistory[];\r\n  onClose: () => void;\r\n}\r\ninterface FileHistoryState {\r\n  collapseIsOpen: boolean[];\r\n  profileIsOpen: boolean;\r\n  selectedUserProfile?: UserProfile;\r\n}\r\n\r\nclass FileHistory extends React.Component<FileHistoryProps, FileHistoryState> {\r\n  private userProfiles: Map<string, UserProfile>;\r\n\r\n  constructor(props: FileHistoryProps) {\r\n    super(props);\r\n\r\n    let collapseIsOpen = [];\r\n    for (let i = 0; i < this.props.history.length; i++) {\r\n      collapseIsOpen.push(false);\r\n    }\r\n\r\n    this.state = {\r\n      collapseIsOpen: collapseIsOpen,\r\n      profileIsOpen: false,\r\n    };\r\n\r\n    this.userProfiles = new Map<string, UserProfile>();\r\n  }\r\n\r\n  async closeProfileModal() {\r\n    console.log(\"closing profile modal\");\r\n    this.setState({ profileIsOpen: false });\r\n  }\r\n\r\n  async openProfileModal(publicAddress: string) {\r\n    console.log(\"opening profile modal\");\r\n    const userProfile = this.userProfiles.get(publicAddress);\r\n    console.log(userProfile);\r\n    if (userProfile === undefined) {\r\n      const fetchUrl = `/api/v1/users/${publicAddress}/profile`;\r\n      this.retrieveProfileFromServer(fetchUrl);\r\n    } else {\r\n      this.setState({ selectedUserProfile: userProfile, profileIsOpen: true });\r\n    }\r\n  }\r\n\r\n  async retrieveProfileFromServer(fetchUrl: string) {\r\n    const init: RequestInit = {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        auth: {\r\n          jwtToken: this.props.user.jwtToken,\r\n          publicAddress: this.props.user.publicAddress,\r\n        },\r\n        data: {},\r\n      }),\r\n    };\r\n\r\n    // get user profile from server\r\n    try {\r\n      let response = await fetch(\r\n        `${process.env.REACT_APP_BACKEND_URL}${fetchUrl}`,\r\n        init\r\n      );\r\n      let body = await response.json();\r\n\r\n      const data: UserProfile[] = body.data;\r\n      console.log(response);\r\n      console.log(data);\r\n      if (data && data.length !== 0) {\r\n        this.userProfiles.set(data[0].publicAddress, data[0]);\r\n        this.setState({\r\n          profileIsOpen: true,\r\n          selectedUserProfile: data[0],\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { history } = this.props;\r\n    const { profileIsOpen, collapseIsOpen } = this.state;\r\n\r\n    let historyList = [];\r\n    for (let i = 0; i < history.length; i += 2) {\r\n      historyList.push(\r\n        <Row>\r\n          <Col>\r\n            <Card className=\"full-width opacity-0 mt-3\">\r\n              <div className=\"d-flex justify-content-between\">\r\n                <OverlayTrigger\r\n                  placement=\"top\"\r\n                  overlay={\r\n                    <Tooltip id=\"history-entries\">\r\n                      {!collapseIsOpen[i] ? \"See history details\" : \"Close details\"}\r\n                    </Tooltip>\r\n                  }\r\n                >\r\n                  <Card.Header\r\n                    className=\"flex-fill history-entry\"\r\n                    onClick={() => {\r\n                      let c = [...collapseIsOpen];\r\n                      c[i] = !c[i];\r\n                      this.setState({ collapseIsOpen: c });\r\n                    }}\r\n                  >\r\n                    {history[i].letterRecipient.name}\r\n                  </Card.Header>\r\n                </OverlayTrigger>\r\n                <OverlayTrigger\r\n                  placement=\"top\"\r\n                  overlay={\r\n                    <Tooltip id=\"main-buttons\">\r\n                      <div>\r\n                        View {history[i].letterRecipient.name}'s profile\r\n                      </div>\r\n                    </Tooltip>\r\n                  }\r\n                >\r\n                  <Card.Header\r\n                    className=\"flex-shrink-1 history-collapse-button\"\r\n                    onClick={() => {\r\n                      this.openProfileModal(\r\n                        history[i].letterRecipient.publicAddress\r\n                      );\r\n                    }}\r\n                  />\r\n                </OverlayTrigger>\r\n              </div>\r\n            </Card>\r\n            <Collapse in={collapseIsOpen[i]}>\r\n              <div className=\"body-text text-white-50\">\r\n                Sent At: {history[i].sentAt}\r\n              </div>\r\n            </Collapse>\r\n          </Col>\r\n          {i + 1 < history.length && (\r\n            <Col>\r\n              <Card className=\"full-width opacity-0 mt-3\">\r\n                <div className=\"d-flex justify-content-between\">\r\n                  <OverlayTrigger\r\n                    placement=\"top\"\r\n                    overlay={\r\n                      <Tooltip id=\"main-buttons\">\r\n                        {!collapseIsOpen[i + 1] ? \"See history details\" : \"Close details\"}\r\n                      </Tooltip>\r\n                    }\r\n                  >\r\n                    <Card.Header\r\n                      className=\"flex-fill history-entry\"\r\n                      onClick={() => {\r\n                        let c = [...collapseIsOpen];\r\n                        c[i + 1] = !c[i + 1];\r\n                        this.setState({ collapseIsOpen: c });\r\n                      }}\r\n                    >\r\n                      {history[i + 1].letterRecipient.name}\r\n                    </Card.Header>\r\n                  </OverlayTrigger>\r\n                  <OverlayTrigger\r\n                    placement=\"top\"\r\n                    overlay={\r\n                      <Tooltip id=\"main-buttons\">\r\n                        <div>\r\n                          View {history[i + 1].letterRecipient.name}'s profile\r\n                        </div>\r\n                      </Tooltip>\r\n                    }\r\n                  >\r\n                    <Card.Header\r\n                      className=\"flex-shrink-1 history-collapse-button\"\r\n                      onClick={() => {\r\n                        this.openProfileModal(\r\n                          history[i + 1].letterRecipient.publicAddress\r\n                        );\r\n                      }}\r\n                    />\r\n                  </OverlayTrigger>\r\n                </div>\r\n              </Card>\r\n              <Collapse in={collapseIsOpen[i + 1]}>\r\n                <div className=\"body-text text-white-50\">\r\n                  Sent At: {history[i + 1].sentAt}\r\n                </div>\r\n              </Collapse>\r\n            </Col>\r\n          )}\r\n\r\n          {i + 1 >= history.length && (\r\n            <Col>\r\n              <Card className=\"full-width opacity-0 mt-3\"></Card>\r\n              <Card.Header className=\"d-flex justify-content-between history-placeholder\"></Card.Header>\r\n            </Col>\r\n          )}\r\n        </Row>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"button-blur\">\r\n        {history.length === 0 && (\r\n          <Col>\r\n            <Row>\r\n              <h5 className=\"w-100 text-center\">No History</h5>\r\n            </Row>\r\n          </Col>\r\n        )}\r\n        {history.length !== 0 && (\r\n          <>\r\n            <Col>\r\n              <Row>\r\n                <h5>History</h5>\r\n              </Row>\r\n              <Row>\r\n                <Col className=\"history-display\">{historyList}</Col>\r\n              </Row>\r\n              <Row className=\"d-flex mb-2\">\r\n                <div className=\"mt-5 flex-shrink-1\">\r\n                  <OverlayTrigger\r\n                    placement=\"right\"\r\n                    overlay={\r\n                      <Tooltip id=\"learn-more\">\r\n                        <div>\r\n                          Your letter <b>History</b> indicates <em>who</em> your\r\n                          letter has been sent to. You may view the profile of\r\n                          each recipient. See more in the FAQs.\r\n                        </div>\r\n                      </Tooltip>\r\n                    }\r\n                  >\r\n                    <FontAwesomeIcon icon={faInfoCircle} size=\"lg\" />\r\n                  </OverlayTrigger>\r\n                </div>\r\n                <div className=\"flex-fill\"></div>\r\n                <OverlayTrigger\r\n                  overlay={\r\n                    <Tooltip id=\"tooltip\">\r\n                      Close letter history\r\n                    </Tooltip>\r\n                  }\r\n                >\r\n                  <Button\r\n                    className=\"mt-3 float-right flex-shrink-1\"\r\n                    variant=\"outline-light\"\r\n                    onClick={(e: any) => {\r\n                      this.props.onClose();\r\n                    }}\r\n                  >\r\n                    Close\r\n                  </Button>\r\n                </OverlayTrigger>\r\n              </Row>\r\n            </Col>\r\n\r\n            <Modal\r\n              id=\"profile-modal\"\r\n              show={profileIsOpen}\r\n              onHide={this.closeProfileModal.bind(this)}\r\n              // backdrop=\"static\"\r\n              animation={false}\r\n              className=\"modal\"\r\n              scrollable={false}\r\n              // size=\"sm\"\r\n            >\r\n              <Modal.Header closeButton>\r\n                <Modal.Title>\r\n                  {this.state.selectedUserProfile?.name}\r\n                </Modal.Title>\r\n              </Modal.Header>\r\n\r\n              <Modal.Body>\r\n                {this.state.selectedUserProfile && (\r\n                  <Profile\r\n                    user={this.state.selectedUserProfile}\r\n                    onClose={this.closeProfileModal.bind(this)}\r\n                  />\r\n                )}\r\n              </Modal.Body>\r\n            </Modal>\r\n          </>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FileHistory;\r\n","import React from \"react\";\r\nimport { Fragment } from \"react\";\r\nimport {\r\n  Card,\r\n  Button,\r\n  Spinner,\r\n  Modal,\r\n  Collapse,\r\n  Col,\r\n  Row,\r\n  Tooltip,\r\n  OverlayTrigger,\r\n} from \"react-bootstrap\";\r\nimport UserProfile from \"../common/UserProfile.interface\";\r\nimport UserAuth from \"../common/UserAuth.interface\";\r\nimport UserKey from \"../common/UserKey.interface\";\r\nimport User from \"../common/User.interface\";\r\nimport LetterHistory from \"../common/LetterHistory.interface\";\r\nimport RequestBody from \"../common/RequestBody.interface\";\r\nimport ResponseBody from \"../common/ResponseBody.interface\";\r\nimport \"./WriterLetterDisplay.css\";\r\nimport LetterDetails from \"../common/LetterDetails.interface\";\r\n\r\nimport FileData from \"../common/FileData.interface\";\r\nimport CryptService from \"../services/CryptService\";\r\nimport CacheService from \"../services/CacheService\";\r\n\r\nimport FileUpload from \"../components/FileUpload/FileUpload\";\r\nimport FileView from \"../components/FileView/FileView\";\r\nimport Confirm from \"../components/Confirm/Confirm\";\r\nimport Send from \"../components/Send/Send\";\r\nimport FileHistory from \"../components/FileHistory\";\r\nimport Profile from \"../components/Profile\";\r\n\r\ninterface WriterLetterDisplayProps {\r\n  user: UserAuth;\r\n  letter: LetterDetails;\r\n  numRecipients: Number;\r\n  numUnsentRecipients: Number;\r\n  onReload(): Promise<void>;\r\n}\r\ninterface WriterLetterDisplayState {\r\n  history: LetterHistory[];\r\n  loadingHistory: boolean;\r\n  loadingView: boolean;\r\n  loadingSend: boolean;\r\n  profileIsOpen: boolean;\r\n  historyIsOpen: boolean;\r\n  messageIsOpen: boolean;\r\n  uploadIsOpen: boolean;\r\n  sendIsOpen: boolean;\r\n  viewIsOpen: boolean;\r\n  confirmIsOpen: boolean;\r\n  collapseIsOpen: boolean;\r\n  selectedUserProfile?: UserProfile;\r\n  uploadedFile?: string;\r\n  fileData?: FileData;\r\n  unsentRecipientKeys: UserKey[];\r\n}\r\n\r\nclass WriterLetterDisplay extends React.Component<\r\n  WriterLetterDisplayProps,\r\n  WriterLetterDisplayState\r\n> {\r\n  private uploadModal = React.createRef<FileUpload>();\r\n  private viewModal = React.createRef<FileView>();\r\n  private userProfiles: Map<string, UserProfile>;\r\n  private cryptService: CryptService;\r\n  private cacheService: CacheService<string, string>;\r\n\r\n  constructor(props: WriterLetterDisplayProps) {\r\n    super(props);\r\n    this.state = {\r\n      history: [],\r\n      unsentRecipientKeys: [],\r\n      loadingHistory: false,\r\n      loadingView: false,\r\n      loadingSend: false,\r\n      profileIsOpen: false,\r\n      historyIsOpen: false,\r\n      messageIsOpen: false,\r\n      uploadIsOpen: false,\r\n      sendIsOpen: false,\r\n      viewIsOpen: false,\r\n      confirmIsOpen: false,\r\n      collapseIsOpen: false,\r\n    };\r\n\r\n    this.userProfiles = new Map<string, UserProfile>();\r\n    this.cryptService = new CryptService();\r\n    this.cacheService = new CacheService(1);\r\n  }\r\n\r\n  async openUploadModal() {\r\n    console.log(\"opening upload modal\");\r\n    this.setState({\r\n      uploadIsOpen: true,\r\n      collapseIsOpen: true,\r\n    });\r\n  }\r\n\r\n  async onUploadSubmit(customMessage: string) {\r\n    const fetchUrl = `/api/v1/letters/${this.props.letter.letterId}/contents/update`;\r\n    if (this.state.uploadedFile !== undefined) {\r\n      await this.uploadContentsToServer(\r\n        this.state.uploadedFile,\r\n        fetchUrl,\r\n        customMessage\r\n      );\r\n    }\r\n  }\r\n\r\n  async closeUploadModal() {\r\n    console.log(\"closing upload modal\");\r\n    this.setState({\r\n      confirmIsOpen: false,\r\n      uploadIsOpen: false,\r\n      collapseIsOpen: this.state.historyIsOpen,\r\n    });\r\n  }\r\n\r\n  async uploadContentsToServer(\r\n    encryptedFile: string,\r\n    fetchUrl: string,\r\n    customMessage: string\r\n  ) {\r\n    console.log(\"uploading to server\");\r\n    // console.log(file);\r\n\r\n    // cache encrypted file\r\n    // this.cacheService.put(this.props.letter.letterId, encryptedFile);\r\n    // console.log(\"put encryptedFile into memcache\");\r\n\r\n    // post encrypted file to server\r\n    fetch(`${process.env.REACT_APP_BACKEND_URL}${fetchUrl}`, {\r\n      body: JSON.stringify({\r\n        auth: {\r\n          publicAddress: this.props.user.publicAddress,\r\n          jwtToken: this.props.user.jwtToken,\r\n        },\r\n        data: {\r\n          customMessage: customMessage,\r\n          encryptedFile: encryptedFile,\r\n        },\r\n      }),\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n      method: \"POST\",\r\n    })\r\n      .then((response: any) => {\r\n        console.log(response.status);\r\n        if (response.status === 200) {\r\n          this.closeUploadModal();\r\n          this.props.onReload();\r\n        } else {\r\n          this.uploadModal.current!.changeDisplayMessage(\r\n            \"Upload Failed. Try Again Later.\"\r\n          );\r\n        }\r\n      })\r\n      .catch((e: Error) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  async openSendModal() {\r\n    this.setState({ sendIsOpen: true });\r\n    if (\r\n      this.props.numUnsentRecipients > 0 &&\r\n      this.props.letter.uploadedAt !== null\r\n    ) {\r\n      const fetchUrl = `/api/v1/letters/${this.props.letter.letterId}/unsentRecipientKeys`;\r\n      this.retrieveUnsentRecipientKeysFromServer(fetchUrl);\r\n    }\r\n  }\r\n\r\n  async closeSendModal() {\r\n    this.setState({ sendIsOpen: false });\r\n  }\r\n\r\n  async onSendSubmit() {\r\n    // closed send and repopulate letter list; can be optimized\r\n    this.closeSendModal();\r\n    this.props.onReload();\r\n  }\r\n\r\n  async retrieveUnsentRecipientKeysFromServer(fetchUrl: string) {\r\n    const init: RequestInit = {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        auth: {\r\n          jwtToken: this.props.user.jwtToken,\r\n          publicAddress: this.props.user.publicAddress,\r\n        },\r\n        data: {},\r\n      }),\r\n    };\r\n\r\n    try {\r\n      let response = await fetch(\r\n        `${process.env.REACT_APP_BACKEND_URL}${fetchUrl}`,\r\n        init\r\n      );\r\n      if (response.status === 400) {\r\n        console.log(response.status);\r\n        // this.setState({\r\n        // loadingSelect: false,\r\n        // selectIsOpen: false,\r\n        // collapseIsOpen: this.state.historyIsOpen,\r\n        // });\r\n      } else {\r\n        let body = await response.json();\r\n\r\n        const data: { userKeys: UserKey[]; users: User[] } = body.data;\r\n        console.log(response);\r\n        console.log(data);\r\n        this.setState({\r\n          unsentRecipientKeys: data.userKeys,\r\n          loadingSend: false,\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n      // this.setState({\r\n      // loadingSelect: false,\r\n      // selectIsOpen: false,\r\n      // collapseIsOpen: this.state.historyIsOpen,\r\n      // });\r\n    }\r\n  }\r\n\r\n  async openViewModal() {\r\n    console.log(\"opening view modal\");\r\n    this.setState({ viewIsOpen: true });\r\n    const letterId = this.props.letter.letterId;\r\n    const fetchUrl = `/api/v1/letters/${letterId}/contents/writer`;\r\n    console.log(letterId);\r\n    let encryptedLetter = this.cacheService.get(letterId);\r\n    if (encryptedLetter === null) {\r\n      this.setState({ loadingView: true });\r\n      this.retrieveLetterContentsFromServer(fetchUrl);\r\n    } else {\r\n      try {\r\n        let fileData = await this.cryptService.decrypt(\r\n          encryptedLetter,\r\n          this.props.user.publicAddress\r\n        );\r\n\r\n        console.log(fileData.letterType);\r\n        this.setState({\r\n          fileData: fileData,\r\n        });\r\n      } catch (error) {\r\n        console.log(\"error with decryption\");\r\n      }\r\n    }\r\n  }\r\n\r\n  closeViewModal() {\r\n    console.log(\"closing view modal\");\r\n    this.setState({ viewIsOpen: false, fileData: undefined });\r\n  }\r\n\r\n  retrieveLetterContentsFromServer(fetchUrl: string) {\r\n    console.log(\"retrieving from server\");\r\n    const init: RequestInit = {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        auth: {\r\n          jwtToken: this.props.user.jwtToken,\r\n          publicAddress: this.props.user.publicAddress,\r\n        },\r\n        data: {},\r\n      }),\r\n    };\r\n    const letterId = this.props.letter.letterId;\r\n    // get letter from server\r\n    fetch(`${process.env.REACT_APP_BACKEND_URL}${fetchUrl}`, init)\r\n      .then((response) => {\r\n        console.log(\"logging response\");\r\n        console.log(response);\r\n        return response.json();\r\n      })\r\n      .then((body) => {\r\n        // decrypt letter\r\n        const encryptedLetter: string = body.data;\r\n        if (encryptedLetter) {\r\n          this.cryptService\r\n            .decrypt(encryptedLetter, this.props.user.publicAddress)\r\n            .then((fileData) => {\r\n              if (fileData) {\r\n                this.setState({\r\n                  viewIsOpen: true,\r\n                  fileData: fileData,\r\n                });\r\n              }\r\n            })\r\n            .catch((e: Error) => {\r\n              this.setState({\r\n                // viewIsOpen: false,\r\n                loadingView: false,\r\n              });\r\n              // alert(\"Failed to decrypt retrieved letter . . . \");\r\n            });\r\n        } else {\r\n          this.setState({\r\n            viewIsOpen: false,\r\n          });\r\n        }\r\n      })\r\n      .catch((e: Error) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  async openMessageModal(encryptedFile: string) {\r\n    this.setState({ uploadedFile: encryptedFile, messageIsOpen: true });\r\n    this.openConfirmModal();\r\n  }\r\n\r\n  async closeMessageModal() {\r\n    this.setState({ messageIsOpen: false });\r\n  }\r\n\r\n  async closeProfileModal() {\r\n    console.log(\"closing profile modal\");\r\n    this.setState({ profileIsOpen: false, selectedUserProfile: undefined });\r\n  }\r\n\r\n  async openProfileModal(publicAddress: string) {\r\n    console.log(\"opening profile modal\");\r\n    const userProfile = this.userProfiles.get(publicAddress);\r\n    console.log(userProfile);\r\n    if (userProfile === undefined) {\r\n      this.setState({ profileIsOpen: true });\r\n      const fetchUrl = `/api/v1/users/${publicAddress}/profile`;\r\n      this.retrieveProfileFromServer(fetchUrl);\r\n    } else {\r\n      this.setState({ selectedUserProfile: userProfile, profileIsOpen: true });\r\n    }\r\n  }\r\n\r\n  async retrieveProfileFromServer(fetchUrl: string) {\r\n    const init: RequestInit = {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        auth: {\r\n          jwtToken: this.props.user.jwtToken,\r\n          publicAddress: this.props.user.publicAddress,\r\n        },\r\n        data: {},\r\n      }),\r\n    };\r\n\r\n    try {\r\n      let response = await fetch(\r\n        `${process.env.REACT_APP_BACKEND_URL}${fetchUrl}`,\r\n        init\r\n      );\r\n\r\n      if (response.status === 400) {\r\n        console.log(response.status);\r\n        // this.setState({\r\n        //   profileIsOpen: false,\r\n        // });\r\n      } else {\r\n        let body = await response.json();\r\n        const data: UserProfile[] = body.data;\r\n        console.log(response);\r\n        console.log(data);\r\n        if (data && data.length !== 0) {\r\n          this.userProfiles.set(data[0].publicAddress, data[0]);\r\n          this.setState({\r\n            selectedUserProfile: data[0],\r\n          });\r\n        } else {\r\n          // this.setState({\r\n          //   profileIsOpen: false,\r\n          // });\r\n        }\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n      // this.setState({\r\n      //   profileIsOpen: false,\r\n      // });\r\n    }\r\n  }\r\n\r\n  async closeHistoryModal() {\r\n    console.log(\"closing history modal\");\r\n    this.setState({\r\n      historyIsOpen: false,\r\n      loadingHistory: false,\r\n      collapseIsOpen: this.state.viewIsOpen,\r\n    });\r\n  }\r\n\r\n  async openHistoryModal() {\r\n    console.log(\"opening history modal\");\r\n\r\n    if (this.state.history.length === 0) {\r\n      this.setState({\r\n        loadingHistory: true,\r\n        historyIsOpen: true,\r\n        collapseIsOpen: true,\r\n      });\r\n      const letterId = this.props.letter.letterId;\r\n      const fetchUrl = `/api/v1/letters/${letterId}/history`;\r\n      this.retrieveHistoryFromServer(fetchUrl);\r\n    } else {\r\n      this.setState({\r\n        historyIsOpen: true,\r\n        collapseIsOpen: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  async retrieveHistoryFromServer(fetchUrl: string) {\r\n    const init: RequestInit = {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        auth: {\r\n          jwtToken: this.props.user.jwtToken,\r\n          publicAddress: this.props.user.publicAddress,\r\n        },\r\n        data: {},\r\n      }),\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `${process.env.REACT_APP_BACKEND_URL}${fetchUrl}`,\r\n        init\r\n      );\r\n      if (response.status === 400) {\r\n        console.log(response.status);\r\n        this.setState({\r\n          // historyIsOpen: false,\r\n          loadingHistory: false,\r\n          // collapseIsOpen: this.state.selectIsOpen,\r\n        });\r\n      } else {\r\n        const body = await response.json();\r\n\r\n        const data: LetterHistory[] = body.data;\r\n        console.log(response);\r\n        console.log(data);\r\n        if (data) {\r\n          this.setState({\r\n            history: data,\r\n            loadingHistory: false,\r\n          });\r\n        } else {\r\n          console.log(\"fetch for letterHistory failed\");\r\n          this.setState({\r\n            // historyIsOpen: false,\r\n            loadingHistory: false,\r\n            // collapseIsOpen: this.state.selectIsOpen,\r\n          });\r\n        }\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n      this.setState({\r\n        // historyIsOpen: false,\r\n        loadingHistory: false,\r\n        // collapseIsOpen: this.state.selectIsOpen,\r\n      });\r\n    }\r\n  }\r\n\r\n  async openConfirmModal() {\r\n    console.log(\"open confirm modal\");\r\n    this.setState({ confirmIsOpen: true });\r\n  }\r\n\r\n  async closeConfirmModal() {\r\n    console.log(\"close confirm modal\");\r\n    this.setState({ confirmIsOpen: false });\r\n  }\r\n\r\n  render() {\r\n    const { user, letter, numRecipients, numUnsentRecipients } = this.props;\r\n    const {\r\n      history,\r\n      loadingHistory,\r\n      loadingView,\r\n      loadingSend,\r\n      profileIsOpen,\r\n      historyIsOpen,\r\n      messageIsOpen,\r\n      uploadIsOpen,\r\n      sendIsOpen,\r\n      viewIsOpen,\r\n      confirmIsOpen,\r\n      collapseIsOpen,\r\n      unsentRecipientKeys,\r\n      fileData,\r\n    } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <Card className=\"full-width opacity-0\">\r\n          <Card.Header\r\n            className=\"d-flex justify-content-between button-blur letter-entry\"\r\n            onClick={() => this.setState({ collapseIsOpen: !collapseIsOpen })}\r\n          >\r\n            <div className=\"flex-fill\">\r\n              <span className=\"mr-3\">For:</span>\r\n              <OverlayTrigger\r\n                placement=\"top\"\r\n                overlay={\r\n                  <Tooltip id=\"main-buttons\">\r\n                    <div>View {letter.letterRequestor?.name}'s profile</div>\r\n                  </Tooltip>\r\n                }\r\n              >\r\n                <Button\r\n                  variant=\"outline-light\"\r\n                  onClick={(e: any) => {\r\n                    e.stopPropagation();\r\n                    this.openProfileModal(letter.letterRequestor.publicAddress);\r\n                  }}\r\n                >\r\n                  {letter.letterRequestor?.name}\r\n                </Button>\r\n              </OverlayTrigger>\r\n            </div>\r\n\r\n            {numUnsentRecipients > 0 && letter.uploadedAt !== null && (\r\n              <OverlayTrigger\r\n                placement=\"top\"\r\n                overlay={\r\n                  <Tooltip id=\"main-buttons\">Send letter to recipients</Tooltip>\r\n                }\r\n              >\r\n                <Button\r\n                  // TODO: add Tooltip\r\n                  variant=\"outline-light\"\r\n                  className=\"flex-shrink-1 float-right ml-3\"\r\n                  onClick={(e: any) => {\r\n                    e.stopPropagation();\r\n                    if (sendIsOpen) {\r\n                      this.closeSendModal();\r\n                    } else {\r\n                      this.openSendModal();\r\n                    }\r\n                  }}\r\n                >\r\n                  Send\r\n                </Button>\r\n              </OverlayTrigger>\r\n            )}\r\n            <OverlayTrigger\r\n              placement=\"top\"\r\n              overlay={\r\n                <Tooltip id=\"main-buttons\">\r\n                  {uploadIsOpen ? \"Close upload\" : \"Upload letter from device\"}\r\n                </Tooltip>\r\n              }\r\n            >\r\n                <Button\r\n                  // TODO: add Tooltip\r\n                  disabled={numRecipients > 0}\r\n                  variant=\"outline-light\"\r\n                  className=\"flex-shrink-1 float-right ml-3\"\r\n                  onClick={(e: any) => {\r\n                    e.stopPropagation();\r\n                    if (uploadIsOpen) {\r\n                      this.closeUploadModal();\r\n                    } else {\r\n                      this.openUploadModal();\r\n                    }\r\n                  }}\r\n                >\r\n                  Upload\r\n                </Button>\r\n            </OverlayTrigger>\r\n            <OverlayTrigger\r\n              placement=\"top\"\r\n              overlay={\r\n                <Tooltip id=\"main-buttons\">\r\n                  View letter for {letter.letterRequestor?.name}\r\n                </Tooltip>\r\n              }\r\n            >\r\n                <Button\r\n                  // TODO: add Tooltip\r\n                  disabled={letter.uploadedAt === null}\r\n                  variant=\"outline-light\"\r\n                  className=\"flex-shrink-1 float-right ml-3\"\r\n                  onClick={(e: any) => {\r\n                    e.stopPropagation();\r\n                    if (viewIsOpen) {\r\n                      this.closeViewModal();\r\n                    } else {\r\n                      this.openViewModal();\r\n                    }\r\n                  }}\r\n                >\r\n                  View\r\n                </Button>\r\n            </OverlayTrigger>\r\n            <OverlayTrigger\r\n              placement=\"top\"\r\n              overlay={\r\n                <Tooltip id=\"main-buttons\">\r\n                  <div>\r\n                    {!historyIsOpen\r\n                      ? \"Check who it has been sent to\"\r\n                      : \"Close letter history\"}\r\n                  </div>\r\n                </Tooltip>\r\n              }\r\n            >\r\n                <Button\r\n                  // TODO: add Tooltip\r\n                  disabled={numRecipients === 0}\r\n                  variant=\"outline-light\"\r\n                  className=\"flex-shrink-1 float-right ml-3\"\r\n                  onClick={(e: any) => {\r\n                    e.stopPropagation();\r\n                    if (historyIsOpen) {\r\n                      this.closeHistoryModal();\r\n                    } else {\r\n                      this.openHistoryModal();\r\n                    }\r\n                  }}\r\n                >\r\n                  History\r\n                </Button>\r\n            </OverlayTrigger>\r\n            {/* <OverlayTrigger\r\n              placement=\"top\"\r\n              overlay={\r\n                <Tooltip id=\"main-buttons\">\r\n                  {!collapseIsOpen ? \"See details\" : \"Close\"}\r\n                </Tooltip>\r\n              }\r\n            >\r\n              <Button\r\n                // TODO: add Tooltip\r\n                variant=\"outline-light\"\r\n                className=\"flex-shrink-1 float-right ml-3\"\r\n                onClick={(e: any) => {\r\n                  e.stopPropagation();\r\n                  this.setState({ collapseIsOpen: !collapseIsOpen });\r\n                }}\r\n                aria-controls=\"example-collapse-text\"\r\n                aria-expanded={collapseIsOpen}\r\n              >\r\n                *\r\n              </Button>\r\n            </OverlayTrigger> */}\r\n          </Card.Header>\r\n        </Card>\r\n        <Collapse in={collapseIsOpen}>\r\n          <div className=\"collapse-body-select\">\r\n            {sendIsOpen && <div>Send Letter Component</div>}\r\n            {uploadIsOpen && (\r\n              <div>\r\n                <FileUpload\r\n                  ref={this.uploadModal}\r\n                  user={user}\r\n                  reUpload={letter.uploadedAt !== null}\r\n                  restrictPdf={true}\r\n                  encrypt={true}\r\n                  onEncryptedUpload={this.openMessageModal.bind(this)}\r\n                  onClose={this.closeUploadModal.bind(this)}\r\n                ></FileUpload>\r\n              </div>\r\n            )}\r\n            {loadingHistory && (\r\n              <div className=\"d-flex justify-content-center\">\r\n                <Spinner\r\n                  className=\"mb-3\"\r\n                  animation=\"border\"\r\n                  variant=\"secondary\"\r\n                />\r\n              </div>\r\n            )}\r\n            {!loadingHistory && historyIsOpen && (\r\n              <div className=\"\">\r\n                <FileHistory\r\n                  user={user}\r\n                  history={history}\r\n                  onClose={this.closeHistoryModal.bind(this)}\r\n                ></FileHistory>\r\n              </div>\r\n            )}\r\n            {!uploadIsOpen && !historyIsOpen && (\r\n              <div className=\"display-text d-flex text-white-50\">\r\n                <div className=\"flex-fill\">\r\n                  Requested: {letter.requestedAt?.toString()}\r\n                </div>\r\n                {letter.uploadedAt && (\r\n                  <div className=\" flex-shrink-1 float-right\">\r\n                    Uploaded: {letter.uploadedAt?.toString()}\r\n                  </div>\r\n                )}\r\n                {!letter.uploadedAt && (\r\n                  <div className=\" flex-shrink-1 float-right\">\r\n                    You have not uploaded the letter\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </Collapse>\r\n\r\n        <Modal\r\n          id=\"profile-modal\"\r\n          show={profileIsOpen}\r\n          onHide={this.closeProfileModal.bind(this)}\r\n          // backdrop=\"static\"\r\n          animation={false}\r\n          className=\"modal\"\r\n          scrollable={false}\r\n          // size=\"sm\"\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>{this.state.selectedUserProfile?.name}</Modal.Title>\r\n          </Modal.Header>\r\n\r\n          <Modal.Body>\r\n            <Profile\r\n              user={this.state.selectedUserProfile}\r\n              onClose={this.closeProfileModal.bind(this)}\r\n            />\r\n          </Modal.Body>\r\n        </Modal>\r\n\r\n        <Modal\r\n          id=\"confirm-modal\"\r\n          show={confirmIsOpen}\r\n          onHide={this.closeConfirmModal.bind(this)}\r\n          // backdrop=\"static\"\r\n          animation={false}\r\n          className=\"modal\"\r\n          scrollable={false}\r\n          // size=\"sm\"\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Please Confirm</Modal.Title>\r\n          </Modal.Header>\r\n\r\n          <Modal.Body>\r\n            <Confirm\r\n              user={user}\r\n              custom={true}\r\n              onConfirm={this.onUploadSubmit.bind(this)}\r\n              onClose={this.closeConfirmModal.bind(this)}\r\n            />\r\n          </Modal.Body>\r\n        </Modal>\r\n\r\n        <Modal\r\n          id=\"send-modal\"\r\n          show={sendIsOpen}\r\n          onHide={this.closeSendModal.bind(this)}\r\n          // backdrop=\"static\"\r\n          animation={false}\r\n          className=\"modal\"\r\n          scrollable={false}\r\n          // size=\"sm\"\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Select a Recipient</Modal.Title>\r\n          </Modal.Header>\r\n\r\n          <Modal.Body>\r\n            <Send\r\n              user={user}\r\n              letter={this.props.letter}\r\n              unsentRecipientKeys={this.state.unsentRecipientKeys}\r\n              onClose={this.onSendSubmit.bind(this)}\r\n            />\r\n          </Modal.Body>\r\n        </Modal>\r\n\r\n        <Modal\r\n          id=\"view-modal\"\r\n          show={viewIsOpen}\r\n          onHide={this.closeViewModal.bind(this)}\r\n          backdrop=\"static\"\r\n          animation={false}\r\n          className=\"modal view-modal\"\r\n          scrollable={false}\r\n          size=\"xl\"\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>For: {letter.letterRequestor?.name}</Modal.Title>\r\n          </Modal.Header>\r\n\r\n          <Modal.Body>\r\n            <FileView\r\n              fileData={fileData}\r\n              loadingView={loadingView}\r\n              ref={this.viewModal}\r\n              user={user}\r\n              onClose={this.closeViewModal.bind(this)}\r\n            ></FileView>\r\n          </Modal.Body>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WriterLetterDisplay;\r\n","import React from \"react\";\r\nimport { Spinner, Col, Row, Button } from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSync } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport UserAuth from \"../common/UserAuth.interface\";\r\nimport LetterDetails from \"../common/LetterDetails.interface\";\r\nimport RequestBody from \"../common/RequestBody.interface\";\r\nimport ResponseBody from \"../common/ResponseBody.interface\";\r\n\r\nimport WriterLetterDisplay from \"../WriterLetterDisplay/WriterLetterDisplay\";\r\n\r\nimport \"./Writer.css\";\r\n\r\ninterface WriterProps {\r\n  user: UserAuth;\r\n}\r\n\r\ninterface WriterState {\r\n  letters: LetterDetails[];\r\n  numRecipients: Number[];\r\n  numUnsentRecipients: Number[];\r\n  loadingLetters: boolean;\r\n}\r\n\r\nclass Writer extends React.Component<WriterProps, WriterState> {\r\n  constructor(props: WriterProps) {\r\n    super(props);\r\n    this.state = {\r\n      letters: [],\r\n      numRecipients: [],\r\n      numUnsentRecipients: [],\r\n      loadingLetters: true,\r\n    };\r\n  }\r\n\r\n  componentWillMount() {\r\n    // api call to get letters\r\n    this.loadLetterList();\r\n  }\r\n\r\n  async loadLetterList() {\r\n    const letterFetchUrl = `/api/v1/letters/written`;\r\n    const init: RequestInit = {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        auth: {\r\n          jwtToken: this.props.user.jwtToken,\r\n          publicAddress: this.props.user.publicAddress,\r\n        },\r\n        data: {},\r\n      }),\r\n    };\r\n    // get letters from server\r\n    fetch(`${process.env.REACT_APP_BACKEND_URL}${letterFetchUrl}`, init)\r\n      .then((response) => {\r\n        response\r\n          .json()\r\n          .then((body: ResponseBody) => {\r\n            const data: {\r\n              letters: LetterDetails[];\r\n              numRecipients: Number[];\r\n              numUnsentRecipients: Number[];\r\n            } = body.data;\r\n\r\n            console.log(response);\r\n            if (data && data.letters && data.numRecipients) {\r\n              this.setState({\r\n                letters: data.letters,\r\n                numRecipients: data.numRecipients,\r\n                numUnsentRecipients: data.numUnsentRecipients,\r\n                loadingLetters: false,\r\n              });\r\n            } else {\r\n              this.setState({ loadingLetters: false });\r\n            }\r\n          })\r\n          .catch((e: Error) => {\r\n            console.log(e);\r\n          });\r\n      })\r\n      .catch((e: Error) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { user } = this.props;\r\n    const {\r\n      letters,\r\n      numRecipients,\r\n      numUnsentRecipients,\r\n      loadingLetters,\r\n    } = this.state;\r\n\r\n    const lettersList = letters.map((l, k) => (\r\n      <WriterLetterDisplay\r\n        user={user}\r\n        letter={l}\r\n        numRecipients={numRecipients[k]}\r\n        numUnsentRecipients={numUnsentRecipients[k]}\r\n        onReload={this.loadLetterList.bind(this)}\r\n      />\r\n    ));\r\n\r\n    const writerLetters = (\r\n      <div className=\"writer-letters\">\r\n        <div className=\"writer-header\">\r\n          <h3> Writer </h3>\r\n        </div>\r\n        <div className=\"writer-letterslist\">{lettersList}</div>\r\n      </div>\r\n    );\r\n\r\n    const writerFooter = (\r\n      <div className=\"writer-footer button-blur-no-border text-white-50\">\r\n        <span> Product of Team Gas</span>\r\n        <Button\r\n          variant=\"outline-light\"\r\n          onClick={() => {\r\n            this.setState({ letters: [], loadingLetters: true });\r\n            this.loadLetterList();\r\n          }}\r\n        >\r\n          <FontAwesomeIcon icon={faSync} />\r\n        </Button>\r\n      </div>\r\n    );\r\n\r\n    return (\r\n      <>\r\n        {!loadingLetters && letters.length !== 0 && (\r\n          <Col className=\"writer\">\r\n            <Row>{writerLetters}</Row>\r\n            <Row>{writerFooter}</Row>\r\n          </Col>\r\n        )}\r\n\r\n        {!loadingLetters && letters.length === 0 && (\r\n          <div className=\"writer-header absolute-center\">\r\n            <h3> No Letters Requested </h3>\r\n          </div>\r\n        )}\r\n\r\n        {loadingLetters && (\r\n          <div className=\"d-flex justify-content-center absolute-center\">\r\n            <Spinner className=\"\" animation=\"border\" variant=\"secondary\" />\r\n          </div>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default Writer;\r\n","import Select from \"./Select\";\r\nexport default Select;","import React from \"react\";\r\nimport { Fragment } from \"react\";\r\nimport {\r\n  Card,\r\n  Button,\r\n  InputGroup,\r\n  OverlayTrigger,\r\n  Tooltip,\r\n  Modal,\r\n  Col,\r\n  Row,\r\n} from \"react-bootstrap\";\r\nimport { Typeahead } from \"react-bootstrap-typeahead\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\r\n// import LetterDetails from \"../../common/LetterDetails.interface\";\r\n// import FileData from \"../../common/FileData.interface\";\r\nimport UserProfile from \"../../common/UserProfile.interface\";\r\nimport Profile from \"../Profile\";\r\nimport RequestBody from \"../../common/RequestBody.interface\";\r\nimport ResponseBody from \"../../common/ResponseBody.interface\";\r\nimport User from \"../../common/User.interface\";\r\nimport \"./Select.css\";\r\nimport UserAuth from \"../../common/UserAuth.interface\";\r\n\r\ninterface SelectProps {\r\n  user: UserAuth;\r\n  users: User[];\r\n  previouslySelectedRecipients: User[];\r\n  header: string;\r\n  onSubmit: (selectedRecipients: User[]) => void;\r\n  onClose: () => void;\r\n}\r\ninterface SelectState {\r\n  selectedRecipients: User[];\r\n  profileIsOpen: boolean;\r\n  selectedUserProfile?: UserProfile;\r\n}\r\n\r\nclass Select extends React.Component<SelectProps, SelectState> {\r\n  private userProfiles: Map<string, UserProfile>;\r\n  constructor(props: SelectProps) {\r\n    super(props);\r\n    this.state = {\r\n      selectedRecipients: this.props.previouslySelectedRecipients,\r\n      profileIsOpen: false,\r\n    };\r\n\r\n    this.userProfiles = new Map<string, UserProfile>();\r\n  }\r\n\r\n  async closeProfileModal() {\r\n    console.log(\"closing profile modal\");\r\n    this.setState({ profileIsOpen: false });\r\n  }\r\n\r\n  async openProfileModal(publicAddress: string) {\r\n    console.log(\"opening profile modal\");\r\n    const userProfile = this.userProfiles.get(publicAddress);\r\n    console.log(userProfile);\r\n    if (userProfile === undefined) {\r\n      const fetchUrl = `/api/v1/users/${publicAddress}/profile`;\r\n      this.retrieveProfileFromServer(fetchUrl);\r\n    } else {\r\n      this.setState({ selectedUserProfile: userProfile, profileIsOpen: true });\r\n    }\r\n  }\r\n\r\n  async retrieveProfileFromServer(fetchUrl: string) {\r\n    const init: RequestInit = {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        auth: {\r\n          jwtToken: this.props.user.jwtToken,\r\n          publicAddress: this.props.user.publicAddress,\r\n        },\r\n        data: {},\r\n      }),\r\n    };\r\n\r\n    // get user profile from server\r\n    try {\r\n      let response = await fetch(\r\n        `${process.env.REACT_APP_BACKEND_URL}${fetchUrl}`,\r\n        init\r\n      );\r\n      let body = await response.json();\r\n\r\n      const data: UserProfile[] = body.data;\r\n      console.log(response);\r\n      console.log(data);\r\n      if (data && data.length !== 0) {\r\n        this.userProfiles.set(data[0].publicAddress, data[0]);\r\n        this.setState({\r\n          profileIsOpen: true,\r\n          selectedUserProfile: data[0],\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  onSelectSubmit() {\r\n    console.log(\"select submit\");\r\n    this.props.onSubmit(this.state.selectedRecipients);\r\n  }\r\n\r\n  render() {\r\n    const { users, header, previouslySelectedRecipients } = this.props;\r\n    const { profileIsOpen, selectedRecipients } = this.state;\r\n\r\n    const selectRecipients = (\r\n      <Fragment>\r\n        <InputGroup className=\"border-radius mb-0\">\r\n          <div className=\"multiple-typeahead recipient-typeahead\">\r\n            <Typeahead\r\n              id=\"select-recipients-typeahead\"\r\n              // minLength={2}\r\n              multiple\r\n              labelKey=\"name\"\r\n              filterBy={[\"name\", \"publicAddress\"]}\r\n              options={users}\r\n              // placeholder=\"Select Recipients\" // can't change color to white\r\n              paginate={true}\r\n              selected={selectedRecipients}\r\n              onChange={(selected) => {\r\n                console.log(selected);\r\n                this.setState({\r\n                  selectedRecipients: selected,\r\n                });\r\n              }}\r\n              renderMenuItemChildren={\r\n                (option) =>\r\n                  `${option.name} (${option.publicAddress.slice(0, 6)} . . . )` // TODO: add padding with service\r\n              }\r\n            />\r\n          </div>\r\n        </InputGroup>\r\n      </Fragment>\r\n    );\r\n\r\n    let recipientsList = [];\r\n    if (selectedRecipients) {\r\n      for (let i = 0; i < selectedRecipients.length; i += 3) {\r\n        recipientsList.push(\r\n          <Row>\r\n            <Col>\r\n              <div className=\"d-flex justify-content-between recipient-entry\">\r\n                <OverlayTrigger\r\n                  placement=\"top\"\r\n                  overlay={\r\n                    <Tooltip id=\"main-buttons\">\r\n                      <div>View {selectedRecipients[i].name}'s profile</div>\r\n                    </Tooltip>\r\n                  }\r\n                >\r\n                  <div\r\n                    className=\"flex-fill body-text\"\r\n                    onClick={() =>\r\n                      this.openProfileModal(selectedRecipients[i].publicAddress)\r\n                    }\r\n                  >\r\n                    {selectedRecipients[i].name}\r\n                  </div>\r\n                </OverlayTrigger>\r\n              </div>\r\n            </Col>\r\n            {i + 1 < selectedRecipients.length && (\r\n              <Col>\r\n                <div className=\"d-flex justify-content-between recipient-entry\">\r\n                  <OverlayTrigger\r\n                    placement=\"top\"\r\n                    overlay={\r\n                      <Tooltip id=\"main-buttons\">\r\n                        <div>\r\n                          View {selectedRecipients[i + 1].name}'s profile\r\n                        </div>\r\n                      </Tooltip>\r\n                    }\r\n                  >\r\n                    <div\r\n                      className=\"flex-fill body-text\"\r\n                      onClick={() =>\r\n                        this.openProfileModal(\r\n                          selectedRecipients[i + 1].publicAddress\r\n                        )\r\n                      }\r\n                    >\r\n                      {selectedRecipients[i + 1].name}\r\n                    </div>\r\n                  </OverlayTrigger>\r\n                </div>\r\n              </Col>\r\n            )}\r\n\r\n            {i + 1 >= selectedRecipients.length && (\r\n              <Col>\r\n                <Card.Header className=\"d-flex justify-content-between recipient-placeholder\"></Card.Header>\r\n              </Col>\r\n            )}\r\n\r\n            {i + 2 < selectedRecipients.length && (\r\n              <Col>\r\n                <div className=\"d-flex justify-content-between recipient-entry\">\r\n                  <OverlayTrigger\r\n                    placement=\"top\"\r\n                    overlay={\r\n                      <Tooltip id=\"main-buttons\">\r\n                        <div>\r\n                          View {selectedRecipients[i + 2].name}'s profile\r\n                        </div>\r\n                      </Tooltip>\r\n                    }\r\n                  >\r\n                    <div\r\n                      className=\"flex-fill body-text\"\r\n                      onClick={() =>\r\n                        this.openProfileModal(\r\n                          selectedRecipients[i + 2].publicAddress\r\n                        )\r\n                      }\r\n                    >\r\n                      {selectedRecipients[i + 2].name}\r\n                    </div>\r\n                  </OverlayTrigger>\r\n                </div>\r\n              </Col>\r\n            )}\r\n\r\n            {i + 2 >= selectedRecipients.length && (\r\n              <Col>\r\n                <Card.Header className=\"d-flex justify-content-between recipient-placeholder\"></Card.Header>\r\n              </Col>\r\n            )}\r\n          </Row>\r\n        );\r\n      }\r\n    }\r\n    return (\r\n      <div>\r\n        <Row>\r\n          <h5>{header}</h5>\r\n        </Row>\r\n        <div className=\"mb-3\">{selectRecipients}</div>\r\n        {selectedRecipients.length !== 0 && (\r\n          <Col className=\"recipient-display mb-3\">{recipientsList}</Col>\r\n        )}\r\n\r\n        <div className=\"d-flex border-radius button-blur mb-2\">\r\n          <div className=\"mt-3\">\r\n            <OverlayTrigger\r\n              placement=\"right\"\r\n              overlay={\r\n                <Tooltip id=\"learn-more\">\r\n                  <>\r\n                    {header === \"Select Recipients\" && (\r\n                      <div>\r\n                        Please indicate a list of intended recipients. This\r\n                        recipient list can be updated in <b>Edit</b>. Note that\r\n                        once the letter is sent to a recipient, the recipient\r\n                        will be moved into <b>History</b>. Learn more in the\r\n                        FAQs.\r\n                      </div>\r\n                    )}\r\n                    {header === \"Edit Recipients\" && (\r\n                      <div>\r\n                        You may add and remove intended recipients. Note that\r\n                        once the writer uploads and sends your letter to a\r\n                        recipient, the recipient will be moved into{\" \"}\r\n                        <b>History</b>. Learn more in the FAQs.\r\n                      </div>\r\n                    )}\r\n                  </>\r\n                </Tooltip>\r\n              }\r\n            >\r\n              <FontAwesomeIcon icon={faInfoCircle} size=\"lg\" />\r\n            </OverlayTrigger>\r\n          </div>\r\n\r\n          <div className=\"flex-fill\"></div>\r\n\r\n          {selectedRecipients.length !== 0 && (\r\n            <OverlayTrigger\r\n              overlay={\r\n                <Tooltip id=\"tooltip\">\r\n                  Select {selectedRecipients.length} recipients\r\n                </Tooltip>\r\n              }\r\n            >\r\n              <Button\r\n                variant=\"outline-light\"\r\n                className=\"flex-shrink-1 float-right\"\r\n                onClick={() => {\r\n                  this.props.onSubmit(selectedRecipients);\r\n                }}\r\n              >\r\n                Submit\r\n              </Button>\r\n            </OverlayTrigger>\r\n          )}\r\n          {selectedRecipients.length === 0 && (\r\n            <OverlayTrigger\r\n              overlay={\r\n                <Tooltip id=\"tooltip\">Select no recipients for now</Tooltip>\r\n              }\r\n            >\r\n              <span className=\"d-inline-block\">\r\n                <Button\r\n                  variant=\"outline-light\"\r\n                  className=\"flex-shrink-1 float-right\"\r\n                  // disabled\r\n                  // style={{ pointerEvents: \"none\" }}\r\n                  onClick={() => {\r\n                    this.props.onSubmit(selectedRecipients);\r\n                  }}\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </span>\r\n            </OverlayTrigger>\r\n          )}\r\n          <OverlayTrigger\r\n            overlay={\r\n              <Tooltip id=\"tooltip\">\r\n                {header === \"Edit Recipients\"\r\n                  ? \"Reset to previous\"\r\n                  : \"Clear all selected recipients\"}\r\n              </Tooltip>\r\n            }\r\n          >\r\n            <Button\r\n              variant=\"outline-light\"\r\n              className=\"flex-shrink-1 ml-3\"\r\n              onClick={() => {\r\n                this.setState({\r\n                  selectedRecipients: previouslySelectedRecipients,\r\n                });\r\n              }}\r\n            >\r\n              {header === \"Edit Recipients\" ? \"Reset\" : \"Clear\"}\r\n            </Button>\r\n          </OverlayTrigger>\r\n          <OverlayTrigger\r\n            overlay={\r\n              <Tooltip id=\"tooltip\">\r\n                Cancel new request\r\n              </Tooltip>\r\n            }\r\n          >\r\n          <Button\r\n            variant=\"outline-light\"\r\n            className=\"flex-shrink-1 float-right ml-3\"\r\n            onClick={() => {\r\n              this.props.onClose();\r\n            }}\r\n          >\r\n            Close\r\n          </Button>\r\n          </OverlayTrigger>\r\n        </div>\r\n\r\n        <Modal\r\n          id=\"profile-modal\"\r\n          show={profileIsOpen}\r\n          onHide={this.closeProfileModal.bind(this)}\r\n          // backdrop=\"static\"\r\n          animation={false}\r\n          className=\"modal\"\r\n          scrollable={false}\r\n          // size=\"sm\"\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>{this.state.selectedUserProfile?.name}</Modal.Title>\r\n          </Modal.Header>\r\n\r\n          <Modal.Body>\r\n            {this.state.selectedUserProfile && (\r\n              <Profile\r\n                user={this.state.selectedUserProfile}\r\n                onClose={this.closeProfileModal.bind(this)}\r\n              />\r\n            )}\r\n          </Modal.Body>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Select;\r\n","import Confirm from \"./Confirm\";\r\nexport default Confirm;","import React from \"react\";\r\nimport { Fragment } from \"react\";\r\nimport {\r\n  Card,\r\n  Button,\r\n  Spinner,\r\n  Modal,\r\n  Collapse,\r\n  Col,\r\n  Row,\r\n  Tooltip,\r\n  OverlayTrigger,\r\n} from \"react-bootstrap\";\r\nimport { Typeahead } from \"react-bootstrap-typeahead\";\r\nimport UserProfile from \"../common/UserProfile.interface\";\r\nimport UserAuth from \"../common/UserAuth.interface\";\r\nimport LetterHistory from \"../common/LetterHistory.interface\";\r\nimport RequestBody from \"../common/RequestBody.interface\";\r\nimport ResponseBody from \"../common/ResponseBody.interface\";\r\nimport User from \"../common/User.interface\";\r\nimport \"./RequestorLetterDisplay.css\";\r\nimport LetterDetails from \"../common/LetterDetails.interface\";\r\n\r\nimport Confirm from \"../components/Confirm\";\r\nimport FileView from \"../components/FileView\";\r\nimport FileHistory from \"../components/FileHistory\";\r\nimport Profile from \"../components/Profile\";\r\nimport Select from \"../components/Select\";\r\n\r\ninterface RequestorLetterDisplayProps {\r\n  user: UserAuth;\r\n  letter: LetterDetails;\r\n  numRecipients: Number;\r\n  users: User[];\r\n}\r\ninterface RequestorLetterDisplayState {\r\n  history: LetterHistory[];\r\n  loadingSelect: boolean;\r\n  loadingHistory: boolean;\r\n  selectIsOpen: boolean;\r\n  profileIsOpen: boolean;\r\n  historyIsOpen: boolean;\r\n  uploadIsOpen: boolean;\r\n  confirmIsOpen: boolean;\r\n  collapseIsOpen: boolean;\r\n  previouslySelectedRecipients: User[];\r\n  sentRecipients: User[];\r\n  selectedRecipients: User[];\r\n  selectedPublicAddress?: string;\r\n  selectedUserProfile?: UserProfile;\r\n}\r\n\r\nclass RequestorLetterDisplay extends React.Component<\r\n  RequestorLetterDisplayProps,\r\n  RequestorLetterDisplayState\r\n> {\r\n  private userProfiles: Map<string, UserProfile>;\r\n\r\n  constructor(props: RequestorLetterDisplayProps) {\r\n    super(props);\r\n    this.state = {\r\n      history: [],\r\n      loadingHistory: false,\r\n      loadingSelect: false,\r\n      selectIsOpen: false,\r\n      profileIsOpen: false,\r\n      historyIsOpen: false,\r\n      uploadIsOpen: false,\r\n      confirmIsOpen: false,\r\n      collapseIsOpen: false,\r\n      previouslySelectedRecipients: [],\r\n      sentRecipients: [],\r\n      selectedRecipients: [],\r\n    };\r\n\r\n    this.userProfiles = new Map<string, UserProfile>();\r\n  }\r\n\r\n  async onSelectSubmit(customMessage: string) {\r\n    console.log(\"on select submit\");\r\n    // this.setState({ confirmIsOpen: false });\r\n    const fetchUrl = `/api/v1/letters/${this.props.letter.letterId}/updateRecipients`;\r\n    this.sendUpdatedLetterRecipientsToServer(fetchUrl);\r\n  }\r\n\r\n  async sendUpdatedLetterRecipientsToServer(fetchUrl: string) {\r\n    const init: RequestInit = {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        auth: {\r\n          jwtToken: this.props.user.jwtToken,\r\n          publicAddress: this.props.user.publicAddress,\r\n        },\r\n        data: this.state.selectedRecipients,\r\n      }),\r\n    };\r\n\r\n    try {\r\n      let response = await fetch(\r\n        `${process.env.REACT_APP_BACKEND_URL}${fetchUrl}`,\r\n        init\r\n      );\r\n      if (response.status === 400) {\r\n        console.log(response.status);\r\n      } else {\r\n        let body = await response.json();\r\n\r\n        const data: User[] = body.data;\r\n        console.log(response);\r\n        console.log(data);\r\n        if (data) {\r\n          this.setState({\r\n            selectIsOpen: false,\r\n            confirmIsOpen: false,\r\n            collapseIsOpen: this.state.historyIsOpen,\r\n            previouslySelectedRecipients: data,\r\n          });\r\n        } else {\r\n        }\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  async closeSelectModal() {\r\n    console.log(\"closing select modal\");\r\n    this.setState({\r\n      selectIsOpen: false,\r\n      loadingSelect: false,\r\n      collapseIsOpen: this.state.historyIsOpen,\r\n    });\r\n  }\r\n\r\n  async openSelectModal() {\r\n    console.log(\"on send click\");\r\n    // fetch backend to get recipients list (who the letter has not been sent to)\r\n    const unsentUrl = `/api/v1/letters/${this.props.letter.letterId}/unsentRecipients`;\r\n    const sentUrl = `/api/v1/letters/${this.props.letter.letterId}/sentRecipients`;\r\n\r\n    if (this.state.previouslySelectedRecipients.length === 0) {\r\n      this.setState({\r\n        loadingSelect: true,\r\n        collapseIsOpen: true,\r\n        selectIsOpen: true,\r\n      });\r\n      await this.retrieveUnsentRecipientsFromServer(unsentUrl);\r\n      await this.retrieveSentRecipientsFromServer(sentUrl);\r\n    } else {\r\n      this.setState({\r\n        selectIsOpen: true,\r\n        collapseIsOpen: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  async retrieveUnsentRecipientsFromServer(fetchUrl: string) {\r\n    const init: RequestInit = {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        auth: {\r\n          jwtToken: this.props.user.jwtToken,\r\n          publicAddress: this.props.user.publicAddress,\r\n        },\r\n        data: {},\r\n      }),\r\n    };\r\n\r\n    try {\r\n      let response = await fetch(\r\n        `${process.env.REACT_APP_BACKEND_URL}${fetchUrl}`,\r\n        init\r\n      );\r\n      if (response.status === 400) {\r\n        console.log(response.status);\r\n        this.setState({\r\n          loadingSelect: false,\r\n          // selectIsOpen: false,\r\n          // collapseIsOpen: this.state.historyIsOpen,\r\n        });\r\n      } else {\r\n        let body = await response.json();\r\n\r\n        const data: User[] = body.data;\r\n        console.log(response);\r\n        console.log(data);\r\n        this.setState({\r\n          previouslySelectedRecipients: data,\r\n          // loadingSelect: false,\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n      this.setState({\r\n        loadingSelect: false,\r\n        // selectIsOpen: false,\r\n        // collapseIsOpen: this.state.historyIsOpen,\r\n      });\r\n    }\r\n  }\r\n\r\n  async retrieveSentRecipientsFromServer(fetchUrl: string) {\r\n    const init: RequestInit = {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        auth: {\r\n          jwtToken: this.props.user.jwtToken,\r\n          publicAddress: this.props.user.publicAddress,\r\n        },\r\n        data: {},\r\n      }),\r\n    };\r\n\r\n    try {\r\n      let response = await fetch(\r\n        `${process.env.REACT_APP_BACKEND_URL}${fetchUrl}`,\r\n        init\r\n      );\r\n      if (response.status === 400) {\r\n        console.log(response.status);\r\n        this.setState({\r\n          loadingSelect: false,\r\n          // selectIsOpen: false,\r\n          // collapseIsOpen: this.state.historyIsOpen,\r\n        });\r\n      } else {\r\n        let body = await response.json();\r\n\r\n        const data: User[] = body.data;\r\n        console.log(response);\r\n        console.log(data);\r\n        if (data) {\r\n          this.setState({\r\n            sentRecipients: data,\r\n            loadingSelect: false,\r\n          });\r\n        } else {\r\n          this.setState({\r\n            loadingSelect: false,\r\n          });\r\n        }\r\n\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n      this.setState({\r\n        loadingSelect: false,\r\n        // selectIsOpen: false,\r\n        // collapseIsOpen: this.state.historyIsOpen,\r\n      });\r\n    }\r\n  }\r\n\r\n  async openMessageModal(selectedRecipients: User[]) {\r\n    this.setState({ selectedRecipients: selectedRecipients });\r\n    this.openConfirmModal();\r\n  }\r\n\r\n  async closeMessageModal() {}\r\n\r\n  async closeProfileModal() {\r\n    console.log(\"closing profile modal\");\r\n    this.setState({ profileIsOpen: false, selectedUserProfile: undefined });\r\n  }\r\n\r\n  async openProfileModal(publicAddress: string) {\r\n    console.log(\"opening profile modal\");\r\n    const userProfile = this.userProfiles.get(publicAddress);\r\n    console.log(userProfile);\r\n    if (userProfile === undefined) {\r\n      this.setState({ profileIsOpen: true });\r\n      const fetchUrl = `/api/v1/users/${publicAddress}/profile`;\r\n      this.retrieveProfileFromServer(fetchUrl);\r\n    } else {\r\n      this.setState({ selectedUserProfile: userProfile, profileIsOpen: true });\r\n    }\r\n  }\r\n\r\n  async retrieveProfileFromServer(fetchUrl: string) {\r\n    const init: RequestInit = {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        auth: {\r\n          jwtToken: this.props.user.jwtToken,\r\n          publicAddress: this.props.user.publicAddress,\r\n        },\r\n        data: {},\r\n      }),\r\n    };\r\n\r\n    try {\r\n      let response = await fetch(\r\n        `${process.env.REACT_APP_BACKEND_URL}${fetchUrl}`,\r\n        init\r\n      );\r\n\r\n      if (response.status === 400) {\r\n        console.log(response.status);\r\n        // this.setState({\r\n        //   profileIsOpen: false,\r\n        // });\r\n      } else {\r\n        let body = await response.json();\r\n        const data: UserProfile[] = body.data;\r\n        console.log(response);\r\n        console.log(data);\r\n        if (data && data.length !== 0) {\r\n          this.userProfiles.set(data[0].publicAddress, data[0]);\r\n          this.setState({\r\n            selectedUserProfile: data[0],\r\n          });\r\n        } else {\r\n          // this.setState({\r\n          //   profileIsOpen: false,\r\n          // });\r\n        }\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n      // this.setState({\r\n      //   profileIsOpen: false,\r\n      // });\r\n    }\r\n  }\r\n\r\n  async closeHistoryModal() {\r\n    console.log(\"closing history modal\");\r\n    this.setState({\r\n      historyIsOpen: false,\r\n      loadingHistory: false,\r\n      collapseIsOpen: this.state.selectIsOpen,\r\n    });\r\n  }\r\n\r\n  async openHistoryModal() {\r\n    console.log(\"opening history modal\");\r\n\r\n    if (this.state.history.length === 0) {\r\n      this.setState({\r\n        loadingHistory: true,\r\n        historyIsOpen: true,\r\n        collapseIsOpen: true,\r\n      });\r\n      const letterId = this.props.letter.letterId;\r\n      const fetchUrl = `/api/v1/letters/${letterId}/history`;\r\n      this.retrieveHistoryFromServer(fetchUrl);\r\n    } else {\r\n      this.setState({\r\n        historyIsOpen: true,\r\n        collapseIsOpen: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  async retrieveHistoryFromServer(fetchUrl: string) {\r\n    const init: RequestInit = {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        auth: {\r\n          jwtToken: this.props.user.jwtToken,\r\n          publicAddress: this.props.user.publicAddress,\r\n        },\r\n        data: {},\r\n      }),\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `${process.env.REACT_APP_BACKEND_URL}${fetchUrl}`,\r\n        init\r\n      );\r\n      if (response.status === 400) {\r\n        console.log(response.status);\r\n        this.setState({\r\n          // historyIsOpen: false,\r\n          loadingHistory: false,\r\n          // collapseIsOpen: this.state.selectIsOpen,\r\n        });\r\n      } else {\r\n        const body = await response.json();\r\n\r\n        const data: LetterHistory[] = body.data;\r\n        console.log(response);\r\n        console.log(data);\r\n        if (data) {\r\n          this.setState({\r\n            history: data,\r\n            loadingHistory: false,\r\n          });\r\n        } else {\r\n          console.log(\"fetch for letterHistory failed\");\r\n          this.setState({\r\n            // historyIsOpen: false,\r\n            loadingHistory: false,\r\n            // collapseIsOpen: this.state.selectIsOpen,\r\n          });\r\n        }\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n      this.setState({\r\n        // historyIsOpen: false,\r\n        loadingHistory: false,\r\n        // collapseIsOpen: this.state.selectIsOpen,\r\n      });\r\n    }\r\n  }\r\n\r\n  async openConfirmModal() {\r\n    console.log(\"open confirm modal\");\r\n    this.setState({ confirmIsOpen: true });\r\n  }\r\n\r\n  async closeConfirmModal() {\r\n    console.log(\"close confirm modal\");\r\n    this.setState({ confirmIsOpen: false });\r\n  }\r\n\r\n  render() {\r\n    const { user, letter, numRecipients, users } = this.props;\r\n    const {\r\n      history,\r\n      loadingSelect,\r\n      loadingHistory,\r\n      selectIsOpen,\r\n      profileIsOpen,\r\n      historyIsOpen,\r\n      uploadIsOpen,\r\n      confirmIsOpen,\r\n      collapseIsOpen,\r\n      previouslySelectedRecipients,\r\n      sentRecipients,\r\n      selectedRecipients,\r\n      selectedPublicAddress,\r\n    } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <Card className=\"full-width opacity-0\">\r\n          <Card.Header\r\n            className=\"d-flex justify-content-between button-blur letter-entry\"\r\n            onClick={() => this.setState({ collapseIsOpen: !collapseIsOpen })}\r\n          >\r\n            <div className=\"flex-fill\">\r\n              <span className=\"mr-3\">From:</span>\r\n              <OverlayTrigger\r\n                placement=\"top\"\r\n                overlay={\r\n                  <Tooltip id=\"main-buttons\">\r\n                    <div>View {letter.letterWriter?.name}'s profile</div>\r\n                  </Tooltip>\r\n                }\r\n              >\r\n                <Button\r\n                  variant=\"outline-light\"\r\n                  onClick={(e: any) => {\r\n                    e.stopPropagation();\r\n                    this.openProfileModal(letter.letterWriter.publicAddress);\r\n                  }}\r\n                >\r\n                  {letter.letterWriter?.name}\r\n                </Button>\r\n              </OverlayTrigger>\r\n            </div>\r\n            <OverlayTrigger\r\n              placement=\"top\"\r\n              overlay={\r\n                <Tooltip id=\"main-button\">\r\n                  <div>\r\n                    {!selectIsOpen ? \"Edit the list of intended recipients\" : \"Close edit\"}\r\n                  </div>\r\n                </Tooltip>\r\n              }\r\n            >\r\n              <Button\r\n                // TODO: add Tooltip\r\n                variant=\"outline-light\"\r\n                className=\"flex-shrink-1 float-right ml-3\"\r\n                onClick={(e: any) => {\r\n                  e.stopPropagation();\r\n                  if (selectIsOpen) {\r\n                    this.closeSelectModal();\r\n                  } else {\r\n                    this.openSelectModal();\r\n                  }\r\n                }}\r\n              >\r\n                Edit\r\n              </Button>\r\n            </OverlayTrigger>\r\n            <OverlayTrigger\r\n              placement=\"top\"\r\n              overlay={\r\n                <Tooltip id=\"main-button\">\r\n                  <div>\r\n                      {!historyIsOpen\r\n                      ? \"Check who it has been sent to\"\r\n                      : \"Close letter history\"}\r\n                  </div>\r\n                </Tooltip>\r\n              }\r\n            >\r\n              <span>\r\n              <Button\r\n                disabled={numRecipients === 0}\r\n                variant=\"outline-light\"\r\n                className=\"flex-shrink-1 float-right ml-3\"\r\n                onClick={(e: any) => {\r\n                  e.stopPropagation();\r\n                  if (historyIsOpen) {\r\n                    this.closeHistoryModal();\r\n                  } else {\r\n                    this.openHistoryModal();\r\n                  }\r\n                }}\r\n              >\r\n                History\r\n              </Button>\r\n              </span>\r\n            </OverlayTrigger>\r\n            {/* <OverlayTrigger\r\n              placement=\"top\"\r\n              overlay={\r\n                <Tooltip id=\"main-buttons\">\r\n                  {!collapseIsOpen ? \"See details\" : \"Close\"}\r\n                </Tooltip>\r\n              }\r\n            >\r\n              <Button\r\n                variant=\"outline-light\"\r\n                className=\"flex-shrink-1 float-right ml-3\"\r\n                onClick={(e: any) => {\r\n                  e.stopPropagation();\r\n                  this.setState({ collapseIsOpen: !collapseIsOpen });\r\n                }}\r\n                aria-controls=\"example-collapse-text\"\r\n                aria-expanded={collapseIsOpen}\r\n              >\r\n                *\r\n              </Button>\r\n            </OverlayTrigger> */}\r\n          </Card.Header>\r\n        </Card>\r\n        <Collapse in={collapseIsOpen}>\r\n          <div className=\"collapse-body-select\">\r\n            {loadingSelect && (\r\n              <div className=\"d-flex justify-content-center\">\r\n                <Spinner\r\n                  className=\"mb-3\"\r\n                  animation=\"border\"\r\n                  variant=\"secondary\"\r\n                />\r\n              </div>\r\n            )}\r\n            {!loadingSelect && selectIsOpen && (\r\n              <div>\r\n                <Select\r\n                  user={user}\r\n                  previouslySelectedRecipients={\r\n                    this.state.previouslySelectedRecipients\r\n                  }\r\n                  header=\"Edit Recipients\"\r\n                  onClose={this.closeSelectModal.bind(this)}\r\n                  onSubmit={this.openMessageModal.bind(this)}\r\n                  users={users.filter((user: User) => {\r\n                    let b =\r\n                      user.publicAddress !== letter.letterWriter.publicAddress;\r\n                    if (b) {\r\n                      for (let i = 0; i < sentRecipients.length; i++) {\r\n                        b =\r\n                          user.publicAddress !==\r\n                          sentRecipients[i]?.publicAddress;\r\n                      }\r\n                    }\r\n                    return b;\r\n                  })}\r\n                ></Select>\r\n              </div>\r\n            )}\r\n            {loadingHistory && (\r\n              <div className=\"d-flex justify-content-center\">\r\n                <Spinner\r\n                  className=\"mb-3\"\r\n                  animation=\"border\"\r\n                  variant=\"secondary\"\r\n                />\r\n              </div>\r\n            )}\r\n            {!loadingHistory && historyIsOpen && (\r\n              <div className=\"\">\r\n                <FileHistory\r\n                  user={user}\r\n                  history={history}\r\n                  onClose={this.closeHistoryModal.bind(this)}\r\n                ></FileHistory>\r\n              </div>\r\n            )}\r\n            {!selectIsOpen && !historyIsOpen && (\r\n              <div className=\"display-text d-flex text-white-50\">\r\n                <div className=\"flex-fill\">\r\n                  Requested: {letter.requestedAt?.toString()}\r\n                </div>\r\n                {letter.uploadedAt && (\r\n                  <div className=\" flex-shrink-1 float-right\">\r\n                    Uploaded: {letter.uploadedAt?.toString()}\r\n                  </div>\r\n                )}\r\n                {!letter.uploadedAt && (\r\n                  <div className=\" flex-shrink-1 float-right\">Your letter has not been uploaded</div>\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </Collapse>\r\n\r\n        <Modal\r\n          id=\"profile-modal\"\r\n          show={profileIsOpen}\r\n          onHide={this.closeProfileModal.bind(this)}\r\n          // backdrop=\"static\"\r\n          animation={false}\r\n          className=\"modal\"\r\n          scrollable={false}\r\n          // size=\"sm\"\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>{this.state.selectedUserProfile?.name}</Modal.Title>\r\n          </Modal.Header>\r\n\r\n          <Modal.Body>\r\n            <Profile\r\n              user={this.state.selectedUserProfile}\r\n              onClose={this.closeProfileModal.bind(this)}\r\n            />\r\n          </Modal.Body>\r\n        </Modal>\r\n\r\n        <Modal\r\n          id=\"confirm-modal\"\r\n          show={confirmIsOpen}\r\n          onHide={this.closeConfirmModal.bind(this)}\r\n          // backdrop=\"static\"\r\n          animation={false}\r\n          className=\"modal\"\r\n          scrollable={false}\r\n          // size=\"sm\"\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Please Confirm</Modal.Title>\r\n          </Modal.Header>\r\n\r\n          <Modal.Body>\r\n            <Confirm\r\n              user={this.props.user}\r\n              custom={false}\r\n              onConfirm={this.onSelectSubmit.bind(this)}\r\n              onClose={this.closeConfirmModal.bind(this)}\r\n            />\r\n          </Modal.Body>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RequestorLetterDisplay;\r\n","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  InputGroup,\r\n  Card,\r\n  OverlayTrigger,\r\n  Tooltip,\r\n  Spinner,\r\n  Row,\r\n  Col,\r\n} from \"react-bootstrap\";\r\nimport { Typeahead } from \"react-bootstrap-typeahead\";\r\nimport { Fragment } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSync } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport User from \"../common/User.interface\";\r\nimport UserAuth from \"../common/UserAuth.interface\";\r\nimport LetterDetails from \"../common/LetterDetails.interface\";\r\nimport ResponseBody from \"../common/ResponseBody.interface\";\r\nimport Select from \"../components/Select\";\r\nimport RequestorLetterDisplay from \"../RequestorLetterDisplay/RequestorLetterDisplay\";\r\nimport Confirm from \"../components/Confirm\";\r\nimport \"./Requestor.css\";\r\nimport CacheService from \"../services/CacheService\";\r\n\r\ninterface RequestorProps {\r\n  user: UserAuth;\r\n}\r\n\r\ninterface RequestorState {\r\n  users: User[];\r\n  letters: LetterDetails[];\r\n  numRecipients: Number[];\r\n  loadingLetters: boolean;\r\n  dualMode: boolean;\r\n  loadingSelect: boolean;\r\n  selectIsOpen: boolean;\r\n  messageIsOpen: boolean;\r\n  confirmIsOpen: boolean;\r\n  selectedWriter: User[];\r\n  selectedRecipients: User[];\r\n}\r\n\r\nclass Requestor extends React.Component<RequestorProps, RequestorState> {\r\n  private writerTypeahead = React.createRef<Typeahead<User>>();\r\n\r\n  constructor(props: RequestorProps) {\r\n    super(props);\r\n    this.state = {\r\n      users: [],\r\n      letters: [],\r\n      numRecipients: [],\r\n      loadingLetters: true,\r\n      dualMode: false,\r\n      loadingSelect: false,\r\n      selectIsOpen: false,\r\n      messageIsOpen: false,\r\n      confirmIsOpen: false,\r\n      selectedWriter: [],\r\n      selectedRecipients: [],\r\n    };\r\n  }\r\n\r\n  componentWillMount() {\r\n    // api call to get users and letters\r\n    // TODO: move users fetch to parent component\r\n    this.loadUsersList();\r\n    this.loadLettersList();\r\n  }\r\n\r\n  async loadUsersList() {\r\n    const userFetchUrl = `/api/v1/users`;\r\n    const userInit: RequestInit = {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        auth: {\r\n          jwtToken: this.props.user.jwtToken,\r\n          publicAddress: this.props.user.publicAddress,\r\n        },\r\n        data: {},\r\n      }),\r\n    };\r\n\r\n    // get user profile from server\r\n    fetch(`${process.env.REACT_APP_BACKEND_URL}${userFetchUrl}`, userInit)\r\n      .then((response) => {\r\n        response\r\n          .json()\r\n          .then((body: ResponseBody) => {\r\n            const data: User[] = body.data;\r\n            console.log(response);\r\n            console.log(body.data);\r\n            if (data) {\r\n              this.setState({\r\n                users: data,\r\n              });\r\n            } else {\r\n              console.log(\"problem with response data for requestor\");\r\n            }\r\n          })\r\n          .catch((e: Error) => {\r\n            console.log(e);\r\n          });\r\n      })\r\n      .catch((e: Error) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  async loadLettersList() {\r\n    const letterFetchUrl = `/api/v1/letters/requested`;\r\n    const letterInit: RequestInit = {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        auth: {\r\n          jwtToken: this.props.user.jwtToken,\r\n          publicAddress: this.props.user.publicAddress,\r\n        },\r\n        data: {},\r\n      }),\r\n    };\r\n\r\n    // get letters from server\r\n    fetch(`${process.env.REACT_APP_BACKEND_URL}${letterFetchUrl}`, letterInit)\r\n      .then((response) => {\r\n        response\r\n          .json()\r\n          .then((body: ResponseBody) => {\r\n            const data: { letters: LetterDetails[]; numRecipients: Number[] } =\r\n              body.data;\r\n            console.log(response);\r\n            console.log(body.data);\r\n            if (data && data.letters && data.numRecipients) {\r\n              this.setState({\r\n                letters: data.letters,\r\n                numRecipients: data.numRecipients,\r\n                loadingLetters: false,\r\n              });\r\n            } else {\r\n              this.setState({ loadingLetters: false });\r\n            }\r\n          })\r\n          .catch((e: Error) => {\r\n            console.log(e);\r\n          });\r\n      })\r\n      .catch((e: Error) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  async closeSelectModal() {\r\n    console.log(\"closing select modal\");\r\n    this.setState({ selectIsOpen: false, selectedWriter: [], dualMode: false });\r\n  }\r\n\r\n  async openSelectModal() {\r\n    console.log(\"opening select modal\");\r\n    if (this.state.selectedWriter.length !== 0) {\r\n      this.setState({\r\n        selectIsOpen: true,\r\n        dualMode: true,\r\n        selectedRecipients: [],\r\n      });\r\n    }\r\n  }\r\n\r\n  async onSelectSubmit(customMessage: string) {\r\n    console.log(\"on select submit\");\r\n\r\n    // TODO: necessary checks before fetching backend to create new request with letter details and indicated list of recipients\r\n    const fetchUrl = `/api/v1/letters/create`;\r\n    this.sendNewLetterRequestToServer(fetchUrl, customMessage);\r\n  }\r\n\r\n  async sendNewLetterRequestToServer(fetchUrl: string, customMessage: string) {\r\n    const init: RequestInit = {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        auth: {\r\n          jwtToken: this.props.user.jwtToken,\r\n          publicAddress: this.props.user.publicAddress,\r\n        },\r\n        data: {\r\n          selectedRecipients: this.state.selectedRecipients,\r\n          letterWriter: this.state.selectedWriter[0].publicAddress,\r\n          customMessage: customMessage,\r\n        },\r\n      }),\r\n    };\r\n\r\n    try {\r\n      let response = await fetch(\r\n        `${process.env.REACT_APP_BACKEND_URL}${fetchUrl}`,\r\n        init\r\n      );\r\n      if (response.status === 400) {\r\n        console.log(response.status);\r\n      } else {\r\n        let body = await response.json();\r\n        const data: { letters: LetterDetails[]; numRecipients: Number[] } =\r\n          body.data;\r\n        console.log(response);\r\n        console.log(data);\r\n        if (data) {\r\n          // let l = this.state.letters;\r\n          // l.push(data.letter);\r\n\r\n          // let n = this.state.numRecipients;\r\n          // n.push(data.numRecipient);\r\n\r\n          this.setState({\r\n            confirmIsOpen: false,\r\n            letters: data.letters,\r\n            numRecipients: data.numRecipients,\r\n            selectIsOpen: false,\r\n            dualMode: false,\r\n            selectedWriter: [],\r\n          });\r\n        }\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  async openMessageModal(selectedRecipients: User[]) {\r\n    this.setState({ selectedRecipients: selectedRecipients });\r\n    this.openConfirmModal();\r\n  }\r\n\r\n  async closeMessageModal() {}\r\n\r\n  async openConfirmModal() {\r\n    console.log(\"open confirm modal\");\r\n    this.setState({ confirmIsOpen: true });\r\n  }\r\n\r\n  async closeConfirmModal() {\r\n    console.log(\"close confirm modal\");\r\n    this.setState({ confirmIsOpen: false });\r\n  }\r\n\r\n  render() {\r\n    const user = this.props.user;\r\n    const {\r\n      users,\r\n      letters,\r\n      numRecipients,\r\n      loadingLetters,\r\n      dualMode,\r\n      selectIsOpen,\r\n      messageIsOpen,\r\n      confirmIsOpen,\r\n      selectedWriter,\r\n    } = this.state;\r\n\r\n    // const options = range(0, 1000).map((o) => `Item ${o}`);\r\n    const options = this.state.users;\r\n\r\n    const selectWriter = (\r\n      <Fragment>\r\n        <InputGroup className=\"d-flex justify-content-between border-radius button-blur mb-0\">\r\n          <div\r\n            className=\"flex-fill single-typeahead\"\r\n            onClick={() => {\r\n              this.setState({ selectedWriter: [] });\r\n            }}\r\n          >\r\n            <Typeahead\r\n              id=\"select-writer-typeahead\"\r\n              // minLength={2}\r\n              labelKey=\"name\"\r\n              filterBy={[\"name\", \"publicAddress\"]}\r\n              options={options}\r\n              placeholder=\"Select a Writer\"\r\n              paginate={true}\r\n              selected={this.state.selectedWriter}\r\n              onChange={(selected) => {\r\n                console.log(\"selected\", selected);\r\n                this.setState({\r\n                  selectedWriter: selected,\r\n                  selectIsOpen: true,\r\n                  dualMode: true,\r\n                });\r\n              }}\r\n              renderMenuItemChildren={\r\n                (option) =>\r\n                  `${option.name} (${option.publicAddress.slice(0, 6)} . . . )` // TODO: add padding with service\r\n              }\r\n              ref={this.writerTypeahead}\r\n            />\r\n          </div>\r\n\r\n          {/* {dualMode && (\r\n            <Button\r\n              variant=\"outline-light\"\r\n              className=\"ml-4 flex-shrink-1\"\r\n              onClick={() => {\r\n                if (selectIsOpen) {\r\n                  this.closeSelectModal();\r\n                } else {\r\n                  this.openSelectModal();\r\n                }\r\n              }}\r\n            >\r\n              {selectIsOpen ? \"Close\" : \"Select\"}\r\n            </Button>\r\n          )} */}\r\n\r\n          {/* {selectedWriter.length !== 0 && (\r\n            <Button\r\n              variant=\"outline-light\"\r\n              className=\"flex-shrink-1\"\r\n              onClick={() => {\r\n                if (selectIsOpen) {\r\n                  this.closeSelectModal();\r\n                } else {\r\n                  this.openSelectModal();\r\n                }\r\n              }}\r\n            >\r\n              {selectIsOpen ? \"Close\" : \"Select\"}\r\n            </Button>\r\n          )} */}\r\n\r\n          {/* {selectedWriter.length === 0 && (\r\n            <OverlayTrigger\r\n              overlay={\r\n                <Tooltip id=\"tooltip-disabled\">\r\n                  Select An User\r\n                </Tooltip>\r\n              }\r\n            >\r\n              <span className=\"d-inline-block\">\r\n                <Button\r\n                  variant=\"outline-light\"\r\n                  className=\"flex-shrink-1\"\r\n                  disabled\r\n                  style={{ pointerEvents: \"none\" }}\r\n                  onClick={() => {\r\n                    if (selectIsOpen) {\r\n                      this.closeSelectModal();\r\n                    } else {\r\n                      this.openSelectModal();\r\n                    }\r\n                  }}\r\n                >\r\n                  {selectIsOpen ? \"Close\" : \"Select\"}\r\n                </Button>\r\n              </span>\r\n            </OverlayTrigger>\r\n          )} */}\r\n        </InputGroup>\r\n      </Fragment>\r\n    );\r\n\r\n    const lettersList = letters.map((l, k) => (\r\n      <RequestorLetterDisplay\r\n        user={user}\r\n        letter={l}\r\n        numRecipients={numRecipients[k]}\r\n        users={users}\r\n      />\r\n    ));\r\n\r\n    const requestorSelect = (\r\n      <div className=\"requestor-select\">\r\n        <div className=\"requestor-header\">\r\n          <h3 className=\"mb-3\">New Request</h3>\r\n        </div>\r\n        <Card.Header className=\"requestor-select-writer\">\r\n          <div>{selectWriter}</div>\r\n        </Card.Header>\r\n        {selectIsOpen && selectedWriter.length === 1 && (\r\n          <div className=\"collapse-body-select\">\r\n            <Select\r\n              user={this.props.user}\r\n              previouslySelectedRecipients={[]}\r\n              header=\"Select Recipients\"\r\n              onClose={this.closeSelectModal.bind(this)}\r\n              onSubmit={this.openMessageModal.bind(this)}\r\n              users={this.state.users.filter(\r\n                (user: User) =>\r\n                  user.publicAddress !== selectedWriter[0].publicAddress\r\n              )}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n\r\n    const requestorLetter = (\r\n      <div className=\"requestor-letters\">\r\n        <h3> {letters.length !== 0 ? \"Requests\" : \"\"} </h3>\r\n        <div className=\"requestor-letterslist\">{lettersList}</div>\r\n      </div>\r\n    );\r\n\r\n    const requestorFooter = (\r\n      <div className=\"requestor-footer button-blur-no-border text-white-50\">\r\n        <span> Product of Team Gas</span>\r\n        <Button\r\n          variant=\"outline-light\"\r\n          onClick={() => {\r\n            this.setState({ letters: [], loadingLetters: true });\r\n            this.loadLettersList();\r\n          }}\r\n        >\r\n          <FontAwesomeIcon icon={faSync} />\r\n        </Button>\r\n      </div>\r\n    );\r\n\r\n    return (\r\n      <>\r\n        {!loadingLetters && letters.length === 0 && (\r\n          <Col className=\"requestor\">\r\n            <Row>{requestorSelect}</Row>\r\n            <Row>{requestorFooter}</Row>\r\n          </Col>\r\n        )}\r\n\r\n        {!loadingLetters && !dualMode && letters.length !== 0 && (\r\n          <Col className=\"requestor\">\r\n            <Row>{requestorSelect}</Row>\r\n            <Row>{requestorLetter}</Row>\r\n            <Row>{requestorFooter}</Row>\r\n          </Col>\r\n        )}\r\n\r\n        {!loadingLetters && dualMode && letters.length !== 0 && (\r\n          <Col className=\"requestor-dual\">\r\n            <Row>\r\n              <Col className=\"ml-5 mr-5\">\r\n                <Row>{requestorSelect}</Row>\r\n                {/* <Row>{requestorFooter}</Row> */}\r\n              </Col>\r\n              <Col className=\"mr-5 ml-5\">\r\n                <Row>{requestorLetter}</Row>\r\n                {/* <Row>{requestorFooter}</Row> */}\r\n              </Col>\r\n            </Row>\r\n            <Row>{requestorFooter}</Row>\r\n          </Col>\r\n        )}\r\n\r\n        {loadingLetters && (\r\n          <div className=\"d-flex justify-content-center absolute-center\">\r\n            <Spinner className=\"\" animation=\"border\" variant=\"secondary\" />\r\n          </div>\r\n        )}\r\n\r\n        <Modal\r\n          id=\"confirm-modal\"\r\n          show={confirmIsOpen}\r\n          onHide={this.closeConfirmModal.bind(this)}\r\n          // backdrop=\"static\"\r\n          animation={false}\r\n          className=\"modal\"\r\n          scrollable={false}\r\n          // size=\"xl\"\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Please Confirm</Modal.Title>\r\n          </Modal.Header>\r\n\r\n          <Modal.Body>\r\n            <Confirm\r\n              user={this.props.user}\r\n              custom={true}\r\n              onConfirm={this.onSelectSubmit.bind(this)}\r\n              onClose={this.closeConfirmModal.bind(this)}\r\n            />\r\n          </Modal.Body>\r\n        </Modal>\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default Requestor;\r\n","import React from \"react\";\r\nimport { Fragment } from \"react\";\r\nimport {\r\n  Card,\r\n  Button,\r\n  Spinner,\r\n  Modal,\r\n  Collapse,\r\n  Col,\r\n  Row,\r\n  Tooltip,\r\n  OverlayTrigger,\r\n} from \"react-bootstrap\";\r\nimport UserProfile from \"../common/UserProfile.interface\";\r\nimport UserAuth from \"../common/UserAuth.interface\";\r\nimport LetterHistory from \"../common/LetterHistory.interface\";\r\nimport RequestBody from \"../common/RequestBody.interface\";\r\nimport ResponseBody from \"../common/ResponseBody.interface\";\r\nimport \"./RecipientLetterDisplay.css\";\r\nimport LetterDetails from \"../common/LetterDetails.interface\";\r\n\r\nimport FileData from \"../common/FileData.interface\";\r\nimport CryptService from \"../services/CryptService\";\r\nimport CacheService from \"../services/CacheService\";\r\n\r\nimport FileUpload from \"../components/FileUpload/FileUpload\";\r\nimport FileView from \"../components/FileView/FileView\";\r\nimport Confirm from \"../components/Confirm/Confirm\";\r\nimport FileHistory from \"../components/FileHistory\";\r\nimport Profile from \"../components/Profile\";\r\n\r\ninterface RecipientLetterDisplayProps {\r\n  user: UserAuth;\r\n  letter: LetterDetails;\r\n  numRecipients: Number;\r\n}\r\ninterface RecipientLetterDisplayState {\r\n  history: LetterHistory[];\r\n  loadingHistory: boolean;\r\n  loadingView: boolean;\r\n  profileIsOpen: boolean;\r\n  historyIsOpen: boolean;\r\n  uploadIsOpen: boolean;\r\n  viewIsOpen: boolean;\r\n  confirmIsOpen: boolean;\r\n  collapseIsOpen: boolean;\r\n  selectedUserProfile?: UserProfile;\r\n  uploadedFile?: File;\r\n  fileData?: FileData;\r\n}\r\n\r\nclass RecipientLetterDisplay extends React.Component<\r\n  RecipientLetterDisplayProps,\r\n  RecipientLetterDisplayState\r\n> {\r\n  private uploadModal = React.createRef<FileUpload>();\r\n  private viewModal = React.createRef<FileView>();\r\n  private userProfiles: Map<string, UserProfile>;\r\n  private cryptService: CryptService;\r\n  private cacheService: CacheService<string, string>;\r\n\r\n  constructor(props: RecipientLetterDisplayProps) {\r\n    super(props);\r\n    this.state = {\r\n      history: [],\r\n      loadingHistory: false,\r\n      loadingView: false,\r\n      profileIsOpen: false,\r\n      historyIsOpen: false,\r\n      uploadIsOpen: false,\r\n      viewIsOpen: false,\r\n      confirmIsOpen: false,\r\n      collapseIsOpen: false,\r\n    };\r\n\r\n    this.userProfiles = new Map<string, UserProfile>();\r\n    this.cryptService = new CryptService();\r\n    this.cacheService = new CacheService(1);\r\n  }\r\n\r\n  async openViewModal() {\r\n    console.log(\"opening view modal\");\r\n    this.setState({ viewIsOpen: true});\r\n    const letterId = this.props.letter.letterId;\r\n    const fetchUrl = `/api/v1/letters/${letterId}/recipientContents`;\r\n    console.log(\"letterId\", letterId);\r\n    let encryptedLetter = this.cacheService.get(letterId);\r\n    if (encryptedLetter === null) {\r\n      this.setState({loadingView: true});\r\n      this.retrieveLetterContentsFromServer(fetchUrl);\r\n    } else {\r\n      try {\r\n        let fileData = await this.cryptService.decrypt(\r\n          encryptedLetter,\r\n          this.props.user.publicAddress\r\n        );\r\n\r\n        console.log(fileData.letterType);\r\n        this.setState({\r\n          fileData: fileData,\r\n        });\r\n      } catch (error) {\r\n        console.log(\"error with decryption\");\r\n      }\r\n    }\r\n  }\r\n\r\n  closeViewModal() {\r\n    console.log(\"closing view modal\");\r\n    this.setState({ viewIsOpen: false, fileData: undefined });\r\n  }\r\n\r\n  retrieveLetterContentsFromServer(fetchUrl: string) {\r\n    console.log(\"retrieving from server\");\r\n    const init: RequestInit = {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        auth: {\r\n          jwtToken: this.props.user.jwtToken,\r\n          publicAddress: this.props.user.publicAddress,\r\n        },\r\n        data: {},\r\n      }),\r\n    };\r\n    const letterId = this.props.letter.letterId;\r\n    // get letter from server\r\n    fetch(`${process.env.REACT_APP_BACKEND_URL}${fetchUrl}`, init)\r\n      .then((response) => {\r\n        console.log(\"logging response\");\r\n        console.log(response);\r\n        return response.json();\r\n      })\r\n      .then((body: ResponseBody) => {\r\n        const e: {\r\n          letterRecipientContents: {\r\n            letterContents: string;\r\n            letterSignature: string;\r\n          };\r\n        } = body.data;\r\n\r\n        console.log(e);\r\n        // decrypt letter\r\n        this.cryptService\r\n          .decrypt(\r\n            e.letterRecipientContents?.letterContents,\r\n            this.props.user.publicAddress\r\n          )\r\n          .then((fileData) => {\r\n            if (fileData) {\r\n              this.setState({\r\n                fileData: fileData,\r\n                loadingView: false,\r\n              });\r\n            }\r\n          })\r\n          .catch((e: Error) => {\r\n            // alert(\"Failed to Decrypt Retrieved Letter . . . \");\r\n            this.setState({\r\n              loadingView: false,\r\n            });\r\n          });\r\n      })\r\n      .catch((e: Error) => {\r\n        console.log(e);\r\n        this.setState({loadingView: true});\r\n      });\r\n  }\r\n\r\n  async openMessageModal(file: File) {\r\n    this.setState({ uploadedFile: file });\r\n    this.openConfirmModal();\r\n  }\r\n\r\n  async closeMessageModal() {}\r\n\r\n  async closeProfileModal() {\r\n    console.log(\"closing profile modal\");\r\n    this.setState({ profileIsOpen: false, selectedUserProfile: undefined });\r\n  }\r\n\r\n  async openProfileModal(publicAddress: string) {\r\n    console.log(\"opening profile modal\");\r\n    const userProfile = this.userProfiles.get(publicAddress);\r\n    console.log(userProfile);\r\n    if (userProfile === undefined) {\r\n      this.setState({ profileIsOpen: true });\r\n      const fetchUrl = `/api/v1/users/${publicAddress}/profile`;\r\n      this.retrieveProfileFromServer(fetchUrl);\r\n    } else {\r\n      this.setState({ selectedUserProfile: userProfile, profileIsOpen: true });\r\n    }\r\n  }\r\n\r\n  async retrieveProfileFromServer(fetchUrl: string) {\r\n    const init: RequestInit = {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        auth: {\r\n          jwtToken: this.props.user.jwtToken,\r\n          publicAddress: this.props.user.publicAddress,\r\n        },\r\n        data: {},\r\n      }),\r\n    };\r\n\r\n    try {\r\n      let response = await fetch(\r\n        `${process.env.REACT_APP_BACKEND_URL}${fetchUrl}`,\r\n        init\r\n      );\r\n\r\n      if (response.status === 400) {\r\n        console.log(response.status);\r\n        // this.setState({\r\n        //   profileIsOpen: false,\r\n        // });\r\n      } else {\r\n        let body = await response.json();\r\n        const data: UserProfile[] = body.data;\r\n        console.log(response);\r\n        console.log(data);\r\n        if (data && data.length !== 0) {\r\n          this.userProfiles.set(data[0].publicAddress, data[0]);\r\n          this.setState({\r\n            selectedUserProfile: data[0],\r\n          });\r\n        } else {\r\n          // this.setState({\r\n          //   profileIsOpen: false,\r\n          // });\r\n        }\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n      // this.setState({\r\n      //   profileIsOpen: false,\r\n      // });\r\n    }\r\n  }\r\n\r\n  async closeHistoryModal() {\r\n    console.log(\"closing history modal\");\r\n    this.setState({\r\n      historyIsOpen: false,\r\n      loadingHistory: false,\r\n      collapseIsOpen: this.state.viewIsOpen,\r\n    });\r\n  }\r\n\r\n  async openHistoryModal() {\r\n    console.log(\"opening history modal\");\r\n\r\n    if (this.state.history.length === 0) {\r\n      this.setState({\r\n        loadingHistory: true,\r\n        historyIsOpen: true,\r\n        collapseIsOpen: true,\r\n      });\r\n      const letterId = this.props.letter.letterId;\r\n      const fetchUrl = `/api/v1/letters/${letterId}/history`;\r\n      this.retrieveHistoryFromServer(fetchUrl);\r\n    } else {\r\n      this.setState({\r\n        historyIsOpen: true,\r\n        collapseIsOpen: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  async retrieveHistoryFromServer(fetchUrl: string) {\r\n    const init: RequestInit = {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        auth: {\r\n          jwtToken: this.props.user.jwtToken,\r\n          publicAddress: this.props.user.publicAddress,\r\n        },\r\n        data: {},\r\n      }),\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `${process.env.REACT_APP_BACKEND_URL}${fetchUrl}`,\r\n        init\r\n      );\r\n      if (response.status === 400) {\r\n        console.log(response.status);\r\n        this.setState({\r\n          // historyIsOpen: false,\r\n          loadingHistory: false,\r\n          // collapseIsOpen: this.state.selectIsOpen,\r\n        });\r\n      } else {\r\n        const body = await response.json();\r\n\r\n        const data: LetterHistory[] = body.data;\r\n        console.log(response);\r\n        console.log(data);\r\n        if (data) {\r\n          this.setState({\r\n            history: data,\r\n            loadingHistory: false,\r\n          });\r\n        } else {\r\n          console.log(\"fetch for letterHistory failed\");\r\n          this.setState({\r\n            // historyIsOpen: false,\r\n            loadingHistory: false,\r\n            // collapseIsOpen: this.state.selectIsOpen,\r\n          });\r\n        }\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n      this.setState({\r\n        // historyIsOpen: false,\r\n        loadingHistory: false,\r\n        // collapseIsOpen: this.state.selectIsOpen,\r\n      });\r\n    }\r\n  }\r\n\r\n  async openConfirmModal() {\r\n    console.log(\"open confirm modal\");\r\n    this.setState({ confirmIsOpen: true });\r\n  }\r\n\r\n  async closeConfirmModal() {\r\n    console.log(\"close confirm modal\");\r\n    this.setState({ confirmIsOpen: false });\r\n  }\r\n\r\n  render() {\r\n    const { user, letter, numRecipients } = this.props;\r\n    const {\r\n      history,\r\n      loadingHistory,\r\n      loadingView,\r\n      profileIsOpen,\r\n      historyIsOpen,\r\n      uploadIsOpen,\r\n      viewIsOpen,\r\n      confirmIsOpen,\r\n      collapseIsOpen,\r\n      fileData,\r\n    } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <Card className=\"full-width opacity-0\">\r\n          <Card.Header\r\n            className=\"d-flex justify-content-between button-blur letter-entry\"\r\n            onClick={() => this.setState({ collapseIsOpen: !collapseIsOpen })}\r\n          >\r\n            <div className=\"flex-fill\">\r\n              <span className=\"mr-3\">From:</span>\r\n              <OverlayTrigger\r\n                placement=\"top\"\r\n                overlay={\r\n                  <Tooltip id=\"main-buttons\">\r\n                    <div>View {letter.letterWriter?.name}'s profile</div>\r\n                  </Tooltip>\r\n                }\r\n              >\r\n                <Button\r\n                  variant=\"outline-light\"\r\n                  onClick={(e: any) => {\r\n                    e.stopPropagation();\r\n                    this.openProfileModal(letter.letterWriter.publicAddress);\r\n                  }}\r\n                >\r\n                  {letter.letterWriter?.name}\r\n                </Button>\r\n              </OverlayTrigger>\r\n            </div>\r\n            {/* <Button\r\n              // TODO: add Tooltip\r\n              variant=\"outline-light\"\r\n              className=\"flex-shrink-1 float-right ml-3\"\r\n              onClick={(e: any) => {\r\n                e.stopPropagation();\r\n                if (uploadIsOpen) {\r\n                  this.closeUploadModal();\r\n                } else {\r\n                  this.openUploadModal();\r\n                }\r\n              }}\r\n            >\r\n              Upload\r\n            </Button> */}\r\n            {/* <div className=\"flex-shrink-1 float-right\">\r\n              <span className=\"mr-3\">For:</span>\r\n              <OverlayTrigger\r\n                placement=\"top\"\r\n                overlay={\r\n                  <Tooltip id=\"main-buttons\">\r\n                    <div>View {letter.letterRequestor?.name}'s profile</div>\r\n                  </Tooltip>\r\n                }\r\n              >\r\n                <Button\r\n                  variant=\"outline-light\"\r\n                  onClick={(e: any) => {\r\n                    e.stopPropagation();\r\n                    this.openProfileModal(letter.letterRequestor.publicAddress);\r\n                  }}\r\n                >\r\n                  {letter.letterRequestor?.name}\r\n                </Button>\r\n              </OverlayTrigger>\r\n            </div> */}\r\n            <OverlayTrigger\r\n              placement=\"top\"\r\n              overlay={\r\n                <Tooltip id=\"main-buttons\">\r\n                  View letter for {letter.letterRequestor?.name}\r\n                </Tooltip>\r\n              }\r\n            >\r\n              <Button\r\n                // TODO: add Tooltip\r\n                variant=\"outline-light\"\r\n                className=\"flex-shrink-1 float-right ml-3\"\r\n                onClick={(e: any) => {\r\n                  e.stopPropagation();\r\n                  if (viewIsOpen) {\r\n                    this.closeViewModal();\r\n                  } else {\r\n                    this.openViewModal();\r\n                  }\r\n                }}\r\n              >\r\n                View\r\n              </Button>\r\n            </OverlayTrigger>\r\n\r\n            {/* <Button\r\n              variant=\"outline-light\"\r\n              className=\"flex-shrink-1 float-right ml-3\"\r\n              onClick={(e: any) => {\r\n                e.stopPropagation();\r\n                this.setState({ collapseIsOpen: !collapseIsOpen });\r\n              }}\r\n              aria-controls=\"example-collapse-text\"\r\n              aria-expanded={collapseIsOpen}\r\n            >\r\n              *\r\n            </Button>*/}\r\n          </Card.Header>\r\n        </Card>\r\n        <Collapse in={collapseIsOpen}>\r\n          <div className=\"collapse-body-select\">\r\n            {/* {uploadIsOpen && (\r\n              <div>\r\n                <FileUpload\r\n                  ref={this.uploadModal}\r\n                  user={this.props.user}\r\n                  restrictPdf={true}\r\n                  onUpload={this.openMessageModal.bind(this)}\r\n                  onClose={this.closeUploadModal.bind(this)}\r\n                ></FileUpload>\r\n              </div>\r\n            )}\r\n            {loadingHistory && (\r\n              <div className=\"d-flex justify-content-center\">\r\n                <Spinner\r\n                  className=\"mb-3\"\r\n                  animation=\"border\"\r\n                  variant=\"secondary\"\r\n                />\r\n              </div>\r\n            )}\r\n            {!loadingHistory && historyIsOpen && (\r\n              <div className=\"\">\r\n                <FileHistory\r\n                  user={user}\r\n                  history={history}\r\n                  onClose={this.closeHistoryModal.bind(this)}\r\n                ></FileHistory>\r\n              </div>\r\n            )}*/}\r\n            {!uploadIsOpen && !historyIsOpen && (\r\n              <div className=\"display-text d-flex text-white-50\">\r\n                <div className=\"flex-fill\">Letter Information</div>\r\n                {/* <div className=\"flex-fill\">\r\n                  Requested: {letter.requestedAt?.toString()}\r\n                </div>\r\n                {letter.uploadedAt && (\r\n                  <div className=\" flex-shrink-1 float-right\">\r\n                    Uploaded: {letter.uploadedAt?.toString()}\r\n                  </div>\r\n                )}\r\n                {!letter.uploadedAt && (\r\n                  <div className=\" flex-shrink-1 float-right\">Not Uploaded</div>\r\n                )} */}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </Collapse>\r\n\r\n        <Modal\r\n          id=\"profile-modal\"\r\n          show={profileIsOpen}\r\n          onHide={this.closeProfileModal.bind(this)}\r\n          // backdrop=\"static\"\r\n          animation={false}\r\n          className=\"modal\"\r\n          scrollable={false}\r\n          // size=\"sm\"\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>{this.state.selectedUserProfile?.name}</Modal.Title>\r\n          </Modal.Header>\r\n\r\n          <Modal.Body>\r\n            <Profile\r\n              user={this.state.selectedUserProfile}\r\n              onClose={this.closeProfileModal.bind(this)}\r\n            />\r\n          </Modal.Body>\r\n        </Modal>\r\n\r\n        {/* <Modal\r\n          id=\"confirm-modal\"\r\n          show={confirmIsOpen}\r\n          onHide={this.closeConfirmModal.bind(this)}\r\n          // backdrop=\"static\"\r\n          animation={false}\r\n          className=\"modal\"\r\n          scrollable={false}\r\n          // size=\"sm\"\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Please Confirm</Modal.Title>\r\n          </Modal.Header>\r\n\r\n          <Modal.Body>\r\n            <Confirm\r\n              user={this.props.user}\r\n              onConfirm={this.closeConfirmModal.bind(this)}\r\n              onClose={this.closeConfirmModal.bind(this)}\r\n            />\r\n          </Modal.Body>\r\n        </Modal> */}\r\n\r\n        <Modal\r\n          id=\"view-modal\"\r\n          show={viewIsOpen}\r\n          onHide={this.closeViewModal.bind(this)}\r\n          backdrop=\"static\"\r\n          animation={false}\r\n          className=\"w-100\"\r\n          scrollable={false}\r\n          size=\"xl\"\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>For: {letter.letterRequestor?.name}</Modal.Title>\r\n          </Modal.Header>\r\n\r\n          <Modal.Body>\r\n            <FileView\r\n              fileData={fileData}\r\n              loadingView={loadingView}\r\n              ref={this.viewModal}\r\n              user={this.props.user}\r\n              onClose={this.closeViewModal.bind(this)}\r\n            ></FileView>\r\n          </Modal.Body>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RecipientLetterDisplay;\r\n","import React from \"react\";\r\nimport { Fragment } from \"react\";\r\nimport {\r\n  Card,\r\n  Button,\r\n  Spinner,\r\n  Modal,\r\n  Collapse,\r\n  Col,\r\n  Row,\r\n  Tooltip,\r\n  OverlayTrigger,\r\n} from \"react-bootstrap\";\r\nimport UserProfile from \"../common/UserProfile.interface\";\r\nimport UserAuth from \"../common/UserAuth.interface\";\r\nimport RequestBody from \"../common/RequestBody.interface\";\r\nimport ResponseBody from \"../common/ResponseBody.interface\";\r\nimport \"./RecipientUserDisplay.css\";\r\n\r\nimport FileView from \"../components/FileView/FileView\";\r\nimport Profile from \"../components/Profile\";\r\nimport User from \"../common/User.interface\";\r\n\r\ninterface RecipientUserDisplayProps {\r\n  user: UserAuth;\r\n  requestor: User;\r\n  selected: boolean;\r\n  onView: (user: User) => void;\r\n}\r\ninterface RecipientUserDisplayState {\r\n  profileIsOpen: boolean;\r\n  collapseIsOpen: boolean;\r\n  selectedUserProfile?: UserProfile;\r\n}\r\n\r\nclass RecipientUserDisplay extends React.Component<\r\n  RecipientUserDisplayProps,\r\n  RecipientUserDisplayState\r\n> {\r\n  // private viewModal = React.createRef<FileView>();\r\n  private userProfiles: Map<string, UserProfile>;\r\n\r\n  constructor(props: RecipientUserDisplayProps) {\r\n    super(props);\r\n    this.state = {\r\n      profileIsOpen: false,\r\n      collapseIsOpen: false,\r\n    };\r\n\r\n    this.userProfiles = new Map<string, UserProfile>();\r\n  }\r\n\r\n  async openMessageModal() {}\r\n\r\n  async closeMessageModal() {}\r\n\r\n  async closeProfileModal() {\r\n    console.log(\"closing profile modal\");\r\n    this.setState({ profileIsOpen: false, selectedUserProfile: undefined });\r\n  }\r\n\r\n  async openProfileModal(publicAddress: string) {\r\n    console.log(\"opening profile modal\");\r\n    const userProfile = this.userProfiles.get(publicAddress);\r\n    console.log(userProfile);\r\n    if (userProfile === undefined) {\r\n      this.setState({ profileIsOpen: true });\r\n      const fetchUrl = `/api/v1/users/${publicAddress}/profile`;\r\n      this.retrieveProfileFromServer(fetchUrl);\r\n    } else {\r\n      this.setState({ selectedUserProfile: userProfile, profileIsOpen: true });\r\n    }\r\n  }\r\n\r\n  async retrieveProfileFromServer(fetchUrl: string) {\r\n    const init: RequestInit = {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        auth: {\r\n          jwtToken: this.props.user.jwtToken,\r\n          publicAddress: this.props.user.publicAddress,\r\n        },\r\n        data: {},\r\n      }),\r\n    };\r\n\r\n    try {\r\n      let response = await fetch(\r\n        `${process.env.REACT_APP_BACKEND_URL}${fetchUrl}`,\r\n        init\r\n      );\r\n\r\n      if (response.status === 400) {\r\n        console.log(response.status);\r\n        // this.setState({\r\n        //   profileIsOpen: false,\r\n        // });\r\n      } else {\r\n        let body = await response.json();\r\n        const data: UserProfile[] = body.data;\r\n        console.log(response);\r\n        console.log(data);\r\n        if (data && data.length !== 0) {\r\n          this.userProfiles.set(data[0].publicAddress, data[0]);\r\n          this.setState({\r\n            selectedUserProfile: data[0],\r\n          });\r\n        } else {\r\n          // this.setState({\r\n          //   profileIsOpen: false,\r\n          // });\r\n        }\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n      // this.setState({\r\n      //   profileIsOpen: false,\r\n      // });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { user, requestor, selected } = this.props;\r\n    const { profileIsOpen, collapseIsOpen } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <Card className=\"full-width opacity-0\">\r\n          <Card.Header\r\n            className=\"d-flex justify-content-between button-blur letter-entry\"\r\n            onClick={() => this.setState({ collapseIsOpen: !collapseIsOpen })}\r\n          >\r\n            <div className=\"flex-fill\">\r\n              <span className=\"mr-3\">For: </span>\r\n              <OverlayTrigger\r\n                placement=\"top\"\r\n                overlay={\r\n                  <Tooltip id=\"main-buttons\">\r\n                    <div>View {requestor?.name}'s profile</div>\r\n                  </Tooltip>\r\n                }\r\n              >\r\n                <Button\r\n                  variant=\"outline-light\"\r\n                  onClick={(e: any) => {\r\n                    e.stopPropagation();\r\n                    this.openProfileModal(requestor?.publicAddress);\r\n                  }}\r\n                >\r\n                  {requestor?.name}\r\n                </Button>\r\n              </OverlayTrigger>\r\n            </div>\r\n            <OverlayTrigger\r\n              placement=\"top\"\r\n              overlay={\r\n                <Tooltip id=\"main-buttons\">\r\n                  <>\r\n                    {!selected && <div> View letters for {requestor?.name}</div>}\r\n                    {selected && <div> Close letters for {requestor?.name}</div>}\r\n                  </>\r\n                </Tooltip>\r\n              }\r\n            >\r\n              <Button\r\n                // TODO: add Tooltip\r\n                variant=\"outline-light\"\r\n                className=\"flex-shrink-1 float-right ml-3\"\r\n                onClick={(e: any) => {\r\n                  e.stopPropagation();\r\n                  this.props.onView(requestor);\r\n                }}\r\n              >\r\n                {/* {selected ? \"Close\" : \"Letters\"} */}\r\n                Letters\r\n              </Button>\r\n            </OverlayTrigger>\r\n            {/* <OverlayTrigger\r\n              placement=\"top\"\r\n              overlay={\r\n                <Tooltip id=\"main-buttons\">\r\n                  {!collapseIsOpen ? \"See details\" : \"Close\"}\r\n                </Tooltip>\r\n              }\r\n            >\r\n              <Button\r\n                variant=\"outline-light\"\r\n                className=\"flex-shrink-1 float-right ml-3\"\r\n                onClick={(e: any) => {\r\n                  e.stopPropagation();\r\n                  this.setState({ collapseIsOpen: !collapseIsOpen });\r\n                }}\r\n                aria-controls=\"example-collapse-text\"\r\n                aria-expanded={collapseIsOpen}\r\n              >\r\n                *\r\n              </Button>\r\n            </OverlayTrigger> */}\r\n          </Card.Header>\r\n        </Card>\r\n        <Collapse in={collapseIsOpen}>\r\n          <div className=\"collapse-body-select\">\r\n            <div className=\"display-text d-flex text-white-50\">\r\n              <div className=\"flex-fill\">User Information</div>\r\n            </div>\r\n          </div>\r\n        </Collapse>\r\n\r\n        <Modal\r\n          id=\"profile-modal\"\r\n          show={profileIsOpen}\r\n          onHide={this.closeProfileModal.bind(this)}\r\n          // backdrop=\"static\"\r\n          animation={false}\r\n          className=\"modal\"\r\n          scrollable={false}\r\n          // size=\"sm\"\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>{this.state.selectedUserProfile?.name}</Modal.Title>\r\n          </Modal.Header>\r\n\r\n          <Modal.Body>\r\n            <Profile\r\n              user={this.state.selectedUserProfile}\r\n              onClose={this.closeProfileModal.bind(this)}\r\n            />\r\n          </Modal.Body>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RecipientUserDisplay;\r\n","import React from \"react\";\r\nimport { Spinner, Row, Col, Button } from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSync } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport UserAuth from \"../common/UserAuth.interface\";\r\nimport User from \"../common/User.interface\";\r\nimport LetterDetails from \"../common/LetterDetails.interface\";\r\nimport RequestBody from \"../common/RequestBody.interface\";\r\nimport ResponseBody from \"../common/ResponseBody.interface\";\r\nimport CacheService from \"../services/CacheService\";\r\n\r\nimport RecipientLetterDisplay from \"../RecipientLetterDisplay/RecipientLetterDisplay\";\r\nimport RecipientUserDisplay from \"../RecipientUserDisplay/RecipientUserDisplay\";\r\n\r\nimport \"./Recipient.css\";\r\nimport LetterHistory from \"../common/LetterHistory.interface\";\r\n\r\ninterface RecipientProps {\r\n  user: UserAuth;\r\n}\r\n\r\ninterface RecipientState {\r\n  requestors: User[];\r\n  letters: LetterHistory[];\r\n  numRecipients: Number[];\r\n  loadingRequestors: boolean;\r\n  loadingLetters: boolean;\r\n  dualMode: boolean;\r\n  selectedUser?: User;\r\n}\r\n\r\nclass Recipient extends React.Component<RecipientProps, RecipientState> {\r\n  private cacheService: CacheService<string, LetterHistory[]>;\r\n  constructor(props: RecipientProps) {\r\n    super(props);\r\n    this.state = {\r\n      requestors: [],\r\n      letters: [],\r\n      numRecipients: [],\r\n      loadingRequestors: true,\r\n      loadingLetters: false,\r\n      dualMode: false,\r\n    };\r\n    this.cacheService = new CacheService(1);\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.loadRequestorList();\r\n  }\r\n\r\n  async loadRequestorList() {\r\n    const requestorFetchUrl = `/api/v1/letters/receivedRequestors`;\r\n    const init: RequestInit = {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        auth: {\r\n          jwtToken: this.props.user.jwtToken,\r\n          publicAddress: this.props.user.publicAddress,\r\n        },\r\n        data: {},\r\n      }),\r\n    };\r\n\r\n    // get letters from server\r\n    fetch(`${process.env.REACT_APP_BACKEND_URL}${requestorFetchUrl}`, init)\r\n      .then((response) => {\r\n        response\r\n          .json()\r\n          .then((body: ResponseBody) => {\r\n            const data: User[] = body.data;\r\n            console.log(data);\r\n            console.log(response);\r\n            if (data.length !== 0) {\r\n              this.setState({\r\n                requestors: data,\r\n                loadingRequestors: false,\r\n              });\r\n            } else {\r\n              this.setState({ loadingRequestors: false });\r\n            }\r\n          })\r\n          .catch((e: Error) => {\r\n            console.log(e);\r\n          });\r\n      })\r\n      .catch((e: Error) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  async toggleLetterModal(user: User) {\r\n    const selectedUser = this.state.selectedUser;\r\n    if (selectedUser && selectedUser.publicAddress === user.publicAddress) {\r\n      this.setState({ selectedUser: undefined, dualMode: false });\r\n    } else {\r\n      this.setState({\r\n        selectedUser: user,\r\n        dualMode: true,\r\n        loadingLetters: true,\r\n      });\r\n      this.loadLettersList(user.publicAddress);\r\n    }\r\n  }\r\n\r\n  async loadLettersList(publicAddress: string) {\r\n    const letterFetchUrl = `/api/v1/letters/received/${publicAddress}`;\r\n    const lettersList = await this.cacheService.get(publicAddress);\r\n\r\n    if (!lettersList) {\r\n      const init: RequestInit = {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Access-Control-Allow-Origin\": \"*\",\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          auth: {\r\n            jwtToken: this.props.user.jwtToken,\r\n            publicAddress: this.props.user.publicAddress,\r\n          },\r\n          data: {},\r\n        }),\r\n      };\r\n\r\n      // get letters from server\r\n      fetch(`${process.env.REACT_APP_BACKEND_URL}${letterFetchUrl}`, init)\r\n        .then((response) => {\r\n          response\r\n            .json()\r\n            .then((body: ResponseBody) => {\r\n              const data: LetterHistory[] = body.data;\r\n\r\n              console.log(response);\r\n              if (data && data.length > 0) {\r\n                this.cacheService.put(publicAddress, data);\r\n                this.setState({\r\n                  letters: data,\r\n                  loadingLetters: false,\r\n                  dualMode: true,\r\n                });\r\n              } else {\r\n                this.setState({\r\n                  loadingLetters: false,\r\n                });\r\n              }\r\n            })\r\n            .catch((e: Error) => {\r\n              console.log(e);\r\n            });\r\n        })\r\n        .catch((e: Error) => {\r\n          console.log(e);\r\n        });\r\n    } else {\r\n      this.setState({\r\n        letters: lettersList,\r\n        loadingLetters: false,\r\n        dualMode: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { user } = this.props;\r\n    const {\r\n      requestors,\r\n      letters,\r\n      numRecipients,\r\n      loadingRequestors,\r\n      loadingLetters,\r\n      dualMode,\r\n      selectedUser,\r\n    } = this.state;\r\n\r\n    const requestorList = requestors.map((r, k) => (\r\n      <RecipientUserDisplay\r\n        user={user}\r\n        requestor={r}\r\n        selected={r.publicAddress === selectedUser?.publicAddress}\r\n        onView={this.toggleLetterModal.bind(this)}\r\n      />\r\n    ));\r\n\r\n    const lettersList = letters.map((l, k) => (\r\n      <RecipientLetterDisplay\r\n        user={user}\r\n        letter={l}\r\n        numRecipients={numRecipients[k]}\r\n      />\r\n    ));\r\n\r\n    const recipientRequestors = (\r\n      <div className=\"recipient-letters\">\r\n        <div className=\"recipient-header mb-3\">\r\n          <h3> Users </h3>\r\n        </div>\r\n\r\n        <div className=\"recipient-requestorslist\">\r\n          <div>{requestorList}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    const recipientLetters = (\r\n      <div className=\"recipient-letters\">\r\n        <div className=\"recipient-header mb-3\">\r\n          <h3> {selectedUser?.name} </h3>\r\n        </div>\r\n\r\n        <div className=\"recipient-letterslist\">\r\n          <div>{lettersList}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    const recipientFooter = (\r\n      <div className=\"recipient-footer button-blur-no-border text-white-50\">\r\n        <span> Product of Team Gas</span>\r\n        <Button\r\n          variant=\"outline-light\"\r\n          onClick={() => {\r\n            this.setState({\r\n              letters: [],\r\n              requestors: [],\r\n              loadingRequestors: true,\r\n            });\r\n            this.loadRequestorList();\r\n          }}\r\n        >\r\n          <FontAwesomeIcon icon={faSync} />\r\n        </Button>\r\n      </div>\r\n    );\r\n\r\n    return (\r\n      <>\r\n        {!loadingRequestors && requestors.length === 0 && (\r\n          <div className=\"recipient-header absolute-center\">\r\n            <h3> No Letters Received </h3>\r\n          </div>\r\n        )}\r\n\r\n        {!loadingRequestors && !dualMode && requestors.length !== 0 && (\r\n          <Col className=\"recipient\">\r\n            <Row>{recipientRequestors}</Row>\r\n            <Row>{recipientFooter}</Row>\r\n          </Col>\r\n        )}\r\n\r\n        {!loadingRequestors && dualMode && requestors.length !== 0 && (\r\n          <Col className=\"recipient-dual\">\r\n            <Row>\r\n              <Col className=\"ml-5\">\r\n                <Row>{recipientRequestors}</Row>\r\n                {/* <Row>{recipientFooter}</Row> */}\r\n              </Col>\r\n              <Col className=\"ml-5\">\r\n                {!loadingLetters && <Row>{recipientLetters}</Row>}\r\n                {loadingLetters && (\r\n                  <Row>\r\n                    <div className=\"d-flex justify-content-center absolute-center\">\r\n                      <Spinner\r\n                        className=\"\"\r\n                        animation=\"border\"\r\n                        variant=\"secondary\"\r\n                      />\r\n                    </div>\r\n                  </Row>\r\n                )}\r\n              </Col>\r\n            </Row>\r\n            <Row>{recipientFooter}</Row>\r\n          </Col>\r\n        )}\r\n\r\n        {loadingRequestors && (\r\n          <div className=\"d-flex justify-content-center absolute-center\">\r\n            <Spinner className=\"\" animation=\"border\" variant=\"secondary\" />\r\n          </div>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default Recipient;\r\n","import React from \"react\";\r\nimport {\r\n  Button,\r\n  InputGroup,\r\n  FormControl,\r\n  Form,\r\n  Tooltip,\r\n  OverlayTrigger,\r\n} from \"react-bootstrap\";\r\nimport UserAuth from \"../common/UserAuth.interface\";\r\nimport \"./Login.css\";\r\nimport CryptService from \"../services/CryptService\";\r\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faInfoCircle,\r\n  faExclamationTriangle,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport RequestBody from \"../common/RequestBody.interface\";\r\nimport ResponseBody from \"../common/ResponseBody.interface\";\r\n\r\nimport { web3 } from \"../App\";\r\n\r\ninterface LoginProps {\r\n  user: UserAuth;\r\n  callback: (u: UserAuth) => void;\r\n}\r\n\r\ninterface LoginState {\r\n  signingUp: boolean;\r\n  failedKey: boolean;\r\n  invalidEmail: boolean;\r\n  invalidName: boolean;\r\n  signUpSuccess: boolean;\r\n  alreadySignedUp: boolean;\r\n  noAccount: boolean;\r\n  failedSigning: boolean;\r\n  inputEmail: string;\r\n  inputName: string;\r\n  // displayMessage: string;\r\n  loginMode: boolean;\r\n}\r\n\r\nclass Login extends React.Component<LoginProps, LoginState> {\r\n  private cryptService: CryptService;\r\n\r\n  constructor(props: LoginProps) {\r\n    super(props);\r\n    this.state = {\r\n      signingUp: false,\r\n      failedKey: false,\r\n      invalidEmail: false,\r\n      invalidName: false,\r\n      signUpSuccess: false,\r\n      alreadySignedUp: false,\r\n      noAccount: false,\r\n      failedSigning: false,\r\n      inputEmail: \"\",\r\n      inputName: \"\",\r\n      // displayMessage: \"\",\r\n      loginMode: true,\r\n    };\r\n    this.cryptService = new CryptService();\r\n\r\n    this.handleInputNameChange = this.handleInputNameChange.bind(this);\r\n    this.handleInputEmailChange = this.handleInputEmailChange.bind(this);\r\n\r\n    this.onLoginClick = this.onLoginClick.bind(this);\r\n    this.signMessage = this.signMessage.bind(this);\r\n    this.authenticate = this.authenticate.bind(this);\r\n  }\r\n\r\n  onSignupClick(/*event: React.MouseEvent<HTMLInputElement, MouseEvent>*/) {\r\n    const publicAddress = this.props.user.publicAddress;\r\n\r\n    // delete after implement router in which login will not be displayed unless connected to metamask\r\n    if (publicAddress === \"\") {\r\n      // comment out conditional for testing signup\r\n      console.log(\"Invalid public address. Connect to Metamask.\");\r\n      // this.setState({ displayMessage: \"Connect to Metamask.\" });\r\n      // alert(\"Connect to Metamask\");\r\n      return;\r\n    }\r\n    const re: RegExp = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    console.log(re.test(this.state.inputEmail.toLowerCase()));\r\n    console.log(this.state.inputEmail);\r\n    if (\r\n      this.state.inputEmail.length <= 1 ||\r\n      !re.test(this.state.inputEmail.toLowerCase())\r\n    ) {\r\n      console.log(this.state.inputName);\r\n      console.log(\"Enter your email.\");\r\n      // alert(\"Please enter your email\");\r\n      this.setState({\r\n        signingUp: false,\r\n        failedKey: false,\r\n        invalidEmail: true,\r\n        invalidName: false,\r\n        signUpSuccess: false,\r\n        alreadySignedUp: false,\r\n        noAccount: false,\r\n        failedSigning: false,\r\n      });\r\n      return;\r\n    } else if (this.state.inputName.length <= 1) {\r\n      console.log(this.state.inputName);\r\n      console.log(\"Enter your name.\");\r\n      // alert(\"Please enter your name.\");\r\n      this.setState({\r\n        signingUp: false,\r\n        failedKey: false,\r\n        invalidEmail: false,\r\n        invalidName: true,\r\n        signUpSuccess: false,\r\n        alreadySignedUp: false,\r\n        noAccount: false,\r\n        failedSigning: false,\r\n      });\r\n      // this.setState({ displayMessage: \"Enter Your Name.\" });\r\n      return;\r\n    }\r\n\r\n    this.signup({\r\n      publicAddress: publicAddress,\r\n      email: this.state.inputEmail,\r\n      inputName: this.state.inputName,\r\n    }).catch((e: Error) => {\r\n      console.log(e);\r\n    });\r\n    // // metamask popup to sign\r\n    // .then(this.signMessage)\r\n    // // send signature to backend\r\n    // .then(this.authenticate)\r\n    // .catch((err: Error) => {\r\n    // console.log(err);\r\n    // this.setState({ displayMessage: \"Error. Please Try Again Later.\" });\r\n    // alert(\"Error. Please Try Again Later.\");\r\n    // });\r\n\r\n    return;\r\n  }\r\n\r\n  onLoginClick(/*event: React.MouseEvent<HTMLInputElement, MouseEvent>*/) {\r\n    console.log(\"login clicked.\");\r\n    // event.preventDefault();\r\n\r\n    const publicAddress = this.props.user.publicAddress; // comment out for testing signup\r\n    // const publicAddress = \"newAddress\"; // uncomment for testing signup\r\n\r\n    // delete after implement router in which login will not be displayed unless connected to metamask\r\n    if (publicAddress === \"\") {\r\n      // shouldn't happen in theory\r\n      console.log(\"Invalid public address. Connect to Metamask.\");\r\n      // alert(\"Please Connect to Metamask\");\r\n      // this.setState({ displayMessage: \"Please Connect to Metamask.\" });\r\n      return;\r\n    }\r\n\r\n    console.log(\"public address:\", publicAddress);\r\n\r\n    const init: RequestInit = {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    fetch(\r\n      `${process.env.REACT_APP_BACKEND_URL}/auth/users/${publicAddress}`,\r\n      init\r\n    )\r\n      .then((response) => {\r\n        console.log(\"logging nonce fetch response\");\r\n        console.log(response);\r\n        return response.json();\r\n      })\r\n      .then((users) => {\r\n        console.log(users);\r\n\r\n        if (users[0] == null) {\r\n          console.log(\"need to signup.\");\r\n          // this.setState({\r\n          //   displayMessage: \"No Existing Account. Sign Up Instead.\",\r\n          // });\r\n          // alert(\"No Existing Account. Sign Up Instead.\");\r\n          this.setState({\r\n            signingUp: false,\r\n            failedKey: false,\r\n            invalidEmail: false,\r\n            invalidName: true,\r\n            signUpSuccess: false,\r\n            alreadySignedUp: false,\r\n            noAccount: true,\r\n            failedSigning: false,\r\n          });\r\n          return Promise.reject(\"no existing account\");\r\n        }\r\n        return users[0];\r\n      })\r\n      // metamask popup to sign\r\n      .then(this.signMessage)\r\n      // send signature to backend\r\n      .then(this.authenticate)\r\n      //.then(this.doStuffWithToken) // after receiving the token\r\n      .catch((err: Error) => {\r\n        console.log(err);\r\n        // this.setState({ displayMessage: \"Login Failed. Try Again Later.\" });\r\n        // alert(\"Login Failed.\");\r\n      });\r\n\r\n    return;\r\n  }\r\n\r\n  async signup({\r\n    publicAddress,\r\n    email,\r\n    inputName,\r\n  }: {\r\n    publicAddress: string;\r\n    email: string;\r\n    inputName: string;\r\n  }) {\r\n    console.log(\r\n      \"publicAddress:\",\r\n      publicAddress,\r\n      \"email\",\r\n      email,\r\n      \"name:\",\r\n      inputName\r\n    );\r\n    // this.setState({ displayMessage: \"Signing You Up . . .\" });\r\n\r\n    this.setState({\r\n      signingUp: true,\r\n      failedKey: false,\r\n      invalidEmail: false,\r\n      invalidName: false,\r\n      signUpSuccess: false,\r\n      alreadySignedUp: false,\r\n      noAccount: false,\r\n      failedSigning: false,\r\n    });\r\n    const publicKey = await this.cryptService.getPublicKey(publicAddress);\r\n    console.log(publicKey);\r\n\r\n    if (!publicKey) {\r\n      // alert(\"Failed to Get Public Key . . .\");\r\n      this.setState({\r\n        signingUp: false,\r\n        failedKey: true,\r\n        invalidEmail: false,\r\n        invalidName: false,\r\n        signUpSuccess: false,\r\n        alreadySignedUp: false,\r\n        noAccount: false,\r\n        failedSigning: false,\r\n      });\r\n      return Promise.reject(\"failed to get public key\");\r\n    }\r\n\r\n    this.setState({ signingUp: false });\r\n\r\n    return await fetch(\r\n      `${process.env.REACT_APP_BACKEND_URL}/auth/users/create`,\r\n      {\r\n        body: JSON.stringify({\r\n          publicAddress: publicAddress,\r\n          name: inputName,\r\n          email: email,\r\n          publicKey: publicKey,\r\n        }),\r\n        headers: {\r\n          \"Access-Control-Allow-Origin\": \"*\",\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        method: \"POST\",\r\n      }\r\n    )\r\n      .then((response) => {\r\n        console.log(\"logging signup response\");\r\n        console.log(response);\r\n        return response.json();\r\n      })\r\n      .then((users) => {\r\n        console.log(users);\r\n        console.log(\"signup finish\");\r\n        if (!users || users.length === 0) {\r\n          // alert(\"Please Login Instead . . .\");\r\n          this.setState({\r\n            signingUp: false,\r\n            failedKey: false,\r\n            invalidEmail: false,\r\n            invalidName: false,\r\n            signUpSuccess: false,\r\n            alreadySignedUp: true,\r\n            noAccount: false,\r\n            failedSigning: false,\r\n          });\r\n        } else {\r\n          // alert(\"You're Signed Up. Please Login . . . \");\r\n          this.setState({\r\n            signingUp: false,\r\n            failedKey: false,\r\n            invalidEmail: false,\r\n            invalidName: false,\r\n            signUpSuccess: true,\r\n            alreadySignedUp: false,\r\n            noAccount: false,\r\n            failedSigning: false,\r\n          });\r\n          return users[0];\r\n        }\r\n      })\r\n      // .then((response) => response.json()) // needs to handle response in which user has existing account\r\n      .catch((err: Error) => console.log(err));\r\n  }\r\n\r\n  async signMessage({\r\n    publicAddress,\r\n    nonce,\r\n  }: {\r\n    publicAddress: string;\r\n    nonce: string;\r\n  }): Promise<{ publicAddress: string; signature: string }> {\r\n    // this.setState({displayMessage: \"Sign the Message to Confirm Public Address.\"})\r\n    console.log(\"signing the nonce\");\r\n    console.log(nonce);\r\n    // const prefix = '\\x19Ethereum Signed Message:\\n' + String.fromCharCode(nonce.length);\r\n    // const message = web3.utils.keccak256(prefix + nonce);\r\n    const message = nonce;\r\n    // const message = web3.utils.keccak256(nonce);\r\n    console.log(message);\r\n    console.log(web3.utils.utf8ToHex(`${message}`));\r\n    console.log(publicAddress);\r\n    return new Promise((resolve, reject) => {\r\n      // web3.eth.sign doesn't seem to work (never finishes)\r\n      web3.eth.personal\r\n        .sign(\r\n          message,\r\n          // web3.utils.utf8ToHex(`${message}`),\r\n          publicAddress,\r\n          \"\",\r\n          (err, signature) => {\r\n            //console.log(web3.eth.accounts.recover(web3.utils.keccak256(nonce), signature));\r\n            //web3.eth.personal.ecRecover(message, signature).then((v) => console.log(v));\r\n            if (err) {\r\n              console.log(\"error when signing\");\r\n              // alert(\"Signing Failed . . .\");\r\n              this.setState({\r\n                signingUp: false,\r\n                failedKey: false,\r\n                invalidEmail: false,\r\n                invalidName: false,\r\n                signUpSuccess: false,\r\n                alreadySignedUp: false,\r\n                noAccount: false,\r\n                failedSigning: true,\r\n              });\r\n              return reject(err);\r\n            }\r\n            console.log(\"message signed\");\r\n            return resolve({ publicAddress, signature });\r\n          }\r\n        )\r\n        .then(console.log)\r\n        .catch((err: Error) => {\r\n          console.log();\r\n        });\r\n    });\r\n  }\r\n\r\n  async authenticate({\r\n    publicAddress,\r\n    signature,\r\n  }: {\r\n    publicAddress: string;\r\n    signature: string;\r\n  }) {\r\n    console.log(\"authenticating\");\r\n    // this.setState({\r\n    //   displayMessage: this.state.loginMode\r\n    //     ? \"Logging You In . . .\"\r\n    //     : \"Signing You Up . . .\",\r\n    // });\r\n    return fetch(`${process.env.REACT_APP_BACKEND_URL}/auth`, {\r\n      body: JSON.stringify({ publicAddress, signature }),\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"POST\",\r\n    })\r\n      .then((response) => {\r\n        console.log(\"received response\");\r\n        console.log(response);\r\n\r\n        response\r\n          .json()\r\n          .then((body: ResponseBody) => {\r\n            console.log(body);\r\n            const data = body.data;\r\n            const j = data.jwtToken;\r\n            console.log(\"jwtToken\", j);\r\n            let jwtToken = j ? j : undefined;\r\n            if (jwtToken) {\r\n              console.log(jwtToken);\r\n              this.props.callback({\r\n                publicAddress: this.props.user.publicAddress,\r\n                name: this.props.user.name,\r\n                jwtToken: jwtToken,\r\n              });\r\n            } else {\r\n              console.log(\"error with jwtToken\");\r\n            }\r\n          })\r\n          .catch((err: Error) => {\r\n            console.log(err);\r\n          });\r\n      })\r\n      .catch((err: Error) => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  handleInputNameChange(event: any) {\r\n    console.log(event.target.value);\r\n    this.setState({ inputName: event.target.value });\r\n  }\r\n\r\n  handleInputEmailChange(event: any) {\r\n    console.log(event.target.value);\r\n    this.setState({ inputEmail: event.target.value });\r\n  }\r\n\r\n  toggleMode() {\r\n    this.setState({\r\n      loginMode: !this.state.loginMode,\r\n      signingUp: false,\r\n      failedKey: false,\r\n      invalidEmail: false,\r\n      invalidName: false,\r\n      signUpSuccess: false,\r\n      alreadySignedUp: false,\r\n      noAccount: false,\r\n      failedSigning: false,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const loginDisplay = (\r\n      <div className=\"button-blur d-flex justify-content-between\">\r\n        <Button\r\n          variant=\"outline-light\"\r\n          className=\"mr-3 flex-shrink-1\"\r\n          onClick={() => {\r\n            this.toggleMode();\r\n          }}\r\n        >\r\n          Sign Up\r\n        </Button>\r\n        <Button\r\n          variant=\"outline-light\"\r\n          className=\"flex-fill\"\r\n          onClick={() => {\r\n            this.onLoginClick();\r\n          }}\r\n        >\r\n          Login\r\n        </Button>\r\n      </div>\r\n    );\r\n\r\n    const signupDisplay = (\r\n      <form className=\"justify-content-between\">\r\n        <InputGroup className=\"label-top border-radius\">\r\n          <Form.Group controlId=\"formEmail\">\r\n            {/* <Form.Label>Email address</Form.Label> */}\r\n            <Form.Control\r\n              type=\"email\"\r\n              className=\"w-100 mb-3\"\r\n              placeholder=\"Email\"\r\n              onChange={this.handleInputEmailChange}\r\n            />\r\n            {/* <Form.Text className=\"text-muted\">\r\n              We'll never share your email with anyone else.\r\n            </Form.Text> */}\r\n          </Form.Group>\r\n          {/* <InputGroup.Prepend className=\"m-2 flex-shrink-1\">\r\n              Sign Up\r\n            </InputGroup.Prepend> */}\r\n          <FormControl\r\n            type=\"text\"\r\n            className=\"w-100\"\r\n            placeholder=\"Name\"\r\n            value={this.state.inputName}\r\n            onChange={this.handleInputNameChange}\r\n          />\r\n        </InputGroup>\r\n        <div className=\"d-flex button-blur\">\r\n          <Button\r\n            variant=\"outline-light\"\r\n            className=\"float-right flex-fill\"\r\n            onClick={() => {\r\n              this.onSignupClick();\r\n            }}\r\n          >\r\n            Sign Up\r\n          </Button>\r\n          <Button\r\n            variant=\"outline-light\"\r\n            className=\"float-right flex-fill ml-3\"\r\n            onClick={() => {\r\n              this.toggleMode();\r\n              this.setState({ inputName: \"\" });\r\n            }}\r\n          >\r\n            Back\r\n          </Button>\r\n        </div>\r\n      </form>\r\n    );\r\n\r\n    const { user } = this.props;\r\n    const {\r\n      signingUp,\r\n      failedKey,\r\n      invalidEmail,\r\n      invalidName,\r\n      signUpSuccess,\r\n      alreadySignedUp,\r\n      noAccount,\r\n      failedSigning,\r\n      loginMode,\r\n    } = this.state;\r\n\r\n    return (\r\n      <div className=\"login\">\r\n        <div className=\"login-form\">\r\n          <div>{loginMode ? loginDisplay : signupDisplay}</div>\r\n          <div className=\"mt-3 d-flex justify-content-between\">\r\n            {/* <FontAwesomeIcon icon={faInfoCircle} size=\"lg\" className=\"ml-3\" /> */}\r\n            {(signingUp ||\r\n              failedKey ||\r\n              invalidEmail ||\r\n              invalidName ||\r\n              signUpSuccess ||\r\n              alreadySignedUp ||\r\n              failedSigning) && (\r\n                <OverlayTrigger\r\n              placement=\"bottom\"\r\n              overlay={\r\n                <Tooltip id=\"learn-more\">\r\n                  <>\r\n                    {signingUp && (\r\n                      <div>\r\n                        We ask you to provide your <b>Public Key</b> so that you\r\n                        can <b>1.</b> keep your letters <b>secure</b> with\r\n                        end-to-end encryption <b>2.</b> allow other users to\r\n                        send you letters.\r\n                      </div>\r\n                    )}\r\n                    {failedKey && (\r\n                      <div>\r\n                        Please click <em>Provide</em> on Metamask to sign up. We\r\n                        need your <b>Public Key</b> to 1. keep your letters\r\n                        secure 2. Allow other users to send letters to you.\r\n                        Learn more about <b>End-to-End Encryption</b> in the\r\n                        FAQs.\r\n                      </div>\r\n                    )}\r\n                    {invalidEmail && (\r\n                      <div>\r\n                        Please enter a valid email. You will need to verify your\r\n                        email to complete the sign up process. Ex:{\" \"}\r\n                        <b>placeholder@lehigh.edu</b>\r\n                      </div>\r\n                    )}\r\n                    {invalidName && (\r\n                      <div>\r\n                        Please enter a valid name. This name will be{\" \"}\r\n                        <b>publicly visible</b> to other users.\r\n                      </div>\r\n                    )}\r\n                    {user.publicAddress === \"\" && (\r\n                      <div>\r\n                        Please connect to metamask. You may need to check the\r\n                        Metamask extension. For Metamask troubleshooting, check\r\n                        out the FAQs.\r\n                      </div>\r\n                    )}\r\n                    {signUpSuccess && (\r\n                      <div>\r\n                        You've successfully signed up. Please check your{\" \"}\r\n                        <b>Email</b>\r\n                        to verify your identity!{\" \"}\r\n                      </div>\r\n                    )}\r\n                    {alreadySignedUp && (\r\n                      <div>\r\n                        You already have an account. Please click <b>Login</b>{\" \"}\r\n                        to authenticate. For troubleshooting, check out the\r\n                        FAQs.\r\n                      </div>\r\n                    )}\r\n                    {noAccount && (\r\n                      <div>\r\n                        No account found. Please click <b>Sign Up</b> to create\r\n                        an account. For troubleshooting, check out the FAQs.\r\n                      </div>\r\n                    )}\r\n                    {failedSigning && (\r\n                      <div className=\"text-warning\">\r\n                        Please click <em>Sign</em> on Metamask to <b>Login</b>.\r\n                        We need your signature to verify your identity. Learn\r\n                        more about <b>Signing / Verification</b> in the FAQs.\r\n                      </div>\r\n                    )}\r\n                    {/* {!signingUp &&\r\n                      !failedKey &&\r\n                      !invalidEmail &&\r\n                      !invalidName &&\r\n                      !signUpSuccess &&\r\n                      !alreadySignedUp &&\r\n                      !failedSigning && (\r\n                        <>\r\n                          {loginMode && (\r\n                            <div>\r\n                              We're excited that you're with us. Please{\" \"}\r\n                              <b>Login</b> to send, upload, or receive\r\n                              verifiable letters!\r\n                            </div>\r\n                          )}\r\n                          {!loginMode && (\r\n                            <div>\r\n                              We're excited that you're with us. Please fill out\r\n                              the form and <b>Sign Up</b> to send, upload, or\r\n                              receive verifiable letters!\r\n                            </div>\r\n                          )}\r\n                        </>\r\n                      )} */}\r\n                  </>\r\n                </Tooltip>\r\n              }\r\n            >\r\n              <FontAwesomeIcon\r\n                icon={\r\n                  (signingUp ||\r\n                  signUpSuccess)\r\n                    ? faInfoCircle\r\n                    : faExclamationTriangle\r\n                }\r\n                size=\"lg\"\r\n                className=\"mr-3\"\r\n              />\r\n            </OverlayTrigger>)}\r\n            {signingUp && <div className=\"mt-1\">See Metamask to signup</div>}\r\n            {failedKey && <div className=\"mt-1\">Error in signup process</div>}\r\n            {invalidEmail && (\r\n              <div className=\"mt-1\">Please enter a valid email</div>\r\n            )}\r\n            {invalidName && (\r\n              <div className=\"mt-1\">Please enter a valid name</div>\r\n            )}\r\n            {user.publicAddress === \"\" && (\r\n              <div className=\"mt-1\">Please connect to Metamask</div>\r\n            )}\r\n            {signUpSuccess && (\r\n              <div className=\"mt-1\">Success. Please verify your email</div>\r\n            )}\r\n            {alreadySignedUp && (\r\n              <div className=\"mt-1\">Please login instead</div>\r\n            )}\r\n            {noAccount && <div className=\"mt-1\">Please signup instead</div>}\r\n            {failedSigning && <div className=\"mt-1\">Failed to login</div>}\r\n            {/* {!signingUp &&\r\n              !failedKey &&\r\n              !invalidEmail &&\r\n              !invalidName &&\r\n              !signUpSuccess &&\r\n              !alreadySignedUp &&\r\n              !failedSigning && (\r\n                <div className=\"mt-1\">\r\n                  {loginMode ? \"\" : \"Fill out the form to signup\"}\r\n                </div>\r\n              )} */}\r\n            <div className=\"flex-fill\"></div>\r\n          </div>\r\n\r\n          {/* <div className=\"alert\"> {this.state.displayMessage}</div> */}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Login;\r\n","import React from \"react\";\r\nimport UserAuth from \"../common/UserAuth.interface\";\r\nimport {withRouter} from 'react-router';\r\nimport { Card, Row, Col, Button } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport * as ROUTES from \"../routes\";\r\nimport \"./Dashboard.css\";\r\n\r\nconst headers = new Headers();\r\nheaders.set(\"Access-Control-Allow-Origin\", \"*\");\r\nheaders.set(\"Content-Type\", \"application/json\");\r\n\r\ninterface DashboardProps {\r\n  user: UserAuth;\r\n}\r\ninterface DashboardState {}\r\n\r\nclass Dashboard extends React.Component<DashboardProps, DashboardState> {\r\n  constructor(props: DashboardProps) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Col className=\"dashboard h-100 flex-column d-flex\">\r\n        {/* <Row className=\"dashboard-header h-50\">\r\n          <h3>Dashboard</h3>\r\n          <Col>\r\n            <h5>Notifications</h5>\r\n            <div className=\"dashboard-notifications\"></div>\r\n          </Col>\r\n        </Row> */}\r\n        <Row className=\"dashboard-header\">\r\n          <h3>Dashboard</h3>\r\n        </Row>\r\n        <Row className=\"dashboard-body d-flex h-100\">\r\n        <Col className='mt-5 mb-5'>\r\n            <Link to={ROUTES.REQUESTOR} className=\"text-white-50 h-100\">\r\n              <Card.Header className=\"dashboard-redirects h-100 d-flex justify-content-center align-items-center\">\r\n                <h1>Requestor</h1>\r\n              </Card.Header>\r\n            </Link>\r\n          </Col>\r\n          <Col className='mt-5 mb-5'>\r\n            <Link to={ROUTES.WRITER} className=\"text-white-50 h-100\">\r\n              <Card.Header className=\"dashboard-redirects h-100 d-flex justify-content-center align-items-center\">\r\n                <h1>Writer</h1>\r\n              </Card.Header>\r\n            </Link>\r\n          </Col>\r\n          <Col className='mt-5 mb-5'>\r\n            <Link to={ROUTES.RECIPIENT} className=\"text-white-50 h-100\">\r\n              <Card.Header className=\"dashboard-redirects h-100 d-flex justify-content-center align-items-center\">\r\n                <h1>Recipient</h1>\r\n              </Card.Header>\r\n            </Link>\r\n          </Col>\r\n        </Row>\r\n      </Col>\r\n    );\r\n  }\r\n}\r\nexport default Dashboard;\r\n","import { TutorialToken } from \"./contract-types/TutorialToken\"; // import is correct\r\nimport React, { FunctionComponent } from \"react\";\r\n//import { RouteComponentProps } from \"@reach/router\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Link,\r\n  Redirect,\r\n  Switch,\r\n  RouteComponentProps,\r\n  withRouter,\r\n} from \"react-router-dom\";\r\nimport TutorialTokenContractData from \"./contract-data/TutorialToken.json\";\r\nimport BN from \"bn.js\";\r\n\r\nimport Nav from \"./nav/Nav\";\r\nimport HomePage from \"./home/Home\";\r\nimport WriterPage from \"./writer/Writer\";\r\nimport RequestorPage from \"./requestor/Requestor\";\r\nimport RecipientPage from \"./recipient/Recipient\";\r\nimport LoginPage from \"./login/Login\";\r\nimport DashboardPage from \"./dashboard/Dashboard\";\r\n\r\nimport UserAuth from \"./common/UserAuth.interface\";\r\nimport \"./App.css\";\r\nimport * as ROUTES from \"./routes\";\r\n\r\nimport Web3 from \"web3\";\r\nexport let web3: Web3;\r\nexport let ethereum: any;\r\n\r\nenum AuthRoutes {\r\n  dashboard = \"/dashboard\",\r\n  requestor = \"/requestor\",\r\n  writer = \"/writer\",\r\n  recipient = \"/recipient\",\r\n}\r\n\r\nenum NonAuthRoutes {\r\n  home = \"/\",\r\n  login = \"/login\",\r\n}\r\n\r\ninterface Props {\r\n  Component: React.FC<RouteComponentProps>;\r\n  path: string;\r\n  exact?: boolean;\r\n  authed: boolean;\r\n}\r\n\r\nconst AuthRoute = ({\r\n  Component,\r\n  path,\r\n  exact = false,\r\n  authed,\r\n}: Props): JSX.Element => {\r\n  const isAuthed = authed;\r\n  const message = \"Login to view this page\";\r\n  return (\r\n    <Route\r\n      exact={exact}\r\n      path={path}\r\n      render={(props: RouteComponentProps) =>\r\n        isAuthed ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Redirect\r\n            to={{\r\n              pathname: NonAuthRoutes.login,\r\n            }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport const GAS_LIMIT_STANDARD = 6000000;\r\nexport let accounts: string[];\r\nlet web3Provider;\r\n\r\nlet contract: any;\r\nconst ERC20_NETWORK = \"https://services.jade.builders/core-geth/kotti/1.11.2\";\r\n\r\nexport async function deployContract<T>(\r\n  contractName: string,\r\n  abi: any,\r\n  code: any,\r\n  ...args: any[]\r\n): Promise<T> {\r\n  const Contract = new web3.eth.Contract(abi);\r\n  const contractResult = await Contract.deploy({ data: code }).send({\r\n    from: accounts[0],\r\n  });\r\n  return contractResult as any;\r\n}\r\n\r\nexport async function deployTutorialToken(): Promise<TutorialToken> {\r\n  console.log(\"Deploying Contract from innner deploy tutorial token method: \");\r\n  var contract = await deployContract<TutorialToken>(\r\n    \"TutorialToken\",\r\n    TutorialTokenContractData.abi,\r\n    TutorialTokenContractData.bytecode,\r\n    0\r\n  );\r\n  console.log(\"Contract from innner deploy tutorial token method: \" + contract);\r\n  return contract;\r\n}\r\n\r\ntype MyProps = {} & RouteComponentProps;\r\ntype MyState = {\r\n  windowEthereum: boolean;\r\n  numErcBeingTraded: number;\r\n  contract: TutorialToken;\r\n  checkedLocal: boolean;\r\n  connectedTo: boolean; // metamask\r\n  loggedIn: boolean; // our app\r\n  user: UserAuth;\r\n};\r\n\r\nclass App extends React.Component<MyProps, MyState> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      windowEthereum: true,\r\n      numErcBeingTraded: 0,\r\n      contract: {} as TutorialToken,\r\n      checkedLocal: false,\r\n      connectedTo: false,\r\n      loggedIn: false,\r\n      user: { publicAddress: \"\", name: \"\", jwtToken: \"\" },\r\n    };\r\n    this.onConnect = this.onConnect.bind(this);\r\n    this.onLogin = this.onLogin.bind(this);\r\n    //this.handleErcInputChange = this.handleErcInputChange.bind(this);\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.onConnect();\r\n  }\r\n\r\n  handleErcInputChange(event: any) {\r\n    this.setState({\r\n      numErcBeingTraded: event.target.value,\r\n    });\r\n    console.log(\"Num of ERC wanted to trade: \" + this.state.numErcBeingTraded);\r\n    var rate = this.state.contract.methods.rate().call();\r\n    var numErc = new BN(this.state.numErcBeingTraded);\r\n    //var numTokens = rate.mul(numErc);\r\n    //console.log(\"Num of Tutorial Tokens you can receive: \" + numTokens.toString());\r\n  }\r\n\r\n  async onConnect() {\r\n    console.log(\"onConnect\");\r\n    const ethereum = (window as any).ethereum;\r\n    console.log(ethereum);\r\n    if (ethereum) {\r\n      await ethereum.enable();\r\n      web3Provider = (window as any).web3.currentProvider;\r\n      // NOTE you might need this\r\n      //await ethereum.send('eth_requestAccounts')\r\n\r\n      web3 = new Web3(web3Provider);\r\n      accounts = await ethereum.request({ method: \"eth_accounts\" });\r\n      // contract = await deployTutorialToken(); // temporary disable\r\n      console.log(accounts);\r\n      // ethereum\r\n      //       .request({\r\n      //         method: \"eth_getEncryptionPublicKey\",\r\n      //         params: [accounts[0]], // you must have access to the specified account\r\n      //       })\r\n      //       .then((publicKey: string) => {\r\n      //         console.log(publicKey);\r\n      //       });\r\n\r\n      let u = window.localStorage.getItem(\"dappUser\");\r\n      let user = { publicAddress: accounts[0], name: \"\", jwtToken: \"\" };\r\n\r\n      if (u != null) {\r\n        let t = JSON.parse(u);\r\n        console.log(t);\r\n        // need to check if different account, else do not set JWT\r\n        if (user.publicAddress === t.publicAddress) {\r\n          const verified: boolean = await this.checkJWT(t);\r\n          console.log(verified);\r\n          if (verified) {\r\n            user = {\r\n              publicAddress: t.publicAddress,\r\n              name: t.name,\r\n              jwtToken: t.jwtToken,\r\n            };\r\n            // this.props.history.push(ROUTES.DASHBOARD);\r\n            this.setState({\r\n              contract,\r\n              user,\r\n              loggedIn: true,\r\n              checkedLocal: true,\r\n              connectedTo: true,\r\n            });\r\n          } else {\r\n            // this.props.history.push(ROUTES.LOGIN);\r\n            this.setState({\r\n              contract,\r\n              user,\r\n              loggedIn: false,\r\n              checkedLocal: true,\r\n              connectedTo: true,\r\n            });\r\n          }\r\n        } else {\r\n          this.setState({\r\n            contract,\r\n            connectedTo: true,\r\n            user,\r\n            checkedLocal: true,\r\n          });\r\n        }\r\n      } else {\r\n        console.log(\"\")\r\n        this.setState({\r\n          contract,\r\n          connectedTo: true,\r\n          user,\r\n          checkedLocal: true,\r\n        });\r\n      }\r\n      console.log(user.publicAddress, user.name, user.jwtToken);\r\n    } else {\r\n      // alert(\r\n      //   \"Please download the Metamask browser extension (supported on Chrome & Firefox)\"\r\n      // );\r\n      this.setState({ windowEthereum: false });\r\n      this.props.history.push(ROUTES.METAMASK_TUTORIAL);\r\n      // alert(\r\n      //   \"Please download the Metamask browser extension (supported on Chrome & Firefox)\"\r\n      // );\r\n    }\r\n  }\r\n\r\n  async checkJWT(user: UserAuth): Promise<boolean> {\r\n    console.log(\"checkJWT\");\r\n    try {\r\n      // make any authed route request\r\n      let response = await fetch(\r\n        `${process.env.REACT_APP_BACKEND_URL}/api/v1/users/${user.publicAddress}`,\r\n        {\r\n          body: JSON.stringify({\r\n            auth: {\r\n              jwtToken: user.jwtToken,\r\n              publicAddress: user.publicAddress,\r\n            },\r\n            data: [],\r\n          }),\r\n          headers: {\r\n            \"Access-Control-Allow-Origin\": \"*\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          method: \"POST\",\r\n        }\r\n      );\r\n      console.log(response.status);\r\n      if (response.status === 401) {\r\n        return false;\r\n      } else {\r\n        return true;\r\n      }\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  onLogin(u: UserAuth) {\r\n    console.log(\"login complete\");\r\n    this.setState({ user: u, loggedIn: true });\r\n    this.props.history.push(ROUTES.DASHBOARD);\r\n    window.localStorage.setItem(\"dappUser\", JSON.stringify(u));\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      windowEthereum,\r\n      checkedLocal,\r\n      connectedTo,\r\n      loggedIn,\r\n      user,\r\n    } = this.state;\r\n    const home = <HomePage user={user} />;\r\n    const login = <LoginPage callback={this.onLogin.bind(this)} user={user} />;\r\n    const dashboard = <DashboardPage user={user} />;\r\n    const requestor = <RequestorPage user={user} />;\r\n    const writer = <WriterPage user={user} />;\r\n    const recipient = <RecipientPage user={user} />;\r\n\r\n    return (\r\n      <div>\r\n        <Nav\r\n          user={user}\r\n          connectedTo={connectedTo}\r\n          onConnect={this.onConnect}\r\n          loggedIn={loggedIn}\r\n        />\r\n        {/* {loggedIn ? <Redirect to={ROUTES.DASHBOARD} /> : null} */}\r\n        {/* {!windowEthereum ? <Redirect to={ROUTES.METAMASK_TUTORIAL} /> : null} */}\r\n        {checkedLocal && (\r\n          <div className=\"application-body\">\r\n            <Switch>\r\n              <Route\r\n                path={NonAuthRoutes.login}\r\n                authed={loggedIn}\r\n                component={() => login}\r\n              />\r\n              <Route\r\n                exact\r\n                path={NonAuthRoutes.home}\r\n                authed={loggedIn}\r\n                component={() => home}\r\n              />\r\n              <AuthRoute\r\n                path={AuthRoutes.requestor}\r\n                authed={loggedIn}\r\n                Component={() => requestor}\r\n              />\r\n              <AuthRoute\r\n                path={AuthRoutes.writer}\r\n                authed={loggedIn}\r\n                Component={() => writer}\r\n              />\r\n              <AuthRoute\r\n                path={AuthRoutes.recipient}\r\n                authed={loggedIn}\r\n                Component={() => recipient}\r\n              />\r\n              <AuthRoute\r\n                path={AuthRoutes.dashboard}\r\n                authed={loggedIn}\r\n                Component={() => dashboard}\r\n              />\r\n            </Switch>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default withRouter(App);\r\n"],"sourceRoot":""}